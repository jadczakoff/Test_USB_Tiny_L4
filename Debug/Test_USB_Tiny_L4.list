
Test_USB_Tiny_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b348  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b61c  0800b61c  00022044  2**0
                  CONTENTS
  4 .ARM          00000008  0800b61c  0800b61c  0001b61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b624  0800b624  00022044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002044  20000000  0800b62c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de8  20002044  0800d670  00022044  2**2
                  ALLOC
 10 ._user_heap_stack 00001504  20002e2c  0800d670  00022e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023eda  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054b4  00000000  00000000  00045f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  0004b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  0004cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7d7  00000000  00000000  0004ea18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d23  00000000  00000000  0007b1ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103caf  00000000  00000000  0009ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072bc  00000000  00000000  001a2c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20002044 	.word	0x20002044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b4b8 	.word	0x0800b4b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002048 	.word	0x20002048
 80001c4:	0800b4b8 	.word	0x0800b4b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
     PB4 (NJTRST)   ------> LCD_SEG8
     PB5   ------> LCD_SEG9
     PB9   ------> LCD_COM3
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f2:	4bb7      	ldr	r3, [pc, #732]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4ab6      	ldr	r2, [pc, #728]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4bb4      	ldr	r3, [pc, #720]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4bb1      	ldr	r3, [pc, #708]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4ab0      	ldr	r2, [pc, #704]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4bae      	ldr	r3, [pc, #696]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	4bab      	ldr	r3, [pc, #684]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4aaa      	ldr	r2, [pc, #680]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4ba8      	ldr	r3, [pc, #672]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4ba5      	ldr	r3, [pc, #660]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4aa4      	ldr	r2, [pc, #656]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4ba2      	ldr	r3, [pc, #648]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b9f      	ldr	r3, [pc, #636]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a9e      	ldr	r2, [pc, #632]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b99      	ldr	r3, [pc, #612]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a98      	ldr	r2, [pc, #608]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b96      	ldr	r3, [pc, #600]	; (80007d0 <MX_GPIO_Init+0x2f4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f240 1109 	movw	r1, #265	; 0x109
 8000588:	4892      	ldr	r0, [pc, #584]	; (80007d4 <MX_GPIO_Init+0x2f8>)
 800058a:	f007 f897 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	210c      	movs	r1, #12
 8000592:	4891      	ldr	r0, [pc, #580]	; (80007d8 <MX_GPIO_Init+0x2fc>)
 8000594:	f007 f892 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	488f      	ldr	r0, [pc, #572]	; (80007dc <MX_GPIO_Init+0x300>)
 80005a0:	f007 f88c 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005aa:	488c      	ldr	r0, [pc, #560]	; (80007dc <MX_GPIO_Init+0x300>)
 80005ac:	f007 f886 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	488a      	ldr	r0, [pc, #552]	; (80007e0 <MX_GPIO_Init+0x304>)
 80005b6:	f007 f881 	bl	80076bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80005ba:	2308      	movs	r3, #8
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2302      	movs	r3, #2
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4880      	ldr	r0, [pc, #512]	; (80007d4 <MX_GPIO_Init+0x2f8>)
 80005d2:	f006 fec9 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80005d6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	487b      	ldr	r0, [pc, #492]	; (80007dc <MX_GPIO_Init+0x300>)
 80005ee:	f006 febb 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80005f2:	2307      	movs	r3, #7
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4875      	ldr	r0, [pc, #468]	; (80007dc <MX_GPIO_Init+0x300>)
 8000606:	f006 feaf 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 800060a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800060e:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800061c:	230b      	movs	r3, #11
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	486d      	ldr	r0, [pc, #436]	; (80007dc <MX_GPIO_Init+0x300>)
 8000628:	f006 fe9e 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 800062c:	232f      	movs	r3, #47	; 0x2f
 800062e:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000634:	2302      	movs	r3, #2
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f006 fe91 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000646:	2310      	movs	r3, #16
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f006 fe83 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000662:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8000666:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000674:	230b      	movs	r3, #11
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f006 fe71 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000686:	f24f 2333 	movw	r3, #62003	; 0xf233
 800068a:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000698:	230b      	movs	r3, #11
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	484d      	ldr	r0, [pc, #308]	; (80007d8 <MX_GPIO_Init+0x2fc>)
 80006a4:	f006 fe60 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80006a8:	2304      	movs	r3, #4
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4846      	ldr	r0, [pc, #280]	; (80007d8 <MX_GPIO_Init+0x2fc>)
 80006c0:	f006 fe52 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 80006c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	483d      	ldr	r0, [pc, #244]	; (80007d4 <MX_GPIO_Init+0x2f8>)
 80006de:	f006 fe43 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80006e2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80006e6:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4838      	ldr	r0, [pc, #224]	; (80007e0 <MX_GPIO_Init+0x304>)
 8000700:	f006 fe32 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000704:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	482f      	ldr	r0, [pc, #188]	; (80007dc <MX_GPIO_Init+0x300>)
 800071e:	f006 fe23 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000722:	2305      	movs	r3, #5
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000726:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	482a      	ldr	r0, [pc, #168]	; (80007e0 <MX_GPIO_Init+0x304>)
 8000738:	f006 fe16 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_GPIO_Init+0x304>)
 8000754:	f006 fe08 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000758:	2308      	movs	r3, #8
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	481a      	ldr	r0, [pc, #104]	; (80007d8 <MX_GPIO_Init+0x2fc>)
 8000770:	f006 fdfa 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800077a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_GPIO_Init+0x2fc>)
 800078c:	f006 fdec 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x2f8>)
 80007a8:	f006 fdde 	bl	8007368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0x2f8>)
 80007c2:	f006 fdd1 	bl	8007368 <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48001000 	.word	0x48001000
 80007d8:	48000400 	.word	0x48000400
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000c00 	.word	0x48000c00

080007e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C1_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C1_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <MX_I2C1_Init+0x74>)
 8000820:	f006 ff64 	bl	80076ec <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 fa37 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C1_Init+0x74>)
 8000832:	f006 ffea 	bl	800780a <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 fa2e 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2C1_Init+0x74>)
 8000844:	f007 f82c 	bl	80078a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fa25 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20002060 	.word	0x20002060
 800085c:	40005400 	.word	0x40005400
 8000860:	00404c74 	.word	0x00404c74

08000864 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C2_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C2_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008a0:	f006 ff24 	bl	80076ec <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 f9f7 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008b2:	f006 ffaa 	bl	800780a <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 f9ee 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2C2_Init+0x74>)
 80008c4:	f006 ffec 	bl	80078a0 <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 f9e5 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200020b4 	.word	0x200020b4
 80008dc:	40005800 	.word	0x40005800
 80008e0:	00404c74 	.word	0x00404c74

080008e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0ae      	sub	sp, #184	; 0xb8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2288      	movs	r2, #136	; 0x88
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f00a fdcf 	bl	800b4a8 <memset>
  if(i2cHandle->Instance==I2C1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a42      	ldr	r2, [pc, #264]	; (8000a18 <HAL_I2C_MspInit+0x134>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d13b      	bne.n	800098c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4618      	mov	r0, r3
 8000922:	f008 f891 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800092c:	f000 f9b6 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	4a39      	ldr	r2, [pc, #228]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000960:	2304      	movs	r3, #4
 8000962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800096a:	4619      	mov	r1, r3
 800096c:	482c      	ldr	r0, [pc, #176]	; (8000a20 <HAL_I2C_MspInit+0x13c>)
 800096e:	f006 fcfb 	bl	8007368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800098a:	e040      	b.n	8000a0e <HAL_I2C_MspInit+0x12a>
  else if(i2cHandle->Instance==I2C2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <HAL_I2C_MspInit+0x140>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d13b      	bne.n	8000a0e <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f008 f850 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80009ae:	f000 f975 	bl	8000c9c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 80009ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	2301      	movs	r3, #1
 80009da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009e4:	2304      	movs	r3, #4
 80009e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009ee:	4619      	mov	r1, r3
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <HAL_I2C_MspInit+0x13c>)
 80009f2:	f006 fcb9 	bl	8007368 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_I2C_MspInit+0x138>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	bf00      	nop
 8000a10:	37b8      	adds	r7, #184	; 0xb8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400
 8000a24:	40005800 	.word	0x40005800

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f006 faea 	bl	8007004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f81e 	bl	8000a70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a34:	f000 f87e 	bl	8000b34 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f7ff fd50 	bl	80004dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3c:	f7ff fed2 	bl	80007e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a40:	f7ff ff10 	bl	8000864 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000a44:	f000 fa46 	bl	8000ed4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000a48:	f000 faae 	bl	8000fa8 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000a4c:	f000 fbcc 	bl	80011e8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000a50:	f000 fcb4 	bl	80013bc <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a54:	f000 fdaa 	bl	80015ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  tusb_init();
 8000a58:	f006 f986 	bl	8006d68 <tusb_init>

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void)
{
  tud_task_ext(UINT32_MAX, false);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a62:	f003 fa47 	bl	8003ef4 <tud_task_ext>
}
 8000a66:	bf00      	nop
  while (1)
  {

	  tud_task();

	  led_blinking_task();
 8000a68:	f000 f8e6 	bl	8000c38 <led_blinking_task>
	  tud_task();
 8000a6c:	e7f6      	b.n	8000a5c <main+0x34>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	; 0x58
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2244      	movs	r2, #68	; 0x44
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00a fd12 	bl	800b4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a96:	f007 f8b5 	bl	8007c04 <HAL_PWREx_ControlVoltageScaling>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa0:	f000 f8fc 	bl	8000c9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa4:	f007 f890 	bl	8007bc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <SystemClock_Config+0xc0>)
 8000aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <SystemClock_Config+0xc0>)
 8000ab0:	f023 0318 	bic.w	r3, r3, #24
 8000ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ab8:	2314      	movs	r3, #20
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000acc:	2302      	movs	r3, #2
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ad8:	2314      	movs	r3, #20
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f007 f9ab 	bl	8007e48 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000af8:	f000 f8d0 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2303      	movs	r3, #3
 8000b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2101      	movs	r1, #1
 8000b14:	4618      	mov	r0, r3
 8000b16:	f007 fd73 	bl	8008600 <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b20:	f000 f8bc 	bl	8000c9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b24:	f008 ffe8 	bl	8009af8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b28:	bf00      	nop
 8000b2a:	3758      	adds	r7, #88	; 0x58
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000

08000b34 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0a2      	sub	sp, #136	; 0x88
 8000b38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2288      	movs	r2, #136	; 0x88
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00a fcb1 	bl	800b4a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 8000b46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b4a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b56:	2301      	movs	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b5e:	2318      	movs	r3, #24
 8000b60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b62:	2307      	movs	r3, #7
 8000b64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b72:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4618      	mov	r0, r3
 8000b78:	f007 ff66 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000b82:	f000 f88b 	bl	8000c9c <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3788      	adds	r7, #136	; 0x88
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <tud_mount_cb>:

/* USER CODE BEGIN 4 */

// Invoked when device is mounted
void tud_mount_cb(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <tud_mount_cb+0x18>)
 8000b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000000 	.word	0x20000000

08000bac <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <tud_umount_cb+0x14>)
 8000bb2:	22fa      	movs	r2, #250	; 0xfa
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <tud_suspend_cb+0x20>)
 8000bd0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <tud_resume_cb+0x18>)
 8000bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000000 	.word	0x20000000

08000c04 <tud_cdc_line_state_cb>:
// USB CDC
//--------------------------------------------------------------------+

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	71bb      	strb	r3, [r7, #6]
 8000c12:	4613      	mov	r3, r2
 8000c14:	717b      	strb	r3, [r7, #5]
    // Terminal connected
  }else
  {
    // Terminal disconnected
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  (void) itf;
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <led_blinking_task>:

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;
  static bool led_state = false;

  // Blink every interval ms
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8000c3c:	f006 fa52 	bl	80070e4 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <led_blinking_task+0x54>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1ad2      	subs	r2, r2, r3
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <led_blinking_task+0x58>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d31a      	bcc.n	8000c86 <led_blinking_task+0x4e>
  start_ms += blink_interval_ms;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <led_blinking_task+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <led_blinking_task+0x58>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <led_blinking_task+0x54>)
 8000c5c:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, led_state);
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <led_blinking_task+0x5c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <led_blinking_task+0x60>)
 8000c6a:	f006 fd27 	bl	80076bc <HAL_GPIO_WritePin>
  led_state = 1 - led_state; // toggle
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <led_blinking_task+0x5c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	f1c3 0301 	rsb	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf14      	ite	ne
 8000c7a:	2301      	movne	r3, #1
 8000c7c:	2300      	moveq	r3, #0
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <led_blinking_task+0x5c>)
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e000      	b.n	8000c88 <led_blinking_task+0x50>
  if ( HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 8000c86:	bf00      	nop
}
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20002108 	.word	0x20002108
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000210c 	.word	0x2000210c
 8000c98:	48001000 	.word	0x48001000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <tud_msc_inquiry_cb>:
};

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b08d      	sub	sp, #52	; 0x34
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <tud_msc_inquiry_cb+0x80>)
 8000cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc2:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Mass Storage";
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <tud_msc_inquiry_cb+0x84>)
 8000cc8:	f107 0418 	add.w	r4, r7, #24
 8000ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cce:	c407      	stmia	r4!, {r0, r1, r2}
 8000cd0:	7023      	strb	r3, [r4, #0]
  const char rev[] = "1.0";
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <tud_msc_inquiry_cb+0x88>)
 8000cd4:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8000cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fa74 	bl	80001c8 <strlen>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f00a fbb5 	bl	800b458 <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa68 	bl	80001c8 <strlen>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f00a fba9 	bl	800b458 <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa5c 	bl	80001c8 <strlen>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f00a fb9d 	bl	800b458 <memcpy>
}
 8000d1e:	bf00      	nop
 8000d20:	3734      	adds	r7, #52	; 0x34
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800b4d0 	.word	0x0800b4d0
 8000d2c:	0800b4d8 	.word	0x0800b4d8
 8000d30:	00302e31 	.word	0x00302e31

08000d34 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <tud_msc_test_unit_ready_cb+0x2c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <tud_msc_test_unit_ready_cb+0x22>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 8000d46:	79f8      	ldrb	r0, [r7, #7]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	223a      	movs	r2, #58	; 0x3a
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	f001 fa07 	bl	8002160 <tud_msc_set_sense>
    return false;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <tud_msc_test_unit_ready_cb+0x24>
  }

  return true;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000210d 	.word	0x2000210d

08000d64 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  *block_count = DISK_BLOCK_NUM;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2210      	movs	r2, #16
 8000d76:	601a      	str	r2, [r3, #0]
  *block_size  = DISK_BLOCK_SIZE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	801a      	strh	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8000d8c:	b490      	push	{r4, r7}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71bb      	strb	r3, [r7, #6]
 8000da2:	460b      	mov	r3, r1
 8000da4:	717b      	strb	r3, [r7, #5]
 8000da6:	4613      	mov	r3, r2
 8000da8:	713b      	strb	r3, [r7, #4]
  (void) lun;
  (void) power_condition;

  if ( load_eject )
 8000daa:	793b      	ldrb	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <tud_msc_start_stop_cb+0x30>
  {
    if (start)
 8000db0:	797b      	ldrb	r3, [r7, #5]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <tud_msc_start_stop_cb+0x30>
    {
      // load disk storage
    }else
    {
      // unload disk storage
      ejected = true;
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <tud_msc_start_stop_cb+0x3c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc90      	pop	{r4, r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	2000210d 	.word	0x2000210d

08000dcc <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d902      	bls.n	8000de8 <tud_msc_read10_cb+0x1c>
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e00c      	b.n	8000e02 <tud_msc_read10_cb+0x36>

  uint8_t const* addr = msc_disk[lba] + offset;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	025b      	lsls	r3, r3, #9
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <tud_msc_read10_cb+0x40>)
 8000dee:	441a      	add	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	617b      	str	r3, [r7, #20]
  memcpy(buffer, addr, bufsize);
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	6838      	ldr	r0, [r7, #0]
 8000dfc:	f00a fb2c 	bl	800b458 <memcpy>

  return (int32_t) bufsize;
 8000e00:	6a3b      	ldr	r3, [r7, #32]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000004 	.word	0x20000004

08000e10 <tud_msc_is_writable_cb>:

bool tud_msc_is_writable_cb (uint8_t lun)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  (void) lun;

#ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
#else
  return true;
 8000e1a:	2301      	movs	r3, #1
#endif
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  // out of ramdisk
  if ( lba >= DISK_BLOCK_NUM ) return -1;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d902      	bls.n	8000e44 <tud_msc_write10_cb+0x1c>
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e00c      	b.n	8000e5e <tud_msc_write10_cb+0x36>

#ifndef CFG_EXAMPLE_MSC_READONLY
  uint8_t* addr = msc_disk[lba] + offset;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	025b      	lsls	r3, r3, #9
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <tud_msc_write10_cb+0x40>)
 8000e4a:	441a      	add	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]
  memcpy(addr, buffer, bufsize);
 8000e52:	6a3a      	ldr	r2, [r7, #32]
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f00a fafe 	bl	800b458 <memcpy>
#else
  (void) lba; (void) offset; (void) buffer;
#endif

  return (int32_t) bufsize;
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000004 	.word	0x20000004

08000e6c <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000e8c:	7bf8      	ldrb	r0, [r7, #15]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2220      	movs	r2, #32
 8000e92:	2105      	movs	r1, #5
 8000e94:	f001 f964 	bl	8002160 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	61fb      	str	r3, [r7, #28]
    break;
 8000e9e:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd01      	ble.n	8000eac <tud_msc_scsi_cb+0x40>
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <tud_msc_scsi_cb+0x5e>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dd08      	ble.n	8000eca <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, (size_t) resplen);
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f00a fac7 	bl	800b458 <memcpy>
    {
      // SCSI output
    }
  }

  return (int32_t) resplen;
 8000eca:	69fb      	ldr	r3, [r7, #28]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <MX_QUADSPI_Init+0x48>)
 8000edc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eec:	2210      	movs	r2, #16
 8000eee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef2:	2218      	movs	r2, #24
 8000ef4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_QUADSPI_Init+0x44>)
 8000f04:	f006 fee4 	bl	8007cd0 <HAL_QSPI_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000f0e:	f7ff fec5 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20002110 	.word	0x20002110
 8000f1c:	a0001000 	.word	0xa0001000

08000f20 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_QSPI_MspInit+0x7c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d128      	bne.n	8000f94 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f46:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4c:	6513      	str	r3, [r2, #80]	; 0x50
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_QSPI_MspInit+0x80>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8000f72:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f76:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f84:	230a      	movs	r3, #10
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_QSPI_MspInit+0x84>)
 8000f90:	f006 f9ea 	bl	8007368 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	a0001000 	.word	0xa0001000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48001000 	.word	0x48001000

08000fa8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fae:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <MX_SAI1_Init+0x140>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000fea:	4a40      	ldr	r2, [pc, #256]	; (80010ec <MX_SAI1_Init+0x144>)
 8000fec:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001008:	2208      	movs	r2, #8
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <MX_SAI1_Init+0x13c>)
 800100e:	2201      	movs	r2, #1
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001014:	2200      	movs	r2, #0
 8001016:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <MX_SAI1_Init+0x13c>)
 800101a:	2200      	movs	r2, #0
 800101c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001020:	2200      	movs	r2, #0
 8001022:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001026:	2200      	movs	r2, #0
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_SAI1_Init+0x13c>)
 800102c:	2200      	movs	r2, #0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001032:	2201      	movs	r2, #1
 8001034:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_SAI1_Init+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800103c:	4829      	ldr	r0, [pc, #164]	; (80010e4 <MX_SAI1_Init+0x13c>)
 800103e:	f009 f82d 	bl	800a09c <HAL_SAI_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001048:	f7ff fe28 	bl	8000c9c <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_SAI1_Init+0x148>)
 800104e:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <MX_SAI1_Init+0x14c>)
 8001050:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_SAI1_Init+0x148>)
 800105a:	2203      	movs	r2, #3
 800105c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001060:	2240      	movs	r2, #64	; 0x40
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001066:	2200      	movs	r2, #0
 8001068:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_SAI1_Init+0x148>)
 800106c:	2200      	movs	r2, #0
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001072:	2201      	movs	r2, #1
 8001074:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_SAI1_Init+0x148>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_SAI1_Init+0x148>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_SAI1_Init+0x148>)
 8001096:	2200      	movs	r2, #0
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_SAI1_Init+0x148>)
 800109c:	2208      	movs	r2, #8
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_SAI1_Init+0x148>)
 80010d2:	f008 ffe3 	bl	800a09c <HAL_SAI_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80010dc:	f7ff fdde 	bl	8000c9c <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20002154 	.word	0x20002154
 80010e8:	40015404 	.word	0x40015404
 80010ec:	0002ee00 	.word	0x0002ee00
 80010f0:	200021d8 	.word	0x200021d8
 80010f4:	40015424 	.word	0x40015424

080010f8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <HAL_SAI_MspInit+0xdc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d135      	bne.n	8001176 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10b      	bne.n	800112a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111c:	6613      	str	r3, [r2, #96]	; 0x60
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 8001132:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001134:	2374      	movs	r3, #116	; 0x74
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001144:	230d      	movs	r3, #13
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4824      	ldr	r0, [pc, #144]	; (80011e0 <HAL_SAI_MspInit+0xe8>)
 8001150:	f006 f90a 	bl	8007368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001166:	230d      	movs	r3, #13
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	481b      	ldr	r0, [pc, #108]	; (80011e0 <HAL_SAI_MspInit+0xe8>)
 8001172:	f006 f8f9 	bl	8007368 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_SAI_MspInit+0xec>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d124      	bne.n	80011ca <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10b      	bne.n	80011a0 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 800118a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	6613      	str	r3, [r2, #96]	; 0x60
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_SAI_MspInit+0xe4>)
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <HAL_SAI_MspInit+0xe0>)
 80011a8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011ba:	230d      	movs	r3, #13
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4806      	ldr	r0, [pc, #24]	; (80011e0 <HAL_SAI_MspInit+0xe8>)
 80011c6:	f006 f8cf 	bl	8007368 <HAL_GPIO_Init>

    }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40015404 	.word	0x40015404
 80011d8:	2000225c 	.word	0x2000225c
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48001000 	.word	0x48001000
 80011e4:	40015424 	.word	0x40015424

080011e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_SPI2_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_SPI2_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_SPI2_Init+0x74>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_SPI2_Init+0x74>)
 8001202:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001206:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_SPI2_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_SPI2_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_SPI2_Init+0x74>)
 8001216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_SPI2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_SPI2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_SPI2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_SPI2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_SPI2_Init+0x74>)
 8001236:	2207      	movs	r2, #7
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_SPI2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_SPI2_Init+0x74>)
 8001242:	2208      	movs	r2, #8
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_SPI2_Init+0x74>)
 8001248:	f009 f8d4 	bl	800a3f4 <HAL_SPI_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001252:	f7ff fd23 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20002260 	.word	0x20002260
 8001260:	40003800 	.word	0x40003800

08001264 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_SPI_MspInit+0x7c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d127      	bne.n	80012d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_SPI_MspInit+0x80>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80012b6:	231a      	movs	r3, #26
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c6:	2305      	movs	r3, #5
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_SPI_MspInit+0x84>)
 80012d2:	f006 f849 	bl	8007368 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40003800 	.word	0x40003800
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000c00 	.word	0x48000c00

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f005 fe9c 	bl	80070bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
    tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 800138c:	2000      	movs	r0, #0
 800138e:	f005 fb9d 	bl	8006acc <dcd_int_handler>
    return;
 8001392:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART2_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART2_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART2_UART_Init+0x58>)
 8001400:	f009 f89b 	bl	800a53a <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f7ff fc47 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200022c4 	.word	0x200022c4
 8001418:	40004400 	.word	0x40004400

0800141c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0ac      	sub	sp, #176	; 0xb0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2288      	movs	r2, #136	; 0x88
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f00a f833 	bl	800b4a8 <memset>
  if(uartHandle->Instance==USART2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_UART_MspInit+0xb0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d13a      	bne.n	80014c2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4618      	mov	r0, r3
 800145a:	f007 faf5 	bl	8008a48 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001464:	f7ff fc1a 	bl	8000c9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001472:	6593      	str	r3, [r2, #88]	; 0x58
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 80014be:	f005 ff53 	bl	8007368 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	37b0      	adds	r7, #176	; 0xb0
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40004400 	.word	0x40004400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000c00 	.word	0x48000c00

080014d8 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <tud_descriptor_device_cb+0x10>)
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	0800b570 	.word	0x0800b570

080014ec <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	0800b584 	.word	0x0800b584

08001508 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <tud_descriptor_string_cb+0x9c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <tud_descriptor_string_cb+0xa0>)
 8001528:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e027      	b.n	8001580 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d901      	bls.n	800153a <tud_descriptor_string_cb+0x32>
 8001536:	2300      	movs	r3, #0
 8001538:	e030      	b.n	800159c <tud_descriptor_string_cb+0x94>

    const char* str = string_desc_arr[index];
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <tud_descriptor_string_cb+0x9c>)
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 8001544:	68b8      	ldr	r0, [r7, #8]
 8001546:	f7fe fe3f 	bl	80001c8 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	2b1f      	cmp	r3, #31
 8001552:	d901      	bls.n	8001558 <tud_descriptor_string_cb+0x50>
 8001554:	231f      	movs	r3, #31
 8001556:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	73bb      	strb	r3, [r7, #14]
 800155c:	e00c      	b.n	8001578 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	3301      	adds	r3, #1
 800156a:	b291      	uxth	r1, r2
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <tud_descriptor_string_cb+0xa0>)
 800156e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	3301      	adds	r3, #1
 8001576:	73bb      	strb	r3, [r7, #14]
 8001578:	7bba      	ldrb	r2, [r7, #14]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	429a      	cmp	r2, r3
 800157e:	d3ee      	bcc.n	800155e <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b29b      	uxth	r3, r3
 8001584:	3301      	adds	r3, #1
 8001586:	b29b      	uxth	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	b21b      	sxth	r3, r3
 800158e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001592:	b21b      	sxth	r3, r3
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <tud_descriptor_string_cb+0xa0>)
 8001598:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <tud_descriptor_string_cb+0xa0>)
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20002008 	.word	0x20002008
 80015a8:	20002348 	.word	0x20002348

080015ac <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ba:	2206      	movs	r2, #6
 80015bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f0:	f006 f9a2 	bl	8007938 <HAL_PCD_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015fa:	f7ff fb4f 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20002388 	.word	0x20002388

08001608 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001628:	d14e      	bne.n	80016c8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001654:	230a      	movs	r3, #10
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f005 fe81 	bl	8007368 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 800166c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016a2:	f006 fb05 	bl	8007cb0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_PCD_MspInit+0xc8>)
 80016ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	e001      	b.n	80016b8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80016b4:	f006 fafc 	bl	8007cb0 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2043      	movs	r0, #67	; 0x43
 80016be:	f005 fe1c 	bl	80072fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016c2:	2043      	movs	r0, #67	; 0x43
 80016c4:	f005 fe35 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fe5e 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <LoopForever+0x6>)
  ldr r1, =_edata
 80016de:	490d      	ldr	r1, [pc, #52]	; (8001714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <LoopForever+0xe>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f4:	4c0a      	ldr	r4, [pc, #40]	; (8001720 <LoopForever+0x16>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f009 fe85 	bl	800b410 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001706:	f7ff f98f 	bl	8000a28 <main>

0800170a <LoopForever>:

LoopForever:
    b LoopForever
 800170a:	e7fe      	b.n	800170a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800170c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	20002044 	.word	0x20002044
  ldr r2, =_sidata
 8001718:	0800b62c 	.word	0x0800b62c
  ldr r2, =_sbss
 800171c:	20002044 	.word	0x20002044
  ldr r4, =_ebss
 8001720:	20002e2c 	.word	0x20002e2c

08001724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_2_IRQHandler>

08001726 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3310      	adds	r3, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f002 f9ba 	bl	8003ab0 <tu_fifo_remaining>
 800173c:	4603      	mov	r3, r0
 800173e:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	2b3f      	cmp	r3, #63	; 0x3f
 8001744:	d801      	bhi.n	800174a <_prep_out_transaction+0x24>
 8001746:	2300      	movs	r3, #0
 8001748:	e02b      	b.n	80017a2 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	78da      	ldrb	r2, [r3, #3]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fc60 	bl	8005018 <usbd_edpt_claim>
 8001758:	4603      	mov	r3, r0
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_prep_out_transaction+0x42>
 8001764:	2300      	movs	r3, #0
 8001766:	e01c      	b.n	80017a2 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3310      	adds	r3, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f002 f99f 	bl	8003ab0 <tu_fifo_remaining>
 8001772:	4603      	mov	r3, r0
 8001774:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8001776:	89bb      	ldrh	r3, [r7, #12]
 8001778:	2b3f      	cmp	r3, #63	; 0x3f
 800177a:	d90a      	bls.n	8001792 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	78d9      	ldrb	r1, [r3, #3]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001786:	7bf8      	ldrb	r0, [r7, #15]
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	f003 fc99 	bl	80050c0 <usbd_edpt_xfer>
 800178e:	4603      	mov	r3, r0
 8001790:	e007      	b.n	80017a2 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	78da      	ldrb	r2, [r3, #3]
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fc66 	bl	800506c <usbd_edpt_release>

    return false;
 80017a0:	2300      	movs	r3, #0
  }
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <tud_cdc_n_write_flush+0xf0>)
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 80017c6:	f002 fa93 	bl	8003cf0 <tud_mounted>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <tud_cdc_n_write_flush+0x38>
 80017d0:	f002 faa0 	bl	8003d14 <tud_suspended>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f083 0301 	eor.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <tud_cdc_n_write_flush+0x38>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <tud_cdc_n_write_flush+0x3a>
 80017e4:	2300      	movs	r3, #0
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80017ec:	f083 0301 	eor.w	r3, r3, #1
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <tud_cdc_n_write_flush+0x4e>
 80017f6:	2300      	movs	r3, #0
 80017f8:	e04c      	b.n	8001894 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3324      	adds	r3, #36	; 0x24
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 f925 	bl	8003a4e <tu_fifo_count>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <tud_cdc_n_write_flush+0x62>
 800180a:	2300      	movs	r3, #0
 800180c:	e042      	b.n	8001894 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	789a      	ldrb	r2, [r3, #2]
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fbfc 	bl	8005018 <usbd_edpt_claim>
 8001820:	4603      	mov	r3, r0
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <tud_cdc_n_write_flush+0x84>
 800182c:	2300      	movs	r3, #0
 800182e:	e031      	b.n	8001894 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	33f8      	adds	r3, #248	; 0xf8
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	4619      	mov	r1, r3
 800183e:	f002 f96d 	bl	8003b1c <tu_fifo_read_n>
 8001842:	4603      	mov	r3, r0
 8001844:	823b      	strh	r3, [r7, #16]

  if ( count )
 8001846:	8a3b      	ldrh	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01b      	beq.n	8001884 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	7899      	ldrb	r1, [r3, #2]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8001856:	8a3b      	ldrh	r3, [r7, #16]
 8001858:	7cf8      	ldrb	r0, [r7, #19]
 800185a:	f003 fc31 	bl	80050c0 <usbd_edpt_xfer>
 800185e:	4603      	mov	r3, r0
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <tud_cdc_n_write_flush+0xd4>
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <tud_cdc_n_write_flush+0xf4>)
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d000      	beq.n	800187c <tud_cdc_n_write_flush+0xd0>
 800187a:	be00      	bkpt	0x0000
 800187c:	2300      	movs	r3, #0
 800187e:	e009      	b.n	8001894 <tud_cdc_n_write_flush+0xe8>
    return count;
 8001880:	8a3b      	ldrh	r3, [r7, #16]
 8001882:	e007      	b.n	8001894 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	789a      	ldrb	r2, [r3, #2]
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fbed 	bl	800506c <usbd_edpt_release>
    return 0;
 8001892:	2300      	movs	r3, #0
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20002894 	.word	0x20002894
 80018a0:	e000edf0 	.word	0xe000edf0

080018a4 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80018aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80018ae:	2100      	movs	r1, #0
 80018b0:	4824      	ldr	r0, [pc, #144]	; (8001944 <cdcd_init+0xa0>)
 80018b2:	f009 fdf9 	bl	800b4a8 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e03b      	b.n	8001934 <cdcd_init+0x90>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f44f 729c 	mov.w	r2, #312	; 0x138
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <cdcd_init+0xa0>)
 80018c8:	4413      	add	r3, r2
 80018ca:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018de:	f443 4342 	orr.w	r3, r3, #49664	; 0xc200
 80018e2:	80d3      	strh	r3, [r2, #6]
 80018e4:	2300      	movs	r3, #0
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	8113      	strh	r3, [r2, #8]
    p_cdc->line_coding.stop_bits = 0;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2208      	movs	r2, #8
 80018fc:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f103 0010 	add.w	r0, r3, #16
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	f001 fc2b 	bl	800316c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001922:	2301      	movs	r3, #1
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	f001 fc1f 	bl	800316c <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3301      	adds	r3, #1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0c0      	beq.n	80018bc <cdcd_init+0x18>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20002894 	.word	0x20002894

08001948 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e01f      	b.n	8001998 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <cdcd_reset+0x60>)
 8001964:	4413      	add	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8001968:	2205      	movs	r2, #5
 800196a:	2100      	movs	r1, #0
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f009 fd9b 	bl	800b4a8 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3310      	adds	r3, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f002 f953 	bl	8003c22 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3324      	adds	r3, #36	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f002 f94e 	bl	8003c22 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3324      	adds	r3, #36	; 0x24
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f002 f968 	bl	8003c62 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0dc      	beq.n	8001958 <cdcd_reset+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20002894 	.word	0x20002894

080019ac <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09a      	sub	sp, #104	; 0x68
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	795b      	ldrb	r3, [r3, #5]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d103      	bne.n	80019cc <cdcd_open+0x20>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	799b      	ldrb	r3, [r3, #6]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d001      	beq.n	80019d0 <cdcd_open+0x24>
 80019cc:	2300      	movs	r3, #0
 80019ce:	e0e1      	b.n	8001b94 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80019da:	e01a      	b.n	8001a12 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 80019dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80019e0:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <cdcd_open+0x1f0>)
 80019e2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3302      	adds	r3, #2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 80019f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80019f8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <cdcd_open+0x1f0>)
 8001a02:	4413      	add	r3, r2
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8001a06:	e008      	b.n	8001a1a <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001a08:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001a12:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0e0      	beq.n	80019dc <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8001a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <cdcd_open+0x8a>
 8001a20:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <cdcd_open+0x1f4>)
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d000      	beq.n	8001a32 <cdcd_open+0x86>
 8001a30:	be00      	bkpt	0x0000
 8001a32:	2300      	movs	r3, #0
 8001a34:	e0ae      	b.n	8001b94 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	789a      	ldrb	r2, [r3, #2]
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8001a3e:	2309      	movs	r3, #9
 8001a40:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a54:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001a58:	e013      	b.n	8001a82 <cdcd_open+0xd6>
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001a80:	657b      	str	r3, [r7, #84]	; 0x54
 8001a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001a8c:	2b24      	cmp	r3, #36	; 0x24
 8001a8e:	d104      	bne.n	8001a9a <cdcd_open+0xee>
 8001a90:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d9df      	bls.n	8001a5a <cdcd_open+0xae>
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d12f      	bne.n	8001b08 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8001aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aaa:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fa6d 	bl	8004f90 <usbd_edpt_open>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <cdcd_open+0x12c>
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <cdcd_open+0x1f4>)
 8001ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d000      	beq.n	8001ad4 <cdcd_open+0x128>
 8001ad2:	be00      	bkpt	0x0000
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e05d      	b.n	8001b94 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8001ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ada:	789a      	ldrb	r2, [r3, #2]
 8001adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae2:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001aee:	4413      	add	r3, r2
 8001af0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001b06:	657b      	str	r3, [r7, #84]	; 0x54
 8001b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d139      	bne.n	8001b8a <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d135      	bne.n	8001b8a <cdcd_open+0x1de>
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b20:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001b44:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8001b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b48:	3303      	adds	r3, #3
 8001b4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b4c:	3202      	adds	r2, #2
 8001b4e:	79f8      	ldrb	r0, [r7, #7]
 8001b50:	9201      	str	r2, [sp, #4]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2302      	movs	r3, #2
 8001b56:	2202      	movs	r2, #2
 8001b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5a:	f003 f9b1 	bl	8004ec0 <usbd_open_edpt_pair>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <cdcd_open+0x1d4>
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <cdcd_open+0x1f4>)
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d000      	beq.n	8001b7c <cdcd_open+0x1d0>
 8001b7a:	be00      	bkpt	0x0000
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e009      	b.n	8001b94 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8001b80:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001b84:	330e      	adds	r3, #14
 8001b86:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8001b8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001b8c:	f7ff fdcb 	bl	8001726 <_prep_out_transaction>

  return drv_len;
 8001b90:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3760      	adds	r7, #96	; 0x60
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20002894 	.word	0x20002894
 8001ba0:	e000edf0 	.word	0xe000edf0

08001ba4 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	603a      	str	r2, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b20      	cmp	r3, #32
 8001bc0:	d001      	beq.n	8001bc6 <cdcd_control_xfer_cb+0x22>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e0cc      	b.n	8001d60 <cdcd_control_xfer_cb+0x1bc>

  uint8_t itf = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <cdcd_control_xfer_cb+0x1c4>)
 8001bce:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <cdcd_control_xfer_cb+0x38>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e0c1      	b.n	8001d60 <cdcd_control_xfer_cb+0x1bc>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	889b      	ldrh	r3, [r3, #4]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d009      	beq.n	8001c00 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8001bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001bfc:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001bfe:	e7e7      	b.n	8001bd0 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8001c00:	bf00      	nop
  }

  switch ( request->bRequest )
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	3b20      	subs	r3, #32
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	f200 809f 	bhi.w	8001d4c <cdcd_control_xfer_cb+0x1a8>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <cdcd_control_xfer_cb+0x70>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c5d 	.word	0x08001c5d
 8001c1c:	08001c73 	.word	0x08001c73
 8001c20:	08001d1b 	.word	0x08001d1b
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <cdcd_control_xfer_cb+0x96>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	1d9a      	adds	r2, r3, #6
 8001c2e:	79f8      	ldrb	r0, [r7, #7]
 8001c30:	2307      	movs	r3, #7
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	f003 fc28 	bl	8005488 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8001c38:	e08a      	b.n	8001d50 <cdcd_control_xfer_cb+0x1ac>
      else if ( stage == CONTROL_STAGE_ACK)
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	f040 8087 	bne.w	8001d50 <cdcd_control_xfer_cb+0x1ac>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8001c42:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <cdcd_control_xfer_cb+0x1c8>)
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8083 	beq.w	8001d50 <cdcd_control_xfer_cb+0x1ac>
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	1d9a      	adds	r2, r3, #6
 8001c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f3af 8000 	nop.w
    break;
 8001c5a:	e079      	b.n	8001d50 <cdcd_control_xfer_cb+0x1ac>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d178      	bne.n	8001d54 <cdcd_control_xfer_cb+0x1b0>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	1d9a      	adds	r2, r3, #6
 8001c66:	79f8      	ldrb	r0, [r7, #7]
 8001c68:	2307      	movs	r3, #7
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	f003 fc0c 	bl	8005488 <tud_control_xfer>
      }
    break;
 8001c70:	e070      	b.n	8001d54 <cdcd_control_xfer_cb+0x1b0>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <cdcd_control_xfer_cb+0xe0>
      {
        tud_control_status(rhport, request);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fba5 	bl	80053cc <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8001c82:	e069      	b.n	8001d58 <cdcd_control_xfer_cb+0x1b4>
      else if (stage == CONTROL_STAGE_ACK)
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d166      	bne.n	8001d58 <cdcd_control_xfer_cb+0x1b4>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	885b      	ldrh	r3, [r3, #2]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	885b      	ldrh	r3, [r3, #2]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	885b      	ldrh	r3, [r3, #2]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f001 ffaf 	bl	8003c62 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <cdcd_control_xfer_cb+0x1cc>)
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d026      	beq.n	8001d58 <cdcd_control_xfer_cb+0x1b4>
 8001d0a:	7fba      	ldrb	r2, [r7, #30]
 8001d0c:	7ff9      	ldrb	r1, [r7, #31]
 8001d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe ff76 	bl	8000c04 <tud_cdc_line_state_cb>
    break;
 8001d18:	e01e      	b.n	8001d58 <cdcd_control_xfer_cb+0x1b4>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d105      	bne.n	8001d2c <cdcd_control_xfer_cb+0x188>
      {
        tud_control_status(rhport, request);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fb51 	bl	80053cc <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8001d2a:	e017      	b.n	8001d5c <cdcd_control_xfer_cb+0x1b8>
      else if (stage == CONTROL_STAGE_ACK)
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d114      	bne.n	8001d5c <cdcd_control_xfer_cb+0x1b8>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <cdcd_control_xfer_cb+0x1d0>)
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d011      	beq.n	8001d5c <cdcd_control_xfer_cb+0x1b8>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f3af 8000 	nop.w
    break;
 8001d4a:	e007      	b.n	8001d5c <cdcd_control_xfer_cb+0x1b8>

    default: return false; // stall unsupported request
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e007      	b.n	8001d60 <cdcd_control_xfer_cb+0x1bc>
    break;
 8001d50:	bf00      	nop
 8001d52:	e004      	b.n	8001d5e <cdcd_control_xfer_cb+0x1ba>
    break;
 8001d54:	bf00      	nop
 8001d56:	e002      	b.n	8001d5e <cdcd_control_xfer_cb+0x1ba>
    break;
 8001d58:	bf00      	nop
 8001d5a:	e000      	b.n	8001d5e <cdcd_control_xfer_cb+0x1ba>
    break;
 8001d5c:	bf00      	nop
  }

  return true;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20002894 	.word	0x20002894
 8001d6c:	00000000 	.word	0x00000000
 8001d70:	08000c05 	.word	0x08000c05
 8001d74:	00000000 	.word	0x00000000

08001d78 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	460b      	mov	r3, r1
 8001d86:	71bb      	strb	r3, [r7, #6]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	75fb      	strb	r3, [r7, #23]
 8001d90:	e014      	b.n	8001dbc <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	4a54      	ldr	r2, [pc, #336]	; (8001ef0 <cdcd_xfer_cb+0x178>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	79ba      	ldrb	r2, [r7, #6]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d00a      	beq.n	8001dc2 <cdcd_xfer_cb+0x4a>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	789b      	ldrb	r3, [r3, #2]
 8001db0:	79ba      	ldrb	r2, [r7, #6]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d005      	beq.n	8001dc2 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	3301      	adds	r3, #1
 8001dba:	75fb      	strb	r3, [r7, #23]
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0e7      	beq.n	8001d92 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <cdcd_xfer_cb+0x66>
 8001dc8:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <cdcd_xfer_cb+0x17c>)
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d000      	beq.n	8001dda <cdcd_xfer_cb+0x62>
 8001dd8:	be00      	bkpt	0x0000
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e084      	b.n	8001ee8 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	78db      	ldrb	r3, [r3, #3]
 8001de2:	79ba      	ldrb	r2, [r7, #6]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d14a      	bne.n	8001e7e <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f103 0010 	add.w	r0, r3, #16
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	33b8      	adds	r3, #184	; 0xb8
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	b292      	uxth	r2, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f001 feef 	bl	8003bda <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <cdcd_xfer_cb+0x180>)
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d028      	beq.n	8001e54 <cdcd_xfer_cb+0xdc>
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	795b      	ldrb	r3, [r3, #5]
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d024      	beq.n	8001e54 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e01d      	b.n	8001e4c <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	795a      	ldrb	r2, [r3, #5]
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	440b      	add	r3, r1
 8001e1a:	33b8      	adds	r3, #184	; 0xb8
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d111      	bne.n	8001e46 <cdcd_xfer_cb+0xce>
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	3310      	adds	r3, #16
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fe2f 	bl	8003a8a <tu_fifo_empty>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	795a      	ldrb	r2, [r3, #5]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3dd      	bcc.n	8001e10 <cdcd_xfer_cb+0x98>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <cdcd_xfer_cb+0x184>)
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00e      	beq.n	8001e78 <cdcd_xfer_cb+0x100>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fe13 	bl	8003a8a <tu_fifo_empty>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <cdcd_xfer_cb+0x100>
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fed5 	bl	8000c22 <tud_cdc_rx_cb>
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8001e78:	6938      	ldr	r0, [r7, #16]
 8001e7a:	f7ff fc54 	bl	8001726 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	79ba      	ldrb	r2, [r7, #6]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d12e      	bne.n	8001ee6 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <cdcd_xfer_cb+0x188>)
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <cdcd_xfer_cb+0x11e>
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc87 	bl	80017ac <tud_cdc_n_write_flush>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d120      	bne.n	8001ee6 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	3324      	adds	r3, #36	; 0x24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fdd0 	bl	8003a4e <tu_fifo_count>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d118      	bne.n	8001ee6 <cdcd_xfer_cb+0x16e>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d015      	beq.n	8001ee6 <cdcd_xfer_cb+0x16e>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d110      	bne.n	8001ee6 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	789a      	ldrb	r2, [r3, #2]
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 f8a3 	bl	8005018 <usbd_edpt_claim>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	7899      	ldrb	r1, [r3, #2]
 8001edc:	79f8      	ldrb	r0, [r7, #7]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f003 f8ed 	bl	80050c0 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20002894 	.word	0x20002894
 8001ef4:	e000edf0 	.word	0xe000edf0
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	08000c23 	.word	0x08000c23
 8001f00:	00000000 	.word	0x00000000

08001f04 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2203      	movs	r2, #3
 8001f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f103 0220 	add.w	r2, r3, #32
 8001f32:	79f8      	ldrb	r0, [r7, #7]
 8001f34:	230d      	movs	r3, #13
 8001f36:	f003 f8c3 	bl	80050c0 <usbd_edpt_xfer>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	79f8      	ldrb	r0, [r7, #7]
 8001f62:	231f      	movs	r3, #31
 8001f64:	f003 f8ac 	bl	80050c0 <usbd_edpt_xfer>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b088      	sub	sp, #32
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	6039      	str	r1, [r7, #0]
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3320      	adds	r3, #32
 8001f8a:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	79ba      	ldrb	r2, [r7, #6]
 8001f90:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	1ad2      	subs	r2, r2, r3
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <fail_scsi_op+0x4e>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	7b58      	ldrb	r0, [r3, #13]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2220      	movs	r2, #32
 8001fba:	2105      	movs	r1, #5
 8001fbc:	f000 f8d0 	bl	8002160 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d028      	beq.n	800201a <fail_scsi_op+0xa8>
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d024      	beq.n	800201a <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
 8001fd4:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	2307      	movs	r3, #7
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 f900 	bl	8005208 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 8002008:	e007      	b.n	800201a <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f003 f8f7 	bl	8005208 <usbd_edpt_stall>
}
 800201a:	bf00      	nop
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]


#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	ba1b      	rev	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	330f      	adds	r3, #15
 8002052:	3307      	adds	r3, #7
 8002054:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	ba5b      	rev16	r3, r3
 8002060:	b29b      	uxth	r3, r3
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffe5 	bl	8002046 <rdwr10_get_blockcount>
 800207c:	4603      	mov	r3, r0
 800207e:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <rdwr10_get_blocksize+0x1c>
 8002086:	2300      	movs	r3, #0
 8002088:	e005      	b.n	8002096 <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	b29b      	uxth	r3, r3
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b088      	sub	sp, #32
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 80020a6:	2300      	movs	r3, #0
 80020a8:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ffcb 	bl	8002046 <rdwr10_get_blockcount>
 80020b0:	4603      	mov	r3, r0
 80020b2:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 80020bc:	8bbb      	ldrh	r3, [r7, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d048      	beq.n	8002154 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80020c2:	2302      	movs	r3, #2
 80020c4:	77fb      	strb	r3, [r7, #31]
 80020c6:	e045      	b.n	8002154 <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7bdb      	ldrb	r3, [r3, #15]
 80020cc:	2b28      	cmp	r3, #40	; 0x28
 80020ce:	d119      	bne.n	8002104 <rdwr10_validate_cmd+0x66>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7b1b      	ldrb	r3, [r3, #12]
 80020d4:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 80020d6:	7efb      	ldrb	r3, [r7, #27]
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	2307      	movs	r3, #7
 80020dc:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80020f4:	f083 0301 	eor.w	r3, r3, #1
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <rdwr10_validate_cmd+0x66>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80020fe:	2302      	movs	r3, #2
 8002100:	77fb      	strb	r3, [r7, #31]
 8002102:	e027      	b.n	8002154 <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7bdb      	ldrb	r3, [r3, #15]
 8002108:	2b2a      	cmp	r3, #42	; 0x2a
 800210a:	d116      	bne.n	800213a <rdwr10_validate_cmd+0x9c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7b1b      	ldrb	r3, [r3, #12]
 8002110:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 8002112:	7cbb      	ldrb	r3, [r7, #18]
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	2307      	movs	r3, #7
 8002118:	72fb      	strb	r3, [r7, #11]
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8002134:	2302      	movs	r3, #2
 8002136:	77fb      	strb	r3, [r7, #31]
 8002138:	e00c      	b.n	8002154 <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 800213a:	8bbb      	ldrh	r3, [r7, #28]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG(MSC_DEBUG, "  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 8002140:	2301      	movs	r3, #1
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	e006      	b.n	8002154 <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	8bbb      	ldrh	r3, [r7, #28]
 800214c:	429a      	cmp	r2, r3
 800214e:	d201      	bcs.n	8002154 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG(MSC_DEBUG, " Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8002150:	2302      	movs	r3, #2
 8002152:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8002154:	7ffb      	ldrb	r3, [r7, #31]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 8002160:	b490      	push	{r4, r7}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4604      	mov	r4, r0
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4623      	mov	r3, r4
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	4603      	mov	r3, r0
 8002174:	71bb      	strb	r3, [r7, #6]
 8002176:	460b      	mov	r3, r1
 8002178:	717b      	strb	r3, [r7, #5]
 800217a:	4613      	mov	r3, r2
 800217c:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <tud_msc_set_sense+0x44>)
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <tud_msc_set_sense+0x44>)
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <tud_msc_set_sense+0x44>)
 8002190:	793b      	ldrb	r3, [r7, #4]
 8002192:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bc90      	pop	{r4, r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200029cc 	.word	0x200029cc

080021a8 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 80021b2:	79f8      	ldrb	r0, [r7, #7]
 80021b4:	2300      	movs	r3, #0
 80021b6:	223a      	movs	r2, #58	; 0x3a
 80021b8:	2102      	movs	r1, #2
 80021ba:	f7ff ffd1 	bl	8002160 <tud_msc_set_sense>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	2100      	movs	r1, #0
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <mscd_init+0x14>)
 80021d2:	f009 f969 	bl	800b4a8 <memset>
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200029cc 	.word	0x200029cc

080021e0 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	2100      	movs	r1, #0
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <mscd_reset+0x1c>)
 80021f0:	f009 f95a 	bl	800b4a8 <memset>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200029cc 	.word	0x200029cc

08002200 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af02      	add	r7, sp, #8
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	795b      	ldrb	r3, [r3, #5]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d107      	bne.n	8002228 <mscd_open+0x28>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	799b      	ldrb	r3, [r3, #6]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d103      	bne.n	8002228 <mscd_open+0x28>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	79db      	ldrb	r3, [r3, #7]
 8002224:	2b50      	cmp	r3, #80	; 0x50
 8002226:	d001      	beq.n	800222c <mscd_open+0x2c>
 8002228:	2300      	movs	r3, #0
 800222a:	e053      	b.n	80022d4 <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 800222c:	2317      	movs	r3, #23
 800222e:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8002230:	88ba      	ldrh	r2, [r7, #4]
 8002232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002234:	429a      	cmp	r2, r3
 8002236:	d20a      	bcs.n	800224e <mscd_open+0x4e>
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <mscd_open+0xdc>)
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d000      	beq.n	800224a <mscd_open+0x4a>
 8002248:	be00      	bkpt	0x0000
 800224a:	2300      	movs	r3, #0
 800224c:	e042      	b.n	80022d4 <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <mscd_open+0xe0>)
 8002250:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	789a      	ldrb	r2, [r3, #2]
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	332f      	adds	r3, #47	; 0x2f
 8002272:	6a3a      	ldr	r2, [r7, #32]
 8002274:	322e      	adds	r2, #46	; 0x2e
 8002276:	79f8      	ldrb	r0, [r7, #7]
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2302      	movs	r3, #2
 800227e:	2202      	movs	r2, #2
 8002280:	f002 fe1e 	bl	8004ec0 <usbd_open_edpt_pair>
 8002284:	4603      	mov	r3, r0
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <mscd_open+0xa6>
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <mscd_open+0xdc>)
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d000      	beq.n	80022a2 <mscd_open+0xa2>
 80022a0:	be00      	bkpt	0x0000
 80022a2:	2300      	movs	r3, #0
 80022a4:	e016      	b.n	80022d4 <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe4a 	bl	8001f44 <prepare_cbw>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <mscd_open+0xd2>
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <mscd_open+0xdc>)
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d000      	beq.n	80022ce <mscd_open+0xce>
 80022cc:	be00      	bkpt	0x0000
 80022ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022d0:	e000      	b.n	80022d4 <mscd_open+0xd4>

  return drv_len;
 80022d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	e000edf0 	.word	0xe000edf0
 80022e0:	200029cc 	.word	0x200029cc

080022e4 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	603a      	str	r2, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
 8002330:	460b      	mov	r3, r1
 8002332:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <mscd_control_xfer_cb+0x1a>
 800233a:	2301      	movs	r3, #1
 800233c:	e0e6      	b.n	800250c <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 800233e:	4b75      	ldr	r3, [pc, #468]	; (8002514 <mscd_control_xfer_cb+0x1f0>)
 8002340:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 8090 	bne.w	8002472 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 800235c:	2b02      	cmp	r3, #2
 800235e:	f040 8088 	bne.w	8002472 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 8083 	bne.w	8002472 <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002372:	2b00      	cmp	r3, #0
 8002374:	d17d      	bne.n	8002472 <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	889b      	ldrh	r3, [r3, #4]
 800237a:	b29b      	uxth	r3, r3
 800237c:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800238a:	2b04      	cmp	r3, #4
 800238c:	d106      	bne.n	800239c <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 800238e:	7efa      	ldrb	r2, [r7, #27]
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f002 ff37 	bl	8005208 <usbd_edpt_stall>
 800239a:	e068      	b.n	800246e <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80023a2:	7efa      	ldrb	r2, [r7, #27]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d11a      	bne.n	80023de <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d15d      	bne.n	800246e <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	69f9      	ldr	r1, [r7, #28]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fda4 	bl	8001f04 <send_csw>
 80023bc:	4603      	mov	r3, r0
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d052      	beq.n	800246e <mscd_control_xfer_cb+0x14a>
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <mscd_control_xfer_cb+0x1f4>)
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d000      	beq.n	80023da <mscd_control_xfer_cb+0xb6>
 80023d8:	be00      	bkpt	0x0000
 80023da:	2300      	movs	r3, #0
 80023dc:	e096      	b.n	800250c <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80023e4:	7efa      	ldrb	r2, [r7, #27]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d141      	bne.n	800246e <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d13c      	bne.n	800246e <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	737b      	strb	r3, [r7, #13]
 80023fe:	4613      	mov	r3, r2
 8002400:	733b      	strb	r3, [r7, #12]

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr)
{
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8002402:	7b3a      	ldrb	r2, [r7, #12]
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fecf 	bl	80051ac <usbd_edpt_busy>
 800240e:	4603      	mov	r3, r0
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <mscd_control_xfer_cb+0x112>
 800241a:	7b3a      	ldrb	r2, [r7, #12]
 800241c:	7b7b      	ldrb	r3, [r7, #13]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f002 ff89 	bl	8005338 <usbd_edpt_stalled>
 8002426:	4603      	mov	r3, r0
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <mscd_control_xfer_cb+0x112>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <mscd_control_xfer_cb+0x114>
 8002436:	2300      	movs	r3, #0
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	69f9      	ldr	r1, [r7, #28]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fd7c 	bl	8001f44 <prepare_cbw>
 800244c:	4603      	mov	r3, r0
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <mscd_control_xfer_cb+0x14a>
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <mscd_control_xfer_cb+0x1f4>)
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d000      	beq.n	800246a <mscd_control_xfer_cb+0x146>
 8002468:	be00      	bkpt	0x0000
 800246a:	2300      	movs	r3, #0
 800246c:	e04e      	b.n	800250c <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 800246e:	2301      	movs	r3, #1
 8002470:	e04c      	b.n	800250c <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	d001      	beq.n	8002484 <mscd_control_xfer_cb+0x160>
 8002480:	2300      	movs	r3, #0
 8002482:	e043      	b.n	800250c <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2bfe      	cmp	r3, #254	; 0xfe
 800248a:	d016      	beq.n	80024ba <mscd_control_xfer_cb+0x196>
 800248c:	2bff      	cmp	r3, #255	; 0xff
 800248e:	d13a      	bne.n	8002506 <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG(MSC_DEBUG, "  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	885b      	ldrh	r3, [r3, #2]
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <mscd_control_xfer_cb+0x180>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	88db      	ldrh	r3, [r3, #6]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <mscd_control_xfer_cb+0x184>
 80024a4:	2300      	movs	r3, #0
 80024a6:	e031      	b.n	800250c <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f7ff ff1b 	bl	80022e4 <proc_bot_reset>

      tud_control_status(rhport, request);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 ff8a 	bl	80053cc <tud_control_status>
    break;
 80024b8:	e027      	b.n	800250a <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG(MSC_DEBUG, "  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	885b      	ldrh	r3, [r3, #2]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <mscd_control_xfer_cb+0x1aa>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	88db      	ldrh	r3, [r3, #6]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <mscd_control_xfer_cb+0x1ae>
 80024ce:	2300      	movs	r3, #0
 80024d0:	e01c      	b.n	800250c <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <mscd_control_xfer_cb+0x1f8>)
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <mscd_control_xfer_cb+0x1c0>
 80024dc:	f3af 8000 	nop.w
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <mscd_control_xfer_cb+0x1ca>
 80024ea:	2300      	movs	r3, #0
 80024ec:	e00e      	b.n	800250c <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 80024f6:	f107 020b 	add.w	r2, r7, #11
 80024fa:	79f8      	ldrb	r0, [r7, #7]
 80024fc:	2301      	movs	r3, #1
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	f002 ffc2 	bl	8005488 <tud_control_xfer>
    }
    break;
 8002504:	e001      	b.n	800250a <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200029cc 	.word	0x200029cc
 8002518:	e000edf0 	.word	0xe000edf0
 800251c:	00000000 	.word	0x00000000

08002520 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b098      	sub	sp, #96	; 0x60
 8002524:	af00      	add	r7, sp, #0
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	460b      	mov	r3, r1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 8002534:	4b95      	ldr	r3, [pc, #596]	; (800278c <mscd_xfer_cb+0x26c>)
 8002536:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253a:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 800253c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253e:	3320      	adds	r3, #32
 8002540:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 8002542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002544:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002548:	2b03      	cmp	r3, #3
 800254a:	f200 8207 	bhi.w	800295c <mscd_xfer_cb+0x43c>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <mscd_xfer_cb+0x34>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002565 	.word	0x08002565
 8002558:	080027f1 	.word	0x080027f1
 800255c:	0800295d 	.word	0x0800295d
 8002560:	080028cb 	.word	0x080028cb
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8002564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002566:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800256a:	79ba      	ldrb	r2, [r7, #6]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <mscd_xfer_cb+0x54>
 8002570:	2301      	movs	r3, #1
 8002572:	e247      	b.n	8002a04 <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b1f      	cmp	r3, #31
 8002578:	d104      	bne.n	8002584 <mscd_xfer_cb+0x64>
 800257a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a84      	ldr	r2, [pc, #528]	; (8002790 <mscd_xfer_cb+0x270>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d015      	beq.n	80025b0 <mscd_xfer_cb+0x90>
      {
        TU_LOG(MSC_DEBUG, "  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8002584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002586:	2204      	movs	r2, #4
 8002588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800258c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fe36 	bl	8005208 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 800259c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fe2e 	bl	8005208 <usbd_edpt_stall>

        return false;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e229      	b.n	8002a04 <mscd_xfer_cb+0x4e4>
      }

      TU_LOG(MSC_DEBUG, "  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 80025b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b2:	2200      	movs	r2, #0
 80025b4:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80025c0:	705a      	strb	r2, [r3, #1]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 80025c8:	709a      	strb	r2, [r3, #2]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80025d0:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 80025d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d8:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 80025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025dc:	2200      	movs	r2, #0
 80025de:	721a      	strb	r2, [r3, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	725a      	strb	r2, [r3, #9]
 80025e4:	2200      	movs	r2, #0
 80025e6:	729a      	strb	r2, [r3, #10]
 80025e8:	2200      	movs	r2, #0
 80025ea:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 80025ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ee:	2200      	movs	r2, #0
 80025f0:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 80025f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 80025fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002600:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 8002602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002604:	2200      	movs	r2, #0
 8002606:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8002608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260a:	7bdb      	ldrb	r3, [r3, #15]
 800260c:	2b28      	cmp	r3, #40	; 0x28
 800260e:	d003      	beq.n	8002618 <mscd_xfer_cb+0xf8>
 8002610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002612:	7bdb      	ldrb	r3, [r3, #15]
 8002614:	2b2a      	cmp	r3, #42	; 0x2a
 8002616:	d12a      	bne.n	800266e <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 8002618:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800261a:	f7ff fd40 	bl	800209e <rdwr10_validate_cmd>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 8002624:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 800262c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fc9c 	bl	8001f72 <fail_scsi_op>
      {
 800263a:	e0d8      	b.n	80027ee <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00f      	beq.n	8002664 <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002646:	7bdb      	ldrb	r3, [r3, #15]
 8002648:	2b28      	cmp	r3, #40	; 0x28
 800264a:	d105      	bne.n	8002658 <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fbfb 	bl	8002e4c <proc_read10_cmd>
      {
 8002656:	e0ca      	b.n	80027ee <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fc89 	bl	8002f74 <proc_write10_cmd>
      {
 8002662:	e0c4      	b.n	80027ee <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8002664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 800266c:	e0bf      	b.n	80027ee <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800266e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d042      	beq.n	80026fc <mscd_xfer_cb+0x1dc>
 8002676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002678:	7b1b      	ldrb	r3, [r3, #12]
 800267a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 800267e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	2307      	movs	r3, #7
 8002686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800268a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 80026a2:	f083 0301 	eor.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d027      	beq.n	80026fc <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d906      	bls.n	80026c4 <mscd_xfer_cb+0x1a4>
          {
            TU_LOG(MSC_DEBUG, "  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2201      	movs	r2, #1
 80026ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fc58 	bl	8001f72 <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80026c2:	e093      	b.n	80027ec <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 80026c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c6:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80026ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	79f8      	ldrb	r0, [r7, #7]
 80026d2:	4a30      	ldr	r2, [pc, #192]	; (8002794 <mscd_xfer_cb+0x274>)
 80026d4:	f002 fcf4 	bl	80050c0 <usbd_edpt_xfer>
 80026d8:	4603      	mov	r3, r0
 80026da:	f083 0301 	eor.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8083 	beq.w	80027ec <mscd_xfer_cb+0x2cc>
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <mscd_xfer_cb+0x278>)
 80026e8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d000      	beq.n	80026f8 <mscd_xfer_cb+0x1d8>
 80026f6:	be00      	bkpt	0x0000
 80026f8:	2300      	movs	r3, #0
 80026fa:	e183      	b.n	8002a04 <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fe:	7b58      	ldrb	r0, [r3, #13]
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	f103 010f 	add.w	r1, r3, #15
 8002706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <mscd_xfer_cb+0x274>)
 800270c:	f000 f988 	bl	8002a20 <proc_builtin_scsi>
 8002710:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8002712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002714:	2b00      	cmp	r3, #0
 8002716:	da10      	bge.n	800273a <mscd_xfer_cb+0x21a>
 8002718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	7b58      	ldrb	r0, [r3, #13]
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	f103 010f 	add.w	r1, r3, #15
 800272c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	b29b      	uxth	r3, r3
 8002732:	4a18      	ldr	r2, [pc, #96]	; (8002794 <mscd_xfer_cb+0x274>)
 8002734:	f7fe fb9a 	bl	8000e6c <tud_msc_scsi_cb>
 8002738:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	2b00      	cmp	r3, #0
 800273e:	da06      	bge.n	800274e <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG(MSC_DEBUG, "  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2201      	movs	r2, #1
 8002744:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fc13 	bl	8001f72 <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 800274c:	e108      	b.n	8002960 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2201      	movs	r2, #1
 8002760:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fc05 	bl	8001f72 <fail_scsi_op>
    break;
 8002768:	e0fa      	b.n	8002960 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 8002772:	e0f5      	b.n	8002960 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 8002774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10f      	bne.n	800279c <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2201      	movs	r2, #1
 8002780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbf5 	bl	8001f72 <fail_scsi_op>
    break;
 8002788:	e0ea      	b.n	8002960 <mscd_xfer_cb+0x440>
 800278a:	bf00      	nop
 800278c:	200029cc 	.word	0x200029cc
 8002790:	43425355 	.word	0x43425355
 8002794:	20002a0c 	.word	0x20002a0c
 8002798:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 800279c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	627a      	str	r2, [r7, #36]	; 0x24
 80027a4:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf28      	it	cs
 80027ae:	461a      	movcs	r2, r3
 80027b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b2:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 80027b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b6:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80027ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	b29b      	uxth	r3, r3
 80027c0:	79f8      	ldrb	r0, [r7, #7]
 80027c2:	4a92      	ldr	r2, [pc, #584]	; (8002a0c <mscd_xfer_cb+0x4ec>)
 80027c4:	f002 fc7c 	bl	80050c0 <usbd_edpt_xfer>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f083 0301 	eor.w	r3, r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80c5 	beq.w	8002960 <mscd_xfer_cb+0x440>
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <mscd_xfer_cb+0x4f0>)
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d000      	beq.n	80027e8 <mscd_xfer_cb+0x2c8>
 80027e6:	be00      	bkpt	0x0000
 80027e8:	2300      	movs	r3, #0
 80027ea:	e10b      	b.n	8002a04 <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 80027ec:	bf00      	nop
    break;
 80027ee:	e0b7      	b.n	8002960 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG(MSC_DEBUG, "  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 80027f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f2:	7bdb      	ldrb	r3, [r3, #15]
 80027f4:	2b28      	cmp	r3, #40	; 0x28
 80027f6:	d116      	bne.n	8002826 <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 80027f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	441a      	add	r2, r3
 8002800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002802:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8002804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	429a      	cmp	r2, r3
 800280e:	d304      	bcc.n	800281a <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8002810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8002818:	e0a4      	b.n	8002964 <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb14 	bl	8002e4c <proc_read10_cmd>
    break;
 8002824:	e09e      	b.n	8002964 <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	7bdb      	ldrb	r3, [r3, #15]
 800282a:	2b2a      	cmp	r3, #42	; 0x2a
 800282c:	d106      	bne.n	800283c <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fbf5 	bl	8003024 <proc_write10_new_data>
    break;
 800283a:	e093      	b.n	8002964 <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	441a      	add	r2, r3
 8002844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	7b1b      	ldrb	r3, [r3, #12]
 800284c:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	2307      	movs	r3, #7
 8002854:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 800286c:	f083 0301 	eor.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d014      	beq.n	80028a0 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	7b58      	ldrb	r0, [r3, #13]
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	f103 010f 	add.w	r1, r3, #15
 8002880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	b29b      	uxth	r3, r3
 8002886:	4a61      	ldr	r2, [pc, #388]	; (8002a0c <mscd_xfer_cb+0x4ec>)
 8002888:	f7fe faf0 	bl	8000e6c <tud_msc_scsi_cb>
 800288c:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 800288e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002890:	2b00      	cmp	r3, #0
 8002892:	da05      	bge.n	80028a0 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2201      	movs	r2, #1
 8002898:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fb69 	bl	8001f72 <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 80028a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d304      	bcc.n	80028b6 <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 80028ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 80028b4:	e056      	b.n	8002964 <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 80028b6:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <mscd_xfer_cb+0x4f0>)
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d04e      	beq.n	8002964 <mscd_xfer_cb+0x444>
 80028c6:	be00      	bkpt	0x0000
    break;
 80028c8:	e04c      	b.n	8002964 <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 80028ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80028d0:	79ba      	ldrb	r2, [r7, #6]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d148      	bne.n	8002968 <mscd_xfer_cb+0x448>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b0d      	cmp	r3, #13
 80028da:	d145      	bne.n	8002968 <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 80028dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028de:	7bdb      	ldrb	r3, [r3, #15]
 80028e0:	2b28      	cmp	r3, #40	; 0x28
 80028e2:	d002      	beq.n	80028ea <mscd_xfer_cb+0x3ca>
 80028e4:	2b2a      	cmp	r3, #42	; 0x2a
 80028e6:	d009      	beq.n	80028fc <mscd_xfer_cb+0x3dc>
 80028e8:	e011      	b.n	800290e <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <mscd_xfer_cb+0x4f4>)
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01a      	beq.n	8002926 <mscd_xfer_cb+0x406>
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	7b5b      	ldrb	r3, [r3, #13]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f3af 8000 	nop.w
          break;
 80028fa:	e014      	b.n	8002926 <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <mscd_xfer_cb+0x4f8>)
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d013      	beq.n	800292a <mscd_xfer_cb+0x40a>
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	7b5b      	ldrb	r3, [r3, #13]
 8002906:	4618      	mov	r0, r3
 8002908:	f3af 8000 	nop.w
          break;
 800290c:	e00d      	b.n	800292a <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <mscd_xfer_cb+0x4fc>)
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <mscd_xfer_cb+0x40e>
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	7b5a      	ldrb	r2, [r3, #13]
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	330f      	adds	r3, #15
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f3af 8000 	nop.w
          break;
 8002924:	e003      	b.n	800292e <mscd_xfer_cb+0x40e>
          break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <mscd_xfer_cb+0x410>
          break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <mscd_xfer_cb+0x410>
          break;
 800292e:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fb05 	bl	8001f44 <prepare_cbw>
 800293a:	4603      	mov	r3, r0
 800293c:	f083 0301 	eor.w	r3, r3, #1
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d010      	beq.n	8002968 <mscd_xfer_cb+0x448>
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <mscd_xfer_cb+0x4f0>)
 8002948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d000      	beq.n	8002958 <mscd_xfer_cb+0x438>
 8002956:	be00      	bkpt	0x0000
 8002958:	2300      	movs	r3, #0
 800295a:	e053      	b.n	8002a04 <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 800295c:	bf00      	nop
 800295e:	e004      	b.n	800296a <mscd_xfer_cb+0x44a>
    break;
 8002960:	bf00      	nop
 8002962:	e002      	b.n	800296a <mscd_xfer_cb+0x44a>
    break;
 8002964:	bf00      	nop
 8002966:	e000      	b.n	800296a <mscd_xfer_cb+0x44a>
    break;
 8002968:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 800296a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800296c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002970:	2b02      	cmp	r3, #2
 8002972:	d146      	bne.n	8002a02 <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 8002974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002976:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fcda 	bl	8005338 <usbd_edpt_stalled>
 8002984:	4603      	mov	r3, r0
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d038      	beq.n	8002a02 <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8002990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	429a      	cmp	r2, r3
 800299a:	d91c      	bls.n	80029d6 <mscd_xfer_cb+0x4b6>
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	7b1b      	ldrb	r3, [r3, #12]
 80029a0:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 80029a2:	7dbb      	ldrb	r3, [r7, #22]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	2307      	movs	r3, #7
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 80029c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fc1a 	bl	8005208 <usbd_edpt_stall>
 80029d4:	e015      	b.n	8002a02 <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fa92 	bl	8001f04 <send_csw>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <mscd_xfer_cb+0x4e2>
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <mscd_xfer_cb+0x4f0>)
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d000      	beq.n	80029fe <mscd_xfer_cb+0x4de>
 80029fc:	be00      	bkpt	0x0000
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3760      	adds	r7, #96	; 0x60
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20002a0c 	.word	0x20002a0c
 8002a10:	e000edf0 	.word	0xe000edf0
	...

08002a20 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b0a3      	sub	sp, #140	; 0x8c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8002a30:	4bb4      	ldr	r3, [pc, #720]	; (8002d04 <proc_builtin_scsi+0x2e4>)
 8002a32:	67fb      	str	r3, [r7, #124]	; 0x7c

  switch ( scsi_cmd[0] )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b25      	cmp	r3, #37	; 0x25
 8002a3a:	f200 81f4 	bhi.w	8002e26 <proc_builtin_scsi+0x406>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <proc_builtin_scsi+0x24>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002add 	.word	0x08002add
 8002a48:	08002e27 	.word	0x08002e27
 8002a4c:	08002e27 	.word	0x08002e27
 8002a50:	08002d8f 	.word	0x08002d8f
 8002a54:	08002e27 	.word	0x08002e27
 8002a58:	08002e27 	.word	0x08002e27
 8002a5c:	08002e27 	.word	0x08002e27
 8002a60:	08002e27 	.word	0x08002e27
 8002a64:	08002e27 	.word	0x08002e27
 8002a68:	08002e27 	.word	0x08002e27
 8002a6c:	08002e27 	.word	0x08002e27
 8002a70:	08002e27 	.word	0x08002e27
 8002a74:	08002e27 	.word	0x08002e27
 8002a78:	08002e27 	.word	0x08002e27
 8002a7c:	08002e27 	.word	0x08002e27
 8002a80:	08002e27 	.word	0x08002e27
 8002a84:	08002e27 	.word	0x08002e27
 8002a88:	08002e27 	.word	0x08002e27
 8002a8c:	08002c73 	.word	0x08002c73
 8002a90:	08002e27 	.word	0x08002e27
 8002a94:	08002e27 	.word	0x08002e27
 8002a98:	08002e27 	.word	0x08002e27
 8002a9c:	08002e27 	.word	0x08002e27
 8002aa0:	08002e27 	.word	0x08002e27
 8002aa4:	08002e27 	.word	0x08002e27
 8002aa8:	08002e27 	.word	0x08002e27
 8002aac:	08002d0d 	.word	0x08002d0d
 8002ab0:	08002b17 	.word	0x08002b17
 8002ab4:	08002e27 	.word	0x08002e27
 8002ab8:	08002e27 	.word	0x08002e27
 8002abc:	08002e27 	.word	0x08002e27
 8002ac0:	08002e27 	.word	0x08002e27
 8002ac4:	08002e27 	.word	0x08002e27
 8002ac8:	08002e27 	.word	0x08002e27
 8002acc:	08002e27 	.word	0x08002e27
 8002ad0:	08002bf5 	.word	0x08002bf5
 8002ad4:	08002e27 	.word	0x08002e27
 8002ad8:	08002b8f 	.word	0x08002b8f
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe f925 	bl	8000d34 <tud_msc_test_unit_ready_cb>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 819c 	beq.w	8002e30 <proc_builtin_scsi+0x410>
      {
        // Failed status response
        resplen = - 1;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002b00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8192 	bne.w	8002e30 <proc_builtin_scsi+0x410>
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fb4a 	bl	80021a8 <set_sense_medium_not_present>
      }
    break;
 8002b14:	e18c      	b.n	8002e30 <proc_builtin_scsi+0x410>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      if (tud_msc_start_stop_cb)
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <proc_builtin_scsi+0x2e8>)
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8188 	beq.w	8002e34 <proc_builtin_scsi+0x414>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8002b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b36:	791b      	ldrb	r3, [r3, #4]
 8002b38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	7bf8      	ldrb	r0, [r7, #15]
 8002b5e:	f7fe f915 	bl	8000d8c <tud_msc_start_stop_cb>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8162 	beq.w	8002e34 <proc_builtin_scsi+0x414>
        {
          // Failed status response
          resplen = - 1;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
 8002b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8158 	bne.w	8002e34 <proc_builtin_scsi+0x414>
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb0e 	bl	80021a8 <set_sense_medium_not_present>
        }
      }
    break;
 8002b8c:	e152      	b.n	8002e34 <proc_builtin_scsi+0x414>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8002b8e:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8002b92:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f8e3 	bl	8000d64 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8002b9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002ba2:	67bb      	str	r3, [r7, #120]	; 0x78

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8002ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <proc_builtin_scsi+0x190>
 8002baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <proc_builtin_scsi+0x1ac>
      {
        resplen = -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d117      	bne.n	8002bf2 <proc_builtin_scsi+0x1d2>
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff faef 	bl	80021a8 <set_sense_medium_not_present>
 8002bca:	e012      	b.n	8002bf2 <proc_builtin_scsi+0x1d2>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 8002bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	ba1b      	rev	r3, r3
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 8002bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd6:	ba1b      	rev	r3, r3
 8002bd8:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8002bda:	2308      	movs	r3, #8
 8002bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_capa10, (size_t) resplen);
 8002be0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002be4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f008 fc34 	bl	800b458 <memcpy>
      }
    }
    break;
 8002bf0:	e121      	b.n	8002e36 <proc_builtin_scsi+0x416>
 8002bf2:	e120      	b.n	8002e36 <proc_builtin_scsi+0x416>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8002bf4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	2308      	movs	r3, #8
 8002c02:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002c06:	2302      	movs	r3, #2
 8002c08:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8002c0c:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8002c10:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f8a4 	bl	8000d64 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <proc_builtin_scsi+0x20a>
 8002c22:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <proc_builtin_scsi+0x226>
      {
        resplen = -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d119      	bne.n	8002c70 <proc_builtin_scsi+0x250>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fab2 	bl	80021a8 <set_sense_medium_not_present>
 8002c44:	e014      	b.n	8002c70 <proc_builtin_scsi+0x250>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	ba1b      	rev	r3, r3
 8002c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8002c4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002c50:	ba5b      	rev16	r3, r3
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8002c58:	230c      	movs	r3, #12
 8002c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        memcpy(buffer, &read_fmt_capa, (size_t) resplen);
 8002c5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f008 fbf5 	bl	800b458 <memcpy>
      }
    }
    break;
 8002c6e:	e0e2      	b.n	8002e36 <proc_builtin_scsi+0x416>
 8002c70:	e0e1      	b.n	8002e36 <proc_builtin_scsi+0x416>

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f008 fc14 	bl	800b4a8 <memset>
 8002c80:	7d7b      	ldrb	r3, [r7, #21]
 8002c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c86:	757b      	strb	r3, [r7, #21]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	75bb      	strb	r3, [r7, #22]
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f362 0303 	bfi	r3, r2, #0, #4
 8002c94:	75fb      	strb	r3, [r7, #23]
 8002c96:	231f      	movs	r3, #31
 8002c98:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f008 fbff 	bl	800b4a8 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	3310      	adds	r3, #16
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f008 fbf7 	bl	800b4a8 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f008 fbef 	bl	800b4a8 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	f103 0420 	add.w	r4, r3, #32
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	f103 0210 	add.w	r2, r3, #16
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	f103 0108 	add.w	r1, r3, #8
 8002ce2:	7bf8      	ldrb	r0, [r7, #15]
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	f7fd ffdf 	bl	8000ca8 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8002cea:	2324      	movs	r3, #36	; 0x24
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &inquiry_rsp, (size_t) resplen);
 8002cf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f008 fbac 	bl	800b458 <memcpy>
    }
    break;
 8002d00:	e099      	b.n	8002e36 <proc_builtin_scsi+0x416>
 8002d02:	bf00      	nop
 8002d04:	200029cc 	.word	0x200029cc
 8002d08:	08000d8d 	.word	0x08000d8d

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002d12:	2300      	movs	r3, #0
 8002d14:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002d18:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d1c:	f36f 0306 	bfc	r3, #0, #7
 8002d20:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d24:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d28:	f36f 13c7 	bfc	r3, #7, #1
 8002d2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      if ( tud_msc_is_writable_cb )
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <proc_builtin_scsi+0x424>)
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <proc_builtin_scsi+0x330>
      {
        writable = tud_msc_is_writable_cb(lun);
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe f863 	bl	8000e10 <tud_msc_is_writable_cb>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
      }

      mode_resp.write_protected = !writable;
 8002d50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f083 0301 	eor.w	r3, r3, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002d6e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002d72:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 8002d76:	2304      	movs	r3, #4
 8002d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &mode_resp, (size_t) resplen);
 8002d7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f008 fb66 	bl	800b458 <memcpy>
    }
    break;
 8002d8c:	e053      	b.n	8002e36 <proc_builtin_scsi+0x416>

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 8002d8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	821a      	strh	r2, [r3, #16]
 8002d9e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002da2:	2270      	movs	r2, #112	; 0x70
 8002da4:	f362 0306 	bfi	r3, r2, #0, #7
 8002da8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8002dac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 8002db8:	230a      	movs	r3, #10
 8002dba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 8002dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002dce:	f362 0303 	bfi	r3, r2, #0, #4
 8002dd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 8002dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8002de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 8002dea:	2312      	movs	r3, #18
 8002dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      memcpy(buffer, &sense_rsp, (size_t) resplen);
 8002df0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f008 fb2c 	bl	800b458 <memcpy>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <proc_builtin_scsi+0x428>)
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <proc_builtin_scsi+0x3f8>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f3af 8000 	nop.w
 8002e14:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8002e18:	7bf8      	ldrb	r0, [r7, #15]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f7ff f99e 	bl	8002160 <tud_msc_set_sense>
    }
    break;
 8002e24:	e007      	b.n	8002e36 <proc_builtin_scsi+0x416>

    default: resplen = -1; break;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e2e:	e002      	b.n	8002e36 <proc_builtin_scsi+0x416>
    break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <proc_builtin_scsi+0x416>
    break;
 8002e34:	bf00      	nop
  }

  return resplen;
 8002e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	378c      	adds	r7, #140	; 0x8c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	08000e11 	.word	0x08000e11
 8002e48:	00000000 	.word	0x00000000

08002e4c <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b092      	sub	sp, #72	; 0x48
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8002e5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e5e:	f7ff f906 	bl	800206e <rdwr10_get_blocksize>
 8002e62:	4603      	mov	r3, r0
 8002e64:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	330f      	adds	r3, #15
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f8d9 	bl	8002022 <rdwr10_get_lba>
 8002e70:	4601      	mov	r1, r0
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8002e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8002e90:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	4293      	cmp	r3, r2
 8002e98:	bf28      	it	cs
 8002e9a:	4613      	movcs	r3, r2
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ea8:	fb01 f202 	mul.w	r2, r1, r2
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb2:	7b58      	ldrb	r0, [r3, #13]
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <proc_read10_cmd+0x120>)
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ebe:	f7fd ff85 	bl	8000dcc <tud_msc_read10_cb>
 8002ec2:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da0b      	bge.n	8002ee2 <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG(MSC_DEBUG, "  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 8002eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ecc:	7b5b      	ldrb	r3, [r3, #13]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f96a 	bl	80021a8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f849 	bl	8001f72 <fail_scsi_op>
 8002ee0:	e040      	b.n	8002f64 <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d124      	bne.n	8002f32 <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	77bb      	strb	r3, [r7, #30]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]
 8002efe:	2300      	movs	r3, #0
 8002f00:	75bb      	strb	r3, [r7, #22]
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	723b      	strb	r3, [r7, #8]
 8002f12:	2307      	movs	r3, #7
 8002f14:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 8002f16:	7fbb      	ldrb	r3, [r7, #30]
 8002f18:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 8002f22:	7dba      	ldrb	r2, [r7, #22]
 8002f24:	f107 0308 	add.w	r3, r7, #8
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fdb8 	bl	8004aa0 <dcd_event_handler>
}
 8002f30:	e018      	b.n	8002f64 <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	79f8      	ldrb	r0, [r7, #7]
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <proc_read10_cmd+0x120>)
 8002f40:	f002 f8be 	bl	80050c0 <usbd_edpt_xfer>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f083 0301 	eor.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <proc_read10_cmd+0x118>
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <proc_read10_cmd+0x124>)
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d000      	beq.n	8002f62 <proc_read10_cmd+0x116>
 8002f60:	be00      	bkpt	0x0000
 8002f62:	bf00      	nop
  }
}
 8002f64:	3740      	adds	r7, #64	; 0x40
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20002a0c 	.word	0x20002a0c
 8002f70:	e000edf0 	.word	0xe000edf0

08002f74 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <proc_write10_cmd+0xa4>)
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	7b5b      	ldrb	r3, [r3, #13]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd ff3c 	bl	8000e10 <tud_msc_is_writable_cb>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	7b58      	ldrb	r0, [r3, #13]
 8002fac:	2300      	movs	r3, #0
 8002fae:	2227      	movs	r2, #39	; 0x27
 8002fb0:	2107      	movs	r1, #7
 8002fb2:	f7ff f8d5 	bl	8002160 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe ffd8 	bl	8001f72 <fail_scsi_op>
    return;
 8002fc2:	e026      	b.n	8003012 <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bf28      	it	cs
 8002fde:	4613      	movcs	r3, r2
 8002fe0:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8002fe8:	8afb      	ldrh	r3, [r7, #22]
 8002fea:	79f8      	ldrb	r0, [r7, #7]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <proc_write10_cmd+0xa8>)
 8002fee:	f002 f867 	bl	80050c0 <usbd_edpt_xfer>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <proc_write10_cmd+0x9e>
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <proc_write10_cmd+0xac>)
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d000      	beq.n	8003010 <proc_write10_cmd+0x9c>
 800300e:	be00      	bkpt	0x0000
 8003010:	bf00      	nop
}
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08000e11 	.word	0x08000e11
 800301c:	20002a0c 	.word	0x20002a0c
 8003020:	e000edf0 	.word	0xe000edf0

08003024 <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b092      	sub	sp, #72	; 0x48
 8003028:	af02      	add	r7, sp, #8
 800302a:	4603      	mov	r3, r0
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8003036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003038:	f7ff f819 	bl	800206e <rdwr10_get_blocksize>
 800303c:	4603      	mov	r3, r0
 800303e:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	330f      	adds	r3, #15
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe ffec 	bl	8002022 <rdwr10_get_lba>
 800304a:	4601      	mov	r1, r0
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003050:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	440b      	add	r3, r1
 8003058:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003060:	fbb3 f1f2 	udiv	r1, r3, r2
 8003064:	fb01 f202 	mul.w	r2, r1, r2
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 800306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306e:	7b58      	ldrb	r0, [r3, #13]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <proc_write10_new_data+0x144>)
 8003076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800307a:	f7fd fed5 	bl	8000e28 <tud_msc_write10_cb>
 800307e:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	da11      	bge.n	80030aa <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG(MSC_DEBUG, "  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	441a      	add	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	7b5b      	ldrb	r3, [r3, #13]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f886 	bl	80021a8 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2201      	movs	r2, #1
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe ff65 	bl	8001f72 <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 80030a8:	e059      	b.n	800315e <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d93f      	bls.n	8003132 <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dd0e      	ble.n	80030de <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c6:	b292      	uxth	r2, r2
 80030c8:	441a      	add	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 80030ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <proc_write10_new_data+0x144>)
 80030d2:	4413      	add	r3, r2
 80030d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d6:	4619      	mov	r1, r3
 80030d8:	4823      	ldr	r0, [pc, #140]	; (8003168 <proc_write10_new_data+0x144>)
 80030da:	f008 f9cb 	bl	800b474 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030ea:	4613      	mov	r3, r2
 80030ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	2300      	movs	r3, #0
 80030fa:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310c:	743b      	strb	r3, [r7, #16]
 800310e:	2307      	movs	r3, #7
 8003110:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8003112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003116:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800311c:	7ffb      	ldrb	r3, [r7, #31]
 800311e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8003120:	7fba      	ldrb	r2, [r7, #30]
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fcb9 	bl	8004aa0 <dcd_event_handler>
}
 800312e:	bf00      	nop
}
 8003130:	e015      	b.n	800315e <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	441a      	add	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	429a      	cmp	r2, r3
 8003148:	d304      	bcc.n	8003154 <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8003152:	e004      	b.n	800315e <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff0b 	bl	8002f74 <proc_write10_cmd>
}
 800315e:	bf00      	nop
 8003160:	3740      	adds	r7, #64	; 0x40
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20002a0c 	.word	0x20002a0c

0800316c <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	460b      	mov	r3, r1
 800317c:	80fb      	strh	r3, [r7, #6]
 800317e:	4613      	mov	r3, r2
 8003180:	80bb      	strh	r3, [r7, #4]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d901      	bls.n	800318e <tu_fifo_config+0x22>
 800318a:	2300      	movs	r3, #0
 800318c:	e020      	b.n	80031d0 <tu_fifo_config+0x64>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	88ba      	ldrh	r2, [r7, #4]
 800319e:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	7e3a      	ldrb	r2, [r7, #24]
 80031a4:	721a      	strb	r2, [r3, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	899b      	ldrh	r3, [r3, #12]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80031c0:	2100      	movs	r1, #0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	460a      	mov	r2, r1
 80031c6:	81da      	strh	r2, [r3, #14]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	460a      	mov	r2, r1
 80031cc:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	460a      	mov	r2, r1
 80031e6:	80fb      	strh	r3, [r7, #6]
 80031e8:	4613      	mov	r3, r2
 80031ea:	80bb      	strh	r3, [r7, #4]
  while ( idx >= depth) idx -= depth;
 80031ec:	e003      	b.n	80031f6 <_ff_mod+0x1a>
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	88bb      	ldrh	r3, [r7, #4]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	80fb      	strh	r3, [r7, #6]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	88bb      	ldrh	r3, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d2f7      	bcs.n	80031ee <_ff_mod+0x12>
  return idx;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8003224:	e00b      	b.n	800323e <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	61ba      	str	r2, [r7, #24]
 800322e:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void     tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	bf00      	nop
    ff_buf += 4;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 800323e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	84fa      	strh	r2, [r7, #38]	; 0x26
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ee      	bne.n	8003226 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003252:	7ffb      	ldrb	r3, [r7, #31]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *rx_fifo;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800325e:	7ffa      	ldrb	r2, [r7, #31]
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f008 f8f6 	bl	800b458 <memcpy>
  }
}
 800326c:	bf00      	nop
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800328c:	e008      	b.n	80032a0 <_ff_pull_const_addr+0x2c>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32  (const void* mem) { return *((uint32_t const *) mem); }
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	681a      	ldr	r2, [r3, #0]
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3304      	adds	r3, #4
 800329e:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80032a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	84fa      	strh	r2, [r7, #38]	; 0x26
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f1      	bne.n	800328e <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80032be:	7ffa      	ldrb	r2, [r7, #31]
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f008 f8c6 	bl	800b458 <memcpy>

    *tx_fifo = tmp32;
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	601a      	str	r2, [r3, #0]
  }
}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	88c9      	ldrh	r1, [r1, #6]
 80032f2:	fb01 f202 	mul.w	r2, r1, r2
 80032f6:	1898      	adds	r0, r3, r2
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88db      	ldrh	r3, [r3, #6]
 80032fc:	461a      	mov	r2, r3
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	f008 f8aa 	bl	800b458 <memcpy>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	460b      	mov	r3, r1
 800331c:	80fb      	strh	r3, [r7, #6]
 800331e:	4613      	mov	r3, r2
 8003320:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	889a      	ldrh	r2, [r3, #4]
 8003326:	88bb      	ldrh	r3, [r7, #4]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin;
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88db      	ldrh	r3, [r3, #6]
 8003338:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800333a:	fb12 f303 	smulbb	r3, r2, r3
 800333e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88db      	ldrh	r3, [r3, #6]
 8003344:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003346:	fb12 f303 	smulbb	r3, r2, r3
 800334a:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	88ba      	ldrh	r2, [r7, #4]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	88c9      	ldrh	r1, [r1, #6]
 8003356:	fb01 f202 	mul.w	r2, r1, r2
 800335a:	4413      	add	r3, r2
 800335c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800335e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <_ff_push_n+0x60>
 8003366:	2b01      	cmp	r3, #1
 8003368:	d01f      	beq.n	80033aa <_ff_push_n+0x9e>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 800336a:	e097      	b.n	800349c <_ff_push_n+0x190>
      if(n <= nLin)
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003370:	429a      	cmp	r2, r3
 8003372:	d80a      	bhi.n	800338a <_ff_push_n+0x7e>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	88d2      	ldrh	r2, [r2, #6]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003384:	f008 f868 	bl	800b458 <memcpy>
      break;
 8003388:	e088      	b.n	800349c <_ff_push_n+0x190>
        memcpy(ff_buf, app_buf, nLin_bytes);
 800338a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800338c:	461a      	mov	r2, r3
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003392:	f008 f861 	bl	800b458 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4413      	add	r3, r2
 80033a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033a2:	4619      	mov	r1, r3
 80033a4:	f008 f858 	bl	800b458 <memcpy>
      break;
 80033a8:	e078      	b.n	800349c <_ff_push_n+0x190>
      if(n <= nLin)
 80033aa:	88fa      	ldrh	r2, [r7, #6]
 80033ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d80b      	bhi.n	80033ca <_ff_push_n+0xbe>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	88db      	ldrh	r3, [r3, #6]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	fb12 f303 	smulbb	r3, r2, r3
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c4:	f7ff ff22 	bl	800320c <_ff_push_const_addr>
      break;
 80033c8:	e067      	b.n	800349a <_ff_push_n+0x18e>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80033ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033cc:	f023 0303 	bic.w	r3, r3, #3
 80033d0:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80033d2:	8c3b      	ldrh	r3, [r7, #32]
 80033d4:	461a      	mov	r2, r3
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033da:	f7ff ff17 	bl	800320c <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80033de:	8c3b      	ldrh	r3, [r7, #32]
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	4413      	add	r3, r2
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80033ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80033f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d041      	beq.n	8003482 <_ff_push_n+0x176>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 80033fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003402:	b29b      	uxth	r3, r3
 8003404:	f1c3 0304 	rsb	r3, r3, #4
 8003408:	b29a      	uxth	r2, r3
 800340a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800340c:	837b      	strh	r3, [r7, #26]
 800340e:	4613      	mov	r3, r2
 8003410:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003412:	8b7a      	ldrh	r2, [r7, #26]
 8003414:	8b3b      	ldrh	r3, [r7, #24]
 8003416:	4293      	cmp	r3, r2
 8003418:	bf28      	it	cs
 800341a:	4613      	movcs	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 8003422:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003426:	b29b      	uxth	r3, r3
 8003428:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800343a:	e007      	b.n	800344c <_ff_push_n+0x140>
 800343c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343e:	1c53      	adds	r3, r2, #1
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	1c59      	adds	r1, r3, #1
 8003446:	6339      	str	r1, [r7, #48]	; 0x30
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003450:	1e5a      	subs	r2, r3, #1
 8003452:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <_ff_push_n+0x130>
          ff_buf = f->buffer;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8003460:	e007      	b.n	8003472 <_ff_push_n+0x166>
 8003462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003464:	1c53      	adds	r3, r2, #1
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	6339      	str	r1, [r7, #48]	; 0x30
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003476:	1e5a      	subs	r2, r3, #1
 8003478:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <_ff_push_n+0x156>
 8003480:	e002      	b.n	8003488 <_ff_push_n+0x17c>
          ff_buf = f->buffer; // wrap around to beginning
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8003488:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <_ff_push_n+0x18e>
 800348e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003490:	461a      	mov	r2, r3
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003496:	f7ff feb9 	bl	800320c <_ff_push_const_addr>
      break;
 800349a:	bf00      	nop
}
 800349c:	bf00      	nop
 800349e:	3738      	adds	r7, #56	; 0x38
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	88c9      	ldrh	r1, [r1, #6]
 80034bc:	fb01 f202 	mul.w	r2, r1, r2
 80034c0:	1899      	adds	r1, r3, r2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88db      	ldrh	r3, [r3, #6]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68b8      	ldr	r0, [r7, #8]
 80034ca:	f007 ffc5 	bl	800b458 <memcpy>
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b08e      	sub	sp, #56	; 0x38
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	4611      	mov	r1, r2
 80034e2:	461a      	mov	r2, r3
 80034e4:	460b      	mov	r3, r1
 80034e6:	80fb      	strh	r3, [r7, #6]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80bb      	strh	r3, [r7, #4]
  uint16_t const nLin = f->depth - rel;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	889a      	ldrh	r2, [r3, #4]
 80034f0:	88bb      	ldrh	r3, [r7, #4]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const nWrap = n - nLin; // only used if wrapped
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t nLin_bytes = nLin * f->item_size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88db      	ldrh	r3, [r3, #6]
 8003502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003504:	fb12 f303 	smulbb	r3, r2, r3
 8003508:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t nWrap_bytes = nWrap * f->item_size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	88db      	ldrh	r3, [r3, #6]
 800350e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003510:	fb12 f303 	smulbb	r3, r2, r3
 8003514:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	88ba      	ldrh	r2, [r7, #4]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	88c9      	ldrh	r1, [r1, #6]
 8003520:	fb01 f202 	mul.w	r2, r1, r2
 8003524:	4413      	add	r3, r2
 8003526:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8003528:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <_ff_pull_n+0x60>
 8003530:	2b01      	cmp	r3, #1
 8003532:	d01f      	beq.n	8003574 <_ff_pull_n+0x9e>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 8003534:	e099      	b.n	800366a <_ff_pull_n+0x194>
      if ( n <= nLin )
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800353a:	429a      	cmp	r2, r3
 800353c:	d80a      	bhi.n	8003554 <_ff_pull_n+0x7e>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	88d2      	ldrh	r2, [r2, #6]
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354c:	68b8      	ldr	r0, [r7, #8]
 800354e:	f007 ff83 	bl	800b458 <memcpy>
    break;
 8003552:	e08a      	b.n	800366a <_ff_pull_n+0x194>
        memcpy(app_buf, ff_buf, nLin_bytes);
 8003554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003556:	461a      	mov	r2, r3
 8003558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	f007 ff7c 	bl	800b458 <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 8003560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	18d0      	adds	r0, r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800356c:	4619      	mov	r1, r3
 800356e:	f007 ff73 	bl	800b458 <memcpy>
    break;
 8003572:	e07a      	b.n	800366a <_ff_pull_n+0x194>
      if ( n <= nLin )
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003578:	429a      	cmp	r2, r3
 800357a:	d80b      	bhi.n	8003594 <_ff_pull_n+0xbe>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88db      	ldrh	r3, [r3, #6]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	fb12 f303 	smulbb	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f7ff fe71 	bl	8003274 <_ff_pull_const_addr>
    break;
 8003592:	e069      	b.n	8003668 <_ff_pull_n+0x192>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8003594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 800359c:	8c3b      	ldrh	r3, [r7, #32]
 800359e:	461a      	mov	r2, r3
 80035a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035a2:	68b8      	ldr	r0, [r7, #8]
 80035a4:	f7ff fe66 	bl	8003274 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 80035a8:	8c3b      	ldrh	r3, [r7, #32]
 80035aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ac:	4413      	add	r3, r2
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80035b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80035c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d043      	beq.n	8003650 <_ff_pull_n+0x17a>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
 80035c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f1c3 0304 	rsb	r3, r3, #4
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035d6:	837b      	strh	r3, [r7, #26]
 80035d8:	4613      	mov	r3, r2
 80035da:	833b      	strh	r3, [r7, #24]
 80035dc:	8b7a      	ldrh	r2, [r7, #26]
 80035de:	8b3b      	ldrh	r3, [r7, #24]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf28      	it	cs
 80035e4:	4613      	movcs	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          nWrap_bytes -= remrem;
 80035ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80035fc:	f107 0314 	add.w	r3, r7, #20
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8003602:	e007      	b.n	8003614 <_ff_pull_n+0x13e>
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	1c53      	adds	r3, r2, #1
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003618:	1e5a      	subs	r2, r3, #1
 800361a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <_ff_pull_n+0x12e>
          ff_buf = f->buffer;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8003628:	e007      	b.n	800363a <_ff_pull_n+0x164>
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	1c53      	adds	r3, r2, #1
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	1c59      	adds	r1, r3, #1
 8003634:	62b9      	str	r1, [r7, #40]	; 0x28
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800363e:	1e5a      	subs	r2, r3, #1
 8003640:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <_ff_pull_n+0x154>
          *tx_fifo = tmp32;
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e002      	b.n	8003656 <_ff_pull_n+0x180>
          ff_buf = f->buffer; // wrap around to beginning
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 8003656:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <_ff_pull_n+0x192>
 800365c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800365e:	461a      	mov	r2, r3
 8003660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003662:	68b8      	ldr	r0, [r7, #8]
 8003664:	f7ff fe06 	bl	8003274 <_ff_pull_const_addr>
    break;
 8003668:	bf00      	nop
  }
}
 800366a:	bf00      	nop
 800366c:	3738      	adds	r7, #56	; 0x38
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	883b      	ldrh	r3, [r7, #0]
 8003686:	4413      	add	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	429a      	cmp	r2, r3
 800368e:	d807      	bhi.n	80036a0 <advance_pointer+0x2e>
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	883b      	ldrh	r3, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	899b      	ldrh	r3, [r3, #12]
 800369c:	429a      	cmp	r2, r3
 800369e:	d908      	bls.n	80036b2 <advance_pointer+0x40>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	883b      	ldrh	r3, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	895b      	ldrh	r3, [r3, #10]
 80036ac:	4413      	add	r3, r2
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	e003      	b.n	80036ba <advance_pointer+0x48>
  }
  else
  {
    p += offset;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	883b      	ldrh	r3, [r7, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	807b      	strh	r3, [r7, #2]
  }
  return p;
 80036ba:	887b      	ldrh	r3, [r7, #2]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	803b      	strh	r3, [r7, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 80036d8:	883a      	ldrh	r2, [r7, #0]
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d807      	bhi.n	80036f0 <backward_pointer+0x28>
 80036e0:	887a      	ldrh	r2, [r7, #2]
 80036e2:	883b      	ldrh	r3, [r7, #0]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	899b      	ldrh	r3, [r3, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d908      	bls.n	8003702 <backward_pointer+0x3a>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
 80036f0:	887a      	ldrh	r2, [r7, #2]
 80036f2:	883b      	ldrh	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	895b      	ldrh	r3, [r3, #10]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	e003      	b.n	800370a <backward_pointer+0x42>
  }
  else
  {
    p -= offset;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	883b      	ldrh	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	807b      	strh	r3, [r7, #2]
  }
  return p;
 800370a:	887b      	ldrh	r3, [r7, #2]
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
  return _ff_mod(p, f->depth);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	889a      	ldrh	r2, [r3, #4]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fd55 	bl	80031dc <_ff_mod>
 8003732:	4603      	mov	r3, r0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	803b      	strh	r3, [r7, #0]
  uint16_t cnt = wAbs-rAbs;
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	883b      	ldrh	r3, [r7, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	81fb      	strh	r3, [r7, #14]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003754:	883a      	ldrh	r2, [r7, #0]
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	429a      	cmp	r2, r3
 800375a:	d904      	bls.n	8003766 <_tu_fifo_count+0x2a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	895b      	ldrh	r3, [r3, #10]
 8003760:	89fa      	ldrh	r2, [r7, #14]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	81fb      	strh	r3, [r7, #14]

  return cnt;
 8003766:	89fb      	ldrh	r3, [r7, #14]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	460a      	mov	r2, r1
 800377e:	80fb      	strh	r3, [r7, #6]
 8003780:	4613      	mov	r3, r2
 8003782:	80bb      	strh	r3, [r7, #4]
  return wAbs == rAbs;
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	88bb      	ldrh	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	807b      	strh	r3, [r7, #2]
 80037aa:	4613      	mov	r3, r2
 80037ac:	803b      	strh	r3, [r7, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 80037ae:	883a      	ldrh	r2, [r7, #0]
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ffc1 	bl	800373c <_tu_fifo_count>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	889b      	ldrh	r3, [r3, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	889a      	ldrh	r2, [r3, #4]
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff6d 	bl	80036c8 <backward_pointer>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	821a      	strh	r2, [r3, #16]
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	4611      	mov	r1, r2
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	80fb      	strh	r3, [r7, #6]
 8003810:	4613      	mov	r3, r2
 8003812:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8003814:	88ba      	ldrh	r2, [r7, #4]
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	4619      	mov	r1, r3
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff ff8e 	bl	800373c <_tu_fifo_count>
 8003820:	4603      	mov	r3, r0
 8003822:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	889b      	ldrh	r3, [r3, #4]
 8003828:	8afa      	ldrh	r2, [r7, #22]
 800382a:	429a      	cmp	r2, r3
 800382c:	d907      	bls.n	800383e <_tu_fifo_peek+0x40>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	4619      	mov	r1, r3
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ffce 	bl	80037d4 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	889b      	ldrh	r3, [r3, #4]
 800383c:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 800383e:	8afb      	ldrh	r3, [r7, #22]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <_tu_fifo_peek+0x4a>
 8003844:	2300      	movs	r3, #0
 8003846:	e00d      	b.n	8003864 <_tu_fifo_peek+0x66>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8003848:	88bb      	ldrh	r3, [r7, #4]
 800384a:	4619      	mov	r1, r3
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ff63 	bl	8003718 <get_relative_pointer>
 8003852:	4603      	mov	r3, r0
 8003854:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8003856:	8abb      	ldrh	r3, [r7, #20]
 8003858:	461a      	mov	r2, r3
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff fe21 	bl	80034a4 <_ff_pull>

  return true;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4611      	mov	r1, r2
 8003878:	461a      	mov	r2, r3
 800387a:	460b      	mov	r3, r1
 800387c:	80fb      	strh	r3, [r7, #6]
 800387e:	4613      	mov	r3, r2
 8003880:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8003882:	8c3a      	ldrh	r2, [r7, #32]
 8003884:	88bb      	ldrh	r3, [r7, #4]
 8003886:	4619      	mov	r1, r3
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff57 	bl	800373c <_tu_fifo_count>
 800388e:	4603      	mov	r3, r0
 8003890:	82fb      	strh	r3, [r7, #22]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	889b      	ldrh	r3, [r3, #4]
 8003896:	8afa      	ldrh	r2, [r7, #22]
 8003898:	429a      	cmp	r2, r3
 800389a:	d90a      	bls.n	80038b2 <_tu_fifo_peek_n+0x46>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 800389c:	88bb      	ldrh	r3, [r7, #4]
 800389e:	4619      	mov	r1, r3
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7ff ff97 	bl	80037d4 <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8a1b      	ldrh	r3, [r3, #16]
 80038aa:	843b      	strh	r3, [r7, #32]
    cnt = f->depth;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	889b      	ldrh	r3, [r3, #4]
 80038b0:	82fb      	strh	r3, [r7, #22]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 80038b2:	8afb      	ldrh	r3, [r7, #22]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <_tu_fifo_peek_n+0x50>
 80038b8:	2300      	movs	r3, #0
 80038ba:	e017      	b.n	80038ec <_tu_fifo_peek_n+0x80>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 80038bc:	8afa      	ldrh	r2, [r7, #22]
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d201      	bcs.n	80038c8 <_tu_fifo_peek_n+0x5c>
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	80fb      	strh	r3, [r7, #6]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 80038c8:	8c3b      	ldrh	r3, [r7, #32]
 80038ca:	4619      	mov	r1, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff23 	bl	8003718 <get_relative_pointer>
 80038d2:	4603      	mov	r3, r0
 80038d4:	82bb      	strh	r3, [r7, #20]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 80038d6:	8ab9      	ldrh	r1, [r7, #20]
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	460b      	mov	r3, r1
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fdf6 	bl	80034d6 <_ff_pull_n>

  return n;
 80038ea:	88fb      	ldrh	r3, [r7, #6]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	803b      	strh	r3, [r7, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	889c      	ldrh	r4, [r3, #4]
 8003908:	883a      	ldrh	r2, [r7, #0]
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ff14 	bl	800373c <_tu_fifo_count>
 8003914:	4603      	mov	r3, r0
 8003916:	1ae3      	subs	r3, r4, r3
 8003918:	b29b      	uxth	r3, r3
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b08a      	sub	sp, #40	; 0x28
 8003926:	af02      	add	r7, sp, #8
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	4611      	mov	r1, r2
 800392e:	461a      	mov	r2, r3
 8003930:	460b      	mov	r3, r1
 8003932:	80fb      	strh	r3, [r7, #6]
 8003934:	4613      	mov	r3, r2
 8003936:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <_tu_fifo_write_n+0x20>
 800393e:	2300      	movs	r3, #0
 8003940:	e053      	b.n	80039ea <_tu_fifo_write_n+0xc8>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	89db      	ldrh	r3, [r3, #14]
 8003946:	83fb      	strh	r3, [r7, #30]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8a1b      	ldrh	r3, [r3, #16]
 800394c:	82fb      	strh	r3, [r7, #22]
  uint8_t const* buf8 = (uint8_t const*) data;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	7a1b      	ldrb	r3, [r3, #8]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <_tu_fifo_write_n+0x66>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8003960:	8afa      	ldrh	r2, [r7, #22]
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	4619      	mov	r1, r3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff ffc4 	bl	80038f4 <_tu_fifo_remaining>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	827b      	strh	r3, [r7, #18]
 8003974:	4613      	mov	r3, r2
 8003976:	823b      	strh	r3, [r7, #16]
 8003978:	8a7a      	ldrh	r2, [r7, #18]
 800397a:	8a3b      	ldrh	r3, [r7, #16]
 800397c:	4293      	cmp	r3, r2
 800397e:	bf28      	it	cs
 8003980:	4613      	movcs	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	80fb      	strh	r3, [r7, #6]
 8003986:	e015      	b.n	80039b4 <_tu_fifo_write_n+0x92>
  }
  else if (n >= f->depth)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	429a      	cmp	r2, r3
 8003990:	d310      	bcc.n	80039b4 <_tu_fifo_write_n+0x92>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	8892      	ldrh	r2, [r2, #4]
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	88d2      	ldrh	r2, [r2, #6]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	80fb      	strh	r3, [r7, #6]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 80039b0:	8afb      	ldrh	r3, [r7, #22]
 80039b2:	83fb      	strh	r3, [r7, #30]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 80039b4:	8bfb      	ldrh	r3, [r7, #30]
 80039b6:	4619      	mov	r1, r3
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fead 	bl	8003718 <get_relative_pointer>
 80039be:	4603      	mov	r3, r0
 80039c0:	82bb      	strh	r3, [r7, #20]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 80039c2:	8ab9      	ldrh	r1, [r7, #20]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	797b      	ldrb	r3, [r7, #5]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	460b      	mov	r3, r1
 80039cc:	69b9      	ldr	r1, [r7, #24]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f7ff fc9c 	bl	800330c <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 80039d4:	88fa      	ldrh	r2, [r7, #6]
 80039d6:	8bfb      	ldrh	r3, [r7, #30]
 80039d8:	4619      	mov	r1, r3
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fe49 	bl	8003672 <advance_pointer>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 80039e8:	88fb      	ldrh	r3, [r7, #6]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3720      	adds	r7, #32
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	4611      	mov	r1, r2
 80039fe:	461a      	mov	r2, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	80fb      	strh	r3, [r7, #6]
 8003a04:	4613      	mov	r3, r2
 8003a06:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	89db      	ldrh	r3, [r3, #14]
 8003a0c:	b298      	uxth	r0, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8a1b      	ldrh	r3, [r3, #16]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	88f9      	ldrh	r1, [r7, #6]
 8003a16:	797a      	ldrb	r2, [r7, #5]
 8003a18:	9201      	str	r2, [sp, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	460a      	mov	r2, r1
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff22 	bl	800386c <_tu_fifo_peek_n>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8a1b      	ldrh	r3, [r3, #16]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	4619      	mov	r1, r3
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fe1b 	bl	8003672 <advance_pointer>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return n;
 8003a44:	88fb      	ldrh	r3, [r7, #6]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	89db      	ldrh	r3, [r3, #14]
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8a1b      	ldrh	r3, [r3, #16]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fe69 	bl	800373c <_tu_fifo_count>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	889b      	ldrh	r3, [r3, #4]
 8003a72:	81fa      	strh	r2, [r7, #14]
 8003a74:	81bb      	strh	r3, [r7, #12]
 8003a76:	89fa      	ldrh	r2, [r7, #14]
 8003a78:	89bb      	ldrh	r3, [r7, #12]
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bf28      	it	cs
 8003a7e:	4613      	movcs	r3, r2
 8003a80:	b29b      	uxth	r3, r3
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	89db      	ldrh	r3, [r3, #14]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8a1b      	ldrh	r3, [r3, #16]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7ff fe67 	bl	8003774 <_tu_fifo_empty>
 8003aa6:	4603      	mov	r3, r0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	89db      	ldrh	r3, [r3, #14]
 8003abc:	b299      	uxth	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8a1b      	ldrh	r3, [r3, #16]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ff14 	bl	80038f4 <_tu_fifo_remaining>
 8003acc:	4603      	mov	r3, r0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	89db      	ldrh	r3, [r3, #14]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8a1b      	ldrh	r3, [r3, #16]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	6839      	ldr	r1, [r7, #0]
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fe85 	bl	80037fe <_tu_fifo_peek>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8a1b      	ldrh	r3, [r3, #16]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	b292      	uxth	r2, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fdb4 	bl	8003672 <advance_pointer>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff ff5e 	bl	80039f2 <_tu_fifo_read_n>
 8003b36:	4603      	mov	r3, r0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	2301      	movs	r3, #1
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ff4c 	bl	80039f2 <_tu_fifo_read_n>
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	89db      	ldrh	r3, [r3, #14]
 8003b72:	81bb      	strh	r3, [r7, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8a1b      	ldrh	r3, [r3, #16]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	89bb      	ldrh	r3, [r7, #12]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fe0d 	bl	800379e <_tu_fifo_full>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <tu_fifo_write+0x3a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7a1b      	ldrb	r3, [r3, #8]
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <tu_fifo_write+0x3a>
  {
    ret = false;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e018      	b.n	8003bd0 <tu_fifo_write+0x6c>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 8003b9e:	89bb      	ldrh	r3, [r7, #12]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fdb8 	bl	8003718 <get_relative_pointer>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	817b      	strh	r3, [r7, #10]

    // Write data
    _ff_push(f, data, wRel);
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fb91 	bl	80032da <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 8003bb8:	89bb      	ldrh	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fd57 	bl	8003672 <advance_pointer>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	81da      	strh	r2, [r3, #14]

    ret = true;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	2300      	movs	r3, #0
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff fe97 	bl	8003922 <_tu_fifo_write_n>
 8003bf4:	4603      	mov	r3, r0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fe85 	bl	8003922 <_tu_fifo_write_n>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	460a      	mov	r2, r1
 8003c30:	81da      	strh	r2, [r3, #14]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	460a      	mov	r2, r1
 8003c36:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	889b      	ldrh	r3, [r3, #4]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	899b      	ldrh	r3, [r3, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <get_driver+0x5c>)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <get_driver+0x36>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <get_driver+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	79fa      	ldrb	r2, [r7, #7]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d208      	bcs.n	8003cb0 <get_driver+0x2c>
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <get_driver+0x64>)
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	79fa      	ldrb	r2, [r7, #7]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	e010      	b.n	8003cd2 <get_driver+0x4e>
    drvid -= _app_driver_count;
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <get_driver+0x60>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	79fa      	ldrb	r2, [r7, #7]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	71fb      	strb	r3, [r7, #7]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003cba:	79fb      	ldrb	r3, [r7, #7]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d807      	bhi.n	8003cd0 <get_driver+0x4c>
 8003cc0:	79fa      	ldrb	r2, [r7, #7]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <get_driver+0x68>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	e000      	b.n	8003cd2 <get_driver+0x4e>

  return NULL;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	20002c3c 	.word	0x20002c3c
 8003ce8:	20002c38 	.word	0x20002c38
 8003cec:	0800b5ec 	.word	0x0800b5ec

08003cf0 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <tud_mounted+0x20>)
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20002c0c 	.word	0x20002c0c

08003d14 <tud_suspended>:

bool tud_suspended(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <tud_suspended+0x24>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20002c0c 	.word	0x20002c0c

08003d3c <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <tud_inited+0x1c>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	bf14      	ite	ne
 8003d48:	2301      	movne	r3, #1
 8003d4a:	2300      	moveq	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20002020 	.word	0x20002020

08003d5c <tud_init>:

bool tud_init (uint8_t rhport)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8003d66:	f7ff ffe9 	bl	8003d3c <tud_inited>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <tud_init+0x18>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e054      	b.n	8003e1e <tud_init+0xc2>

  TU_LOG(USBD_DBG, "USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(USBD_DBG, sizeof(usbd_device_t));

  tu_varclr(&_usbd_dev);
 8003d74:	222b      	movs	r2, #43	; 0x2b
 8003d76:	2100      	movs	r1, #0
 8003d78:	482b      	ldr	r0, [pc, #172]	; (8003e28 <tud_init+0xcc>)
 8003d7a:	f007 fb95 	bl	800b4a8 <memset>
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <tud_init+0xd0>)
 8003d80:	60fb      	str	r3, [r7, #12]
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff4b 	bl	8003c22 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8003d8e:	4a28      	ldr	r2, [pc, #160]	; (8003e30 <tud_init+0xd4>)
 8003d90:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8003d92:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <tud_init+0xd4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <tud_init+0x54>
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <tud_init+0xd8>)
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d000      	beq.n	8003dac <tud_init+0x50>
 8003daa:	be00      	bkpt	0x0000
 8003dac:	2300      	movs	r3, #0
 8003dae:	e036      	b.n	8003e1e <tud_init+0xc2>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8003db0:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <tud_init+0xdc>)
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8003db6:	4821      	ldr	r0, [pc, #132]	; (8003e3c <tud_init+0xe0>)
 8003db8:	f3af 8000 	nop.w
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <tud_init+0xe4>)
 8003dc0:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e018      	b.n	8003dfa <tud_init+0x9e>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8003dc8:	7ffb      	ldrb	r3, [r7, #31]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff5a 	bl	8003c84 <get_driver>
 8003dd0:	61b8      	str	r0, [r7, #24]
    TU_ASSERT(driver);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <tud_init+0x92>
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <tud_init+0xd8>)
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d000      	beq.n	8003dea <tud_init+0x8e>
 8003de8:	be00      	bkpt	0x0000
 8003dea:	2300      	movs	r3, #0
 8003dec:	e017      	b.n	8003e1e <tud_init+0xc2>
    TU_LOG(USBD_DBG, "%s init\r\n", driver->name);
    driver->init();
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	3301      	adds	r3, #1
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <tud_init+0xe0>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	dae0      	bge.n	8003dc8 <tud_init+0x6c>
  }

  _usbd_rhport = rhport;
 8003e06:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <tud_init+0xe8>)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 ff52 	bl	8005cb8 <dcd_init>
  dcd_int_enable(rhport);
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 ffb6 	bl	8005d88 <dcd_int_enable>

  return true;
 8003e1c:	2301      	movs	r3, #1
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20002c0c 	.word	0x20002c0c
 8003e2c:	20002024 	.word	0x20002024
 8003e30:	20002d00 	.word	0x20002d00
 8003e34:	e000edf0 	.word	0xe000edf0
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	20002c3c 	.word	0x20002c3c
 8003e40:	20002c38 	.word	0x20002c38
 8003e44:	20002020 	.word	0x20002020

08003e48 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]
 8003e56:	e019      	b.n	8003e8c <configuration_reset+0x44>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff12 	bl	8003c84 <get_driver>
 8003e60:	6138      	str	r0, [r7, #16]
    TU_ASSERT(driver, );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <configuration_reset+0x34>
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <configuration_reset+0x78>)
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01f      	beq.n	8003eb8 <configuration_reset+0x70>
 8003e78:	be00      	bkpt	0x0000
 8003e7a:	e01d      	b.n	8003eb8 <configuration_reset+0x70>
    driver->reset(rhport);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	79fa      	ldrb	r2, [r7, #7]
 8003e82:	4610      	mov	r0, r2
 8003e84:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <configuration_reset+0x7c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dadf      	bge.n	8003e58 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8003e98:	222b      	movs	r2, #43	; 0x2b
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <configuration_reset+0x80>)
 8003e9e:	f007 fb03 	bl	800b4a8 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	21ff      	movs	r1, #255	; 0xff
 8003ea6:	4809      	ldr	r0, [pc, #36]	; (8003ecc <configuration_reset+0x84>)
 8003ea8:	f007 fafe 	bl	800b4a8 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8003eac:	220c      	movs	r2, #12
 8003eae:	21ff      	movs	r1, #255	; 0xff
 8003eb0:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <configuration_reset+0x88>)
 8003eb2:	f007 faf9 	bl	800b4a8 <memset>
 8003eb6:	e000      	b.n	8003eba <configuration_reset+0x72>
    TU_ASSERT(driver, );
 8003eb8:	bf00      	nop
}
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	e000edf0 	.word	0xe000edf0
 8003ec4:	20002c3c 	.word	0x20002c3c
 8003ec8:	20002c0c 	.word	0x20002c0c
 8003ecc:	20002c0f 	.word	0x20002c0f
 8003ed0:	20002c1f 	.word	0x20002c1f

08003ed4 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ffb1 	bl	8003e48 <configuration_reset>
  usbd_control_reset();
 8003ee6:	f001 fb3f 	bl	8005568 <usbd_control_reset>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b091      	sub	sp, #68	; 0x44
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 8003f00:	f002 ff50 	bl	8006da4 <tusb_inited>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f083 0301 	eor.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 812a 	bne.w	8004166 <tud_task_ext+0x272>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8003f12:	4b99      	ldr	r3, [pc, #612]	; (8004178 <tud_task_ext+0x284>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f18:	f107 0308 	add.w	r3, r7, #8
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	4798      	blx	r3
}
 8003f2e:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec)
{
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	3304      	adds	r3, #4
 8003f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fdcd 	bl	8003ad6 <tu_fifo_read>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2001      	movs	r0, #1
 8003f4a:	4798      	blx	r3
}
 8003f4c:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8003f4e:	7ffb      	ldrb	r3, [r7, #31]
 8003f50:	f083 0301 	eor.w	r3, r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8107 	bne.w	800416a <tud_task_ext+0x276>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG(USBD_DBG, "\r\n"); // extra line for setup
    TU_LOG(USBD_DBG, "USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8003f5c:	7a7b      	ldrb	r3, [r7, #9]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	f200 80ea 	bhi.w	800413a <tud_task_ext+0x246>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <tud_task_ext+0x78>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	0800413b 	.word	0x0800413b
 8003f78:	080040e1 	.word	0x080040e1
 8003f7c:	08004111 	.word	0x08004111
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08004021 	.word	0x08004021
 8003f88:	0800412b 	.word	0x0800412b
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG(USBD_DBG, ": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8003f8c:	7a3b      	ldrb	r3, [r7, #8]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ffa0 	bl	8003ed4 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8003f94:	7b3a      	ldrb	r2, [r7, #12]
 8003f96:	4b79      	ldr	r3, [pc, #484]	; (800417c <tud_task_ext+0x288>)
 8003f98:	709a      	strb	r2, [r3, #2]
      break;
 8003f9a:	e0e3      	b.n	8004164 <tud_task_ext+0x270>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG(USBD_DBG, "\r\n");
        usbd_reset(event.rhport);
 8003f9c:	7a3b      	ldrb	r3, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff98 	bl	8003ed4 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8003fa4:	4b76      	ldr	r3, [pc, #472]	; (8004180 <tud_task_ext+0x28c>)
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80d1 	beq.w	800414e <tud_task_ext+0x25a>
 8003fac:	f7fc fdfe 	bl	8000bac <tud_umount_cb>
      break;
 8003fb0:	e0cd      	b.n	800414e <tud_task_ext+0x25a>
        TU_LOG_VAR(USBD_DBG, &event.setup_received);
        TU_LOG(USBD_DBG, "\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8003fb2:	4a72      	ldr	r2, [pc, #456]	; (800417c <tud_task_ext+0x288>)
 8003fb4:	7813      	ldrb	r3, [r2, #0]
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8003fbc:	4a6f      	ldr	r2, [pc, #444]	; (800417c <tud_task_ext+0x288>)
 8003fbe:	7fd3      	ldrb	r3, [r2, #31]
 8003fc0:	f36f 0300 	bfc	r3, #0, #1
 8003fc4:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003fc6:	4a6d      	ldr	r2, [pc, #436]	; (800417c <tud_task_ext+0x288>)
 8003fc8:	7fd3      	ldrb	r3, [r2, #31]
 8003fca:	f36f 0382 	bfc	r3, #2, #1
 8003fce:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8003fd0:	4a6a      	ldr	r2, [pc, #424]	; (800417c <tud_task_ext+0x288>)
 8003fd2:	f892 3020 	ldrb.w	r3, [r2, #32]
 8003fd6:	f36f 0300 	bfc	r3, #0, #1
 8003fda:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8003fde:	4a67      	ldr	r2, [pc, #412]	; (800417c <tud_task_ext+0x288>)
 8003fe0:	f892 3020 	ldrb.w	r3, [r2, #32]
 8003fe4:	f36f 0382 	bfc	r3, #2, #1
 8003fe8:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003fec:	7a3a      	ldrb	r2, [r7, #8]
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f000 f8e2 	bl	80041c0 <process_control_request>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f083 0301 	eor.w	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a4 	beq.w	8004152 <tud_task_ext+0x25e>
        {
          TU_LOG(USBD_DBG, "  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 800400a:	7a3b      	ldrb	r3, [r7, #8]
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f002 f9ca 	bl	80063a8 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8004014:	7a3b      	ldrb	r3, [r7, #8]
 8004016:	2180      	movs	r1, #128	; 0x80
 8004018:	4618      	mov	r0, r3
 800401a:	f002 f9c5 	bl	80063a8 <dcd_edpt_stall>
        }
      break;
 800401e:	e098      	b.n	8004152 <tud_task_ext+0x25e>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004020:	7b3b      	ldrb	r3, [r7, #12]
 8004022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800402a:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800402c:	7dbb      	ldrb	r3, [r7, #22]
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8004034:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800403c:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	09db      	lsrs	r3, r3, #7
 8004042:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8004044:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        TU_LOG(USBD_DBG, "on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8004048:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800404c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004050:	494a      	ldr	r1, [pc, #296]	; (800417c <tud_task_ext+0x288>)
 8004052:	0052      	lsls	r2, r2, #1
 8004054:	440a      	add	r2, r1
 8004056:	4413      	add	r3, r2
 8004058:	f103 0218 	add.w	r2, r3, #24
 800405c:	79d3      	ldrb	r3, [r2, #7]
 800405e:	f36f 0300 	bfc	r3, #0, #1
 8004062:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8004064:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004068:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800406c:	4943      	ldr	r1, [pc, #268]	; (800417c <tud_task_ext+0x288>)
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	440a      	add	r2, r1
 8004072:	4413      	add	r3, r2
 8004074:	f103 0218 	add.w	r2, r3, #24
 8004078:	79d3      	ldrb	r3, [r2, #7]
 800407a:	f36f 0382 	bfc	r3, #2, #1
 800407e:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8004080:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <tud_task_ext+0x1a4>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8004088:	7a38      	ldrb	r0, [r7, #8]
 800408a:	7b7a      	ldrb	r2, [r7, #13]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004092:	f001 fa9f 	bl	80055d4 <usbd_control_xfer_cb>

          TU_LOG(USBD_DBG, "  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8004096:	e065      	b.n	8004164 <tud_task_ext+0x270>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8004098:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800409c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80040a0:	4936      	ldr	r1, [pc, #216]	; (800417c <tud_task_ext+0x288>)
 80040a2:	0052      	lsls	r2, r2, #1
 80040a4:	440a      	add	r2, r1
 80040a6:	4413      	add	r3, r2
 80040a8:	3313      	adds	r3, #19
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fde9 	bl	8003c84 <get_driver>
 80040b2:	63b8      	str	r0, [r7, #56]	; 0x38
          TU_ASSERT(driver, );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <tud_task_ext+0x1da>
 80040ba:	4b32      	ldr	r3, [pc, #200]	; (8004184 <tud_task_ext+0x290>)
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d051      	beq.n	800416e <tud_task_ext+0x27a>
 80040ca:	be00      	bkpt	0x0000
 80040cc:	e04f      	b.n	800416e <tud_task_ext+0x27a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	691c      	ldr	r4, [r3, #16]
 80040d2:	7a38      	ldrb	r0, [r7, #8]
 80040d4:	7b7a      	ldrb	r2, [r7, #13]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80040dc:	47a0      	blx	r4
      break;
 80040de:	e041      	b.n	8004164 <tud_task_ext+0x270>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 80040e0:	4b26      	ldr	r3, [pc, #152]	; (800417c <tud_task_ext+0x288>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d033      	beq.n	8004156 <tud_task_ext+0x262>
        {
          TU_LOG(USBD_DBG, ": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <tud_task_ext+0x294>)
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d030      	beq.n	8004156 <tud_task_ext+0x262>
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <tud_task_ext+0x288>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fd5b 	bl	8000bc4 <tud_suspend_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 800410e:	e022      	b.n	8004156 <tud_task_ext+0x262>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <tud_task_ext+0x288>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01d      	beq.n	800415a <tud_task_ext+0x266>
        {
          TU_LOG(USBD_DBG, "\r\n");
          if (tud_resume_cb) tud_resume_cb();
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <tud_task_ext+0x298>)
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01a      	beq.n	800415a <tud_task_ext+0x266>
 8004124:	f7fc fd60 	bl	8000be8 <tud_resume_cb>
        }else
        {
          TU_LOG(USBD_DBG, " Skipped\r\n");
        }
      break;
 8004128:	e017      	b.n	800415a <tud_task_ext+0x266>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG(USBD_DBG, "\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <tud_task_ext+0x26a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
      break;
 8004138:	e011      	b.n	800415e <tud_task_ext+0x26a>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <tud_task_ext+0x290>)
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <tud_task_ext+0x26e>
 800414a:	be00      	bkpt	0x0000
      break;
 800414c:	e009      	b.n	8004162 <tud_task_ext+0x26e>
      break;
 800414e:	bf00      	nop
 8004150:	e6df      	b.n	8003f12 <tud_task_ext+0x1e>
      break;
 8004152:	bf00      	nop
 8004154:	e6dd      	b.n	8003f12 <tud_task_ext+0x1e>
      break;
 8004156:	bf00      	nop
 8004158:	e6db      	b.n	8003f12 <tud_task_ext+0x1e>
      break;
 800415a:	bf00      	nop
 800415c:	e6d9      	b.n	8003f12 <tud_task_ext+0x1e>
      break;
 800415e:	bf00      	nop
 8004160:	e6d7      	b.n	8003f12 <tud_task_ext+0x1e>
      break;
 8004162:	bf00      	nop
  {
 8004164:	e6d5      	b.n	8003f12 <tud_task_ext+0x1e>
  if ( !tusb_inited() ) return;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <tud_task_ext+0x27c>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <tud_task_ext+0x27c>
          TU_ASSERT(driver, );
 800416e:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8004170:	3744      	adds	r7, #68	; 0x44
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	20002d00 	.word	0x20002d00
 800417c:	20002c0c 	.word	0x20002c0c
 8004180:	08000bad 	.word	0x08000bad
 8004184:	e000edf0 	.word	0xe000edf0
 8004188:	08000bc5 	.word	0x08000bc5
 800418c:	08000be9 	.word	0x08000be9

08004190 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f9ec 	bl	8005580 <usbd_control_set_complete_callback>
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	7bf8      	ldrb	r0, [r7, #15]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	2101      	movs	r1, #1
 80041b2:	4798      	blx	r3
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b094      	sub	sp, #80	; 0x50
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f001 f9d7 	bl	8005580 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d10a      	bne.n	80041f6 <process_control_request+0x36>
 80041e0:	4ba4      	ldr	r3, [pc, #656]	; (8004474 <process_control_request+0x2b4>)
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d000      	beq.n	80041f2 <process_control_request+0x32>
 80041f0:	be00      	bkpt	0x0000
 80041f2:	2300      	movs	r3, #0
 80041f4:	e247      	b.n	8004686 <process_control_request+0x4c6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d10f      	bne.n	8004224 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8004204:	4b9c      	ldr	r3, [pc, #624]	; (8004478 <process_control_request+0x2b8>)
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <process_control_request+0x4e>
 800420a:	2300      	movs	r3, #0
 800420c:	e23b      	b.n	8004686 <process_control_request+0x4c6>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 800420e:	489a      	ldr	r0, [pc, #616]	; (8004478 <process_control_request+0x2b8>)
 8004210:	f001 f9b6 	bl	8005580 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f3af 8000 	nop.w
 8004220:	4603      	mov	r3, r0
 8004222:	e230      	b.n	8004686 <process_control_request+0x4c6>
    TU_LOG(USBD_DBG, "  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG(USBD_DBG, "\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	f000 8177 	beq.w	8004522 <process_control_request+0x362>
 8004234:	2b02      	cmp	r3, #2
 8004236:	f300 821a 	bgt.w	800466e <process_control_request+0x4ae>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <process_control_request+0x86>
 800423e:	2b01      	cmp	r3, #1
 8004240:	f000 811e 	beq.w	8004480 <process_control_request+0x2c0>
 8004244:	e213      	b.n	800466e <process_control_request+0x4ae>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d123      	bne.n	800429c <process_control_request+0xdc>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	889b      	ldrh	r3, [r3, #4]
 8004258:	b29b      	uxth	r3, r3
 800425a:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d901      	bls.n	8004270 <process_control_request+0xb0>
 800426c:	2300      	movs	r3, #0
 800426e:	e20a      	b.n	8004686 <process_control_request+0x4c6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004274:	4a81      	ldr	r2, [pc, #516]	; (800447c <process_control_request+0x2bc>)
 8004276:	4413      	add	r3, r2
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd02 	bl	8003c84 <get_driver>
 8004280:	6238      	str	r0, [r7, #32]
        TU_VERIFY(driver);
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <process_control_request+0xcc>
 8004288:	2300      	movs	r3, #0
 800428a:	e1fc      	b.n	8004686 <process_control_request+0x4c6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6a39      	ldr	r1, [r7, #32]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff7c 	bl	8004190 <invoke_class_control>
 8004298:	4603      	mov	r3, r0
 800429a:	e1f4      	b.n	8004686 <process_control_request+0x4c6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <process_control_request+0x100>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80042aa:	4b72      	ldr	r3, [pc, #456]	; (8004474 <process_control_request+0x2b4>)
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <process_control_request+0xfc>
 80042ba:	be00      	bkpt	0x0000
        return false;
 80042bc:	2300      	movs	r3, #0
 80042be:	e1e2      	b.n	8004686 <process_control_request+0x4c6>
      }

      switch ( p_request->bRequest )
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	f200 80c8 	bhi.w	800445a <process_control_request+0x29a>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <process_control_request+0x110>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	08004425 	.word	0x08004425
 80042d4:	08004401 	.word	0x08004401
 80042d8:	0800445b 	.word	0x0800445b
 80042dc:	080043dd 	.word	0x080043dd
 80042e0:	0800445b 	.word	0x0800445b
 80042e4:	080042f9 	.word	0x080042f9
 80042e8:	080043c3 	.word	0x080043c3
 80042ec:	0800445b 	.word	0x0800445b
 80042f0:	0800431d 	.word	0x0800431d
 80042f4:	08004335 	.word	0x08004335
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80042f8:	6838      	ldr	r0, [r7, #0]
 80042fa:	f001 f951 	bl	80055a0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	885b      	ldrh	r3, [r3, #2]
 8004302:	b29b      	uxth	r3, r3
 8004304:	b2da      	uxtb	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fd54 	bl	8005db8 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8004310:	4a5a      	ldr	r2, [pc, #360]	; (800447c <process_control_request+0x2bc>)
 8004312:	7813      	ldrb	r3, [r2, #0]
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	7013      	strb	r3, [r2, #0]
        break;
 800431a:	e0aa      	b.n	8004472 <process_control_request+0x2b2>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <process_control_request+0x2bc>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	73fb      	strb	r3, [r7, #15]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8004324:	f107 020f 	add.w	r2, r7, #15
 8004328:	79f8      	ldrb	r0, [r7, #7]
 800432a:	2301      	movs	r3, #1
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	f001 f8ab 	bl	8005488 <tud_control_xfer>
        }
        break;
 8004332:	e09e      	b.n	8004472 <process_control_request+0x2b2>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	885b      	ldrh	r3, [r3, #2]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 800433e:	4b4f      	ldr	r3, [pc, #316]	; (800447c <process_control_request+0x2bc>)
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004348:	429a      	cmp	r2, r3
 800434a:	d030      	beq.n	80043ae <process_control_request+0x1ee>
          {
            if ( _usbd_dev.cfg_num )
 800434c:	4b4b      	ldr	r3, [pc, #300]	; (800447c <process_control_request+0x2bc>)
 800434e:	785b      	ldrb	r3, [r3, #1]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00f      	beq.n	8004376 <process_control_request+0x1b6>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fe89 	bl	8006070 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800435e:	4b47      	ldr	r3, [pc, #284]	; (800447c <process_control_request+0x2bc>)
 8004360:	789b      	ldrb	r3, [r3, #2]
 8004362:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
              configuration_reset(rhport);
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fd6d 	bl	8003e48 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800436e:	4a43      	ldr	r2, [pc, #268]	; (800447c <process_control_request+0x2bc>)
 8004370:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004374:	7093      	strb	r3, [r2, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8004376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <process_control_request+0x1ee>
 800437e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f986 	bl	8004698 <process_set_config>
 800438c:	4603      	mov	r3, r0
 800438e:	f083 0301 	eor.w	r3, r3, #1
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <process_control_request+0x1ee>
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <process_control_request+0x2b4>)
 800439a:	633b      	str	r3, [r7, #48]	; 0x30
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d000      	beq.n	80043aa <process_control_request+0x1ea>
 80043a8:	be00      	bkpt	0x0000
 80043aa:	2300      	movs	r3, #0
 80043ac:	e16b      	b.n	8004686 <process_control_request+0x4c6>
          }

          _usbd_dev.cfg_num = cfg_num;
 80043ae:	4a33      	ldr	r2, [pc, #204]	; (800447c <process_control_request+0x2bc>)
 80043b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043b4:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 f806 	bl	80053cc <tud_control_status>
        }
        break;
 80043c0:	e057      	b.n	8004472 <process_control_request+0x2b2>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fa82 	bl	80048d0 <process_get_descriptor>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04b      	beq.n	8004470 <process_control_request+0x2b0>
 80043d8:	2300      	movs	r3, #0
 80043da:	e154      	b.n	8004686 <process_control_request+0x4c6>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	885b      	ldrh	r3, [r3, #2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <process_control_request+0x22a>
 80043e6:	2300      	movs	r3, #0
 80043e8:	e14d      	b.n	8004686 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80043ea:	4a24      	ldr	r2, [pc, #144]	; (800447c <process_control_request+0x2bc>)
 80043ec:	7813      	ldrb	r3, [r2, #0]
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 ffe7 	bl	80053cc <tud_control_status>
        break;
 80043fe:	e038      	b.n	8004472 <process_control_request+0x2b2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	885b      	ldrh	r3, [r3, #2]
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <process_control_request+0x24e>
 800440a:	2300      	movs	r3, #0
 800440c:	e13b      	b.n	8004686 <process_control_request+0x4c6>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800440e:	4a1b      	ldr	r2, [pc, #108]	; (800447c <process_control_request+0x2bc>)
 8004410:	7813      	ldrb	r3, [r2, #0]
 8004412:	f36f 03c3 	bfc	r3, #3, #1
 8004416:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 ffd5 	bl	80053cc <tud_control_status>
        break;
 8004422:	e026      	b.n	8004472 <process_control_request+0x2b2>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8004424:	4b15      	ldr	r3, [pc, #84]	; (800447c <process_control_request+0x2bc>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	b2db      	uxtb	r3, r3
 800442c:	b29b      	uxth	r3, r3
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <process_control_request+0x2bc>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	b2db      	uxtb	r3, r3
 800443c:	b29b      	uxth	r3, r3
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	b29b      	uxth	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	81bb      	strh	r3, [r7, #12]
          tud_control_xfer(rhport, p_request, &status, 2);
 800444a:	f107 020c 	add.w	r2, r7, #12
 800444e:	79f8      	ldrb	r0, [r7, #7]
 8004450:	2302      	movs	r3, #2
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	f001 f818 	bl	8005488 <tud_control_xfer>
        }
        break;
 8004458:	e00b      	b.n	8004472 <process_control_request+0x2b2>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <process_control_request+0x2b4>)
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d000      	beq.n	800446c <process_control_request+0x2ac>
 800446a:	be00      	bkpt	0x0000
 800446c:	2300      	movs	r3, #0
 800446e:	e10a      	b.n	8004686 <process_control_request+0x4c6>
        break;
 8004470:	bf00      	nop
      }
    break;
 8004472:	e107      	b.n	8004684 <process_control_request+0x4c4>
 8004474:	e000edf0 	.word	0xe000edf0
 8004478:	00000000 	.word	0x00000000
 800447c:	20002c0c 	.word	0x20002c0c

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	889b      	ldrh	r3, [r3, #4]
 8004484:	b29b      	uxth	r3, r3
 8004486:	82bb      	strh	r3, [r7, #20]
 8004488:	8abb      	ldrh	r3, [r7, #20]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004490:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004494:	2b0f      	cmp	r3, #15
 8004496:	d901      	bls.n	800449c <process_control_request+0x2dc>
 8004498:	2300      	movs	r3, #0
 800449a:	e0f4      	b.n	8004686 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800449c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044a0:	4a7b      	ldr	r2, [pc, #492]	; (8004690 <process_control_request+0x4d0>)
 80044a2:	4413      	add	r3, r2
 80044a4:	78db      	ldrb	r3, [r3, #3]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fbec 	bl	8003c84 <get_driver>
 80044ac:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(driver);
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <process_control_request+0x2f8>
 80044b4:	2300      	movs	r3, #0
 80044b6:	e0e6      	b.n	8004686 <process_control_request+0x4c6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fe66 	bl	8004190 <invoke_class_control>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d026      	beq.n	800451e <process_control_request+0x35e>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <process_control_request+0x322>
 80044de:	2300      	movs	r3, #0
 80044e0:	e0d1      	b.n	8004686 <process_control_request+0x4c6>

        switch(p_request->bRequest)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	3b0a      	subs	r3, #10
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d816      	bhi.n	800451a <process_control_request+0x35a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f001 f847 	bl	8005580 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	2b0a      	cmp	r3, #10
 80044f8:	d109      	bne.n	800450e <process_control_request+0x34e>
            {
              uint8_t alternate = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	72fb      	strb	r3, [r7, #11]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80044fe:	f107 020b 	add.w	r2, r7, #11
 8004502:	79f8      	ldrb	r0, [r7, #7]
 8004504:	2301      	movs	r3, #1
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	f000 ffbe 	bl	8005488 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 800450c:	e008      	b.n	8004520 <process_control_request+0x360>
              tud_control_status(rhport, p_request);
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff5a 	bl	80053cc <tud_control_status>
          break;
 8004518:	e002      	b.n	8004520 <process_control_request+0x360>

          default: return false;
 800451a:	2300      	movs	r3, #0
 800451c:	e0b3      	b.n	8004686 <process_control_request+0x4c6>
        }
      }
 800451e:	bf00      	nop
    }
    break;
 8004520:	e0b0      	b.n	8004684 <process_control_request+0x4c4>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	889b      	ldrh	r3, [r3, #4]
 8004526:	b29b      	uxth	r3, r3
 8004528:	823b      	strh	r3, [r7, #16]
 800452a:	8a3b      	ldrh	r3, [r7, #16]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004532:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004536:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004538:	7cbb      	ldrb	r3, [r7, #18]
 800453a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453e:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8004540:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8004544:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004548:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	09db      	lsrs	r3, r3, #7
 800454e:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8004550:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8004554:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004558:	2b05      	cmp	r3, #5
 800455a:	d90a      	bls.n	8004572 <process_control_request+0x3b2>
 800455c:	4b4d      	ldr	r3, [pc, #308]	; (8004694 <process_control_request+0x4d4>)
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
 8004560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d000      	beq.n	800456e <process_control_request+0x3ae>
 800456c:	be00      	bkpt	0x0000
 800456e:	2300      	movs	r3, #0
 8004570:	e089      	b.n	8004686 <process_control_request+0x4c6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004572:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8004576:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800457a:	4945      	ldr	r1, [pc, #276]	; (8004690 <process_control_request+0x4d0>)
 800457c:	0052      	lsls	r2, r2, #1
 800457e:	440a      	add	r2, r1
 8004580:	4413      	add	r3, r2
 8004582:	3313      	adds	r3, #19
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fb7c 	bl	8003c84 <get_driver>
 800458c:	64b8      	str	r0, [r7, #72]	; 0x48

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <process_control_request+0x3f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 800459c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <process_control_request+0x3e6>
 80045a2:	2300      	movs	r3, #0
 80045a4:	e06f      	b.n	8004686 <process_control_request+0x4c6>
        return invoke_class_control(rhport, driver, p_request);
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fdef 	bl	8004190 <invoke_class_control>
 80045b2:	4603      	mov	r3, r0
 80045b4:	e067      	b.n	8004686 <process_control_request+0x4c6>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d018      	beq.n	80045f0 <process_control_request+0x430>
 80045be:	2b03      	cmp	r3, #3
 80045c0:	dc48      	bgt.n	8004654 <process_control_request+0x494>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <process_control_request+0x40c>
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d012      	beq.n	80045f0 <process_control_request+0x430>
 80045ca:	e043      	b.n	8004654 <process_control_request+0x494>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80045cc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 feaf 	bl	8005338 <usbd_edpt_stalled>
 80045da:	4603      	mov	r3, r0
 80045dc:	b29b      	uxth	r3, r3
 80045de:	813b      	strh	r3, [r7, #8]
            tud_control_xfer(rhport, p_request, &status, 2);
 80045e0:	f107 0208 	add.w	r2, r7, #8
 80045e4:	79f8      	ldrb	r0, [r7, #7]
 80045e6:	2302      	movs	r3, #2
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	f000 ff4d 	bl	8005488 <tud_control_xfer>
          }
          break;
 80045ee:	e03d      	b.n	800466c <process_control_request+0x4ac>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	885b      	ldrh	r3, [r3, #2]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d112      	bne.n	8004620 <process_control_request+0x460>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <process_control_request+0x452>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8004602:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fe48 	bl	80052a0 <usbd_edpt_clear_stall>
 8004610:	e006      	b.n	8004620 <process_control_request+0x460>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8004612:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fdf4 	bl	8005208 <usbd_edpt_stall>
              }
            }

            if (driver)
 8004620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d021      	beq.n	800466a <process_control_request+0x4aa>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fdaf 	bl	8004190 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8004632:	2000      	movs	r0, #0
 8004634:	f000 ffa4 	bl	8005580 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <process_control_request+0x4d0>)
 800463a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800463e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d110      	bne.n	800466a <process_control_request+0x4aa>
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	6839      	ldr	r1, [r7, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 febd 	bl	80053cc <tud_control_status>
            }
          }
          break;
 8004652:	e00a      	b.n	800466a <process_control_request+0x4aa>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <process_control_request+0x4d4>)
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
 8004658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d000      	beq.n	8004666 <process_control_request+0x4a6>
 8004664:	be00      	bkpt	0x0000
 8004666:	2300      	movs	r3, #0
 8004668:	e00d      	b.n	8004686 <process_control_request+0x4c6>
          break;
 800466a:	bf00      	nop
        }
      }
    }
    break;
 800466c:	e00a      	b.n	8004684 <process_control_request+0x4c4>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <process_control_request+0x4d4>)
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d000      	beq.n	8004680 <process_control_request+0x4c0>
 800467e:	be00      	bkpt	0x0000
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <process_control_request+0x4c6>
  }

  return true;
 8004684:	2301      	movs	r3, #1
}
 8004686:	4618      	mov	r0, r3
 8004688:	3750      	adds	r7, #80	; 0x50
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20002c0c 	.word	0x20002c0c
 8004694:	e000edf0 	.word	0xe000edf0

08004698 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b094      	sub	sp, #80	; 0x50
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	460a      	mov	r2, r1
 80046a2:	71fb      	strb	r3, [r7, #7]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80046a8:	79bb      	ldrb	r3, [r7, #6]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc ff1c 	bl	80014ec <tud_descriptor_configuration_cb>
 80046b4:	6478      	str	r0, [r7, #68]	; 0x44
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80046b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <process_set_config+0x2c>
 80046bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d00a      	beq.n	80046da <process_set_config+0x42>
 80046c4:	4b7c      	ldr	r3, [pc, #496]	; (80048b8 <process_set_config+0x220>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d000      	beq.n	80046d6 <process_set_config+0x3e>
 80046d4:	be00      	bkpt	0x0000
 80046d6:	2300      	movs	r3, #0
 80046d8:	e0e9      	b.n	80048ae <process_set_config+0x216>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80046da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046dc:	79db      	ldrb	r3, [r3, #7]
 80046de:	115b      	asrs	r3, r3, #5
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	b2d9      	uxtb	r1, r3
 80046e6:	4a75      	ldr	r2, [pc, #468]	; (80048bc <process_set_config+0x224>)
 80046e8:	7813      	ldrb	r3, [r2, #0]
 80046ea:	f361 1304 	bfi	r3, r1, #4, #1
 80046ee:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	79db      	ldrb	r3, [r3, #7]
 80046f4:	119b      	asrs	r3, r3, #6
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	b2d9      	uxtb	r1, r3
 80046fc:	4a6f      	ldr	r2, [pc, #444]	; (80048bc <process_set_config+0x224>)
 80046fe:	7813      	ldrb	r3, [r2, #0]
 8004700:	f361 1345 	bfi	r3, r1, #5, #1
 8004704:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	3309      	adds	r3, #9
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	885b      	ldrh	r3, [r3, #2]
 8004710:	b29b      	uxth	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004716:	4413      	add	r3, r2
 8004718:	643b      	str	r3, [r7, #64]	; 0x40

  while( p_desc < desc_end )
 800471a:	e0bd      	b.n	8004898 <process_set_config+0x200>
  {
    uint8_t assoc_itf_count = 1;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	617b      	str	r3, [r7, #20]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800472c:	2b0b      	cmp	r3, #11
 800472e:	d10f      	bne.n	8004750 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
      assoc_itf_count = desc_iad->bInterfaceCount;
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	78db      	ldrb	r3, [r3, #3]
 8004738:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004752:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3301      	adds	r3, #1
 8004758:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800475a:	2b04      	cmp	r3, #4
 800475c:	d00a      	beq.n	8004774 <process_set_config+0xdc>
 800475e:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <process_set_config+0x220>)
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d000      	beq.n	8004770 <process_set_config+0xd8>
 800476e:	be00      	bkpt	0x0000
 8004770:	2300      	movs	r3, #0
 8004772:	e09c      	b.n	80048ae <process_set_config+0x216>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8004778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004780:	2300      	movs	r3, #0
 8004782:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8004786:	e06e      	b.n	8004866 <process_set_config+0x1ce>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8004788:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fa79 	bl	8003c84 <get_driver>
 8004792:	6338      	str	r0, [r7, #48]	; 0x30
      TU_ASSERT(driver);
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <process_set_config+0x118>
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <process_set_config+0x220>)
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d000      	beq.n	80047ac <process_set_config+0x114>
 80047aa:	be00      	bkpt	0x0000
 80047ac:	2300      	movs	r3, #0
 80047ae:	e07e      	b.n	80048ae <process_set_config+0x216>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047b6:	79f8      	ldrb	r0, [r7, #7]
 80047b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ba:	4798      	blx	r3
 80047bc:	4603      	mov	r3, r0
 80047be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80047c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d94a      	bls.n	800485c <process_set_config+0x1c4>
 80047c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80047c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d846      	bhi.n	800485c <process_set_config+0x1c4>
        // Open successfully
        TU_LOG(USBD_DBG, "  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80047ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <process_set_config+0x14e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	4a39      	ldr	r2, [pc, #228]	; (80048c0 <process_set_config+0x228>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d102      	bne.n	80047e6 <process_set_config+0x14e>
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80047ec:	e024      	b.n	8004838 <process_set_config+0x1a0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	789a      	ldrb	r2, [r3, #2]
 80047f2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80047f6:	4413      	add	r3, r2
 80047f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80047fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004800:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <process_set_config+0x224>)
 8004802:	4413      	add	r3, r2
 8004804:	78db      	ldrb	r3, [r3, #3]
 8004806:	2bff      	cmp	r3, #255	; 0xff
 8004808:	d00a      	beq.n	8004820 <process_set_config+0x188>
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <process_set_config+0x220>)
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d000      	beq.n	800481c <process_set_config+0x184>
 800481a:	be00      	bkpt	0x0000
 800481c:	2300      	movs	r3, #0
 800481e:	e046      	b.n	80048ae <process_set_config+0x216>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8004820:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <process_set_config+0x224>)
 8004826:	4413      	add	r3, r2
 8004828:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 800482c:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800482e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004832:	3301      	adds	r3, #1
 8004834:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8004838:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800483c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004840:	429a      	cmp	r2, r3
 8004842:	d3d4      	bcc.n	80047ee <process_set_config+0x156>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8004844:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800484a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800484c:	481d      	ldr	r0, [pc, #116]	; (80048c4 <process_set_config+0x22c>)
 800484e:	f002 fb93 	bl	8006f78 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8004852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004856:	4413      	add	r3, r2
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c

        break; // exit driver find loop
 800485a:	e00b      	b.n	8004874 <process_set_config+0x1dc>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800485c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004860:	3301      	adds	r3, #1
 8004862:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <process_set_config+0x230>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004870:	429a      	cmp	r2, r3
 8004872:	da89      	bge.n	8004788 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <process_set_config+0x230>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800487e:	429a      	cmp	r2, r3
 8004880:	da0a      	bge.n	8004898 <process_set_config+0x200>
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <process_set_config+0x220>)
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d000      	beq.n	8004894 <process_set_config+0x1fc>
 8004892:	be00      	bkpt	0x0000
 8004894:	2300      	movs	r3, #0
 8004896:	e00a      	b.n	80048ae <process_set_config+0x216>
  while( p_desc < desc_end )
 8004898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800489a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489c:	429a      	cmp	r2, r3
 800489e:	f4ff af3d 	bcc.w	800471c <process_set_config+0x84>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <process_set_config+0x234>)
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <process_set_config+0x214>
 80048a8:	f7fc f972 	bl	8000b90 <tud_mount_cb>

  return true;
 80048ac:	2301      	movs	r3, #1
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3750      	adds	r7, #80	; 0x50
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000edf0 	.word	0xe000edf0
 80048bc:	20002c0c 	.word	0x20002c0c
 80048c0:	080019ad 	.word	0x080019ad
 80048c4:	20002c1f 	.word	0x20002c1f
 80048c8:	20002c3c 	.word	0x20002c3c
 80048cc:	08000b91 	.word	0x08000b91

080048d0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b094      	sub	sp, #80	; 0x50
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	885b      	ldrh	r3, [r3, #2]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80048e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	885b      	ldrh	r3, [r3, #2]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80048f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8004900:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004904:	3b01      	subs	r3, #1
 8004906:	2b0e      	cmp	r3, #14
 8004908:	f200 80bc 	bhi.w	8004a84 <process_get_descriptor+0x1b4>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <process_get_descriptor+0x44>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004951 	.word	0x08004951
 8004918:	080049b5 	.word	0x080049b5
 800491c:	08004a1d 	.word	0x08004a1d
 8004920:	08004a85 	.word	0x08004a85
 8004924:	08004a85 	.word	0x08004a85
 8004928:	08004a53 	.word	0x08004a53
 800492c:	080049b5 	.word	0x080049b5
 8004930:	08004a85 	.word	0x08004a85
 8004934:	08004a85 	.word	0x08004a85
 8004938:	08004a85 	.word	0x08004a85
 800493c:	08004a85 	.word	0x08004a85
 8004940:	08004a85 	.word	0x08004a85
 8004944:	08004a85 	.word	0x08004a85
 8004948:	08004a85 	.word	0x08004a85
 800494c:	08004967 	.word	0x08004967
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8004950:	f7fc fdc2 	bl	80014d8 <tud_descriptor_device_cb>
 8004954:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8004956:	79f8      	ldrb	r0, [r7, #7]
 8004958:	2312      	movs	r3, #18
 800495a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	f000 fd93 	bl	8005488 <tud_control_xfer>
 8004962:	4603      	mov	r3, r0
 8004964:	e08f      	b.n	8004a86 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG(USBD_DBG, " BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <process_get_descriptor+0x1c0>)
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <process_get_descriptor+0xa0>
 800496c:	2300      	movs	r3, #0
 800496e:	e08a      	b.n	8004a86 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8004970:	f3af 8000 	nop.w
 8004974:	4603      	mov	r3, r0
 8004976:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <process_get_descriptor+0xc4>
 800497e:	4b45      	ldr	r3, [pc, #276]	; (8004a94 <process_get_descriptor+0x1c4>)
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d000      	beq.n	8004990 <process_get_descriptor+0xc0>
 800498e:	be00      	bkpt	0x0000
 8004990:	2300      	movs	r3, #0
 8004992:	e078      	b.n	8004a86 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8004994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004996:	3302      	adds	r3, #2
 8004998:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16  (const void* mem) { return *((uint16_t const *) mem); }
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80049a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049a8:	79f8      	ldrb	r0, [r7, #7]
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	f000 fd6c 	bl	8005488 <tud_control_xfer>
 80049b0:	4603      	mov	r3, r0
 80049b2:	e068      	b.n	8004a86 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 80049b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d107      	bne.n	80049cc <process_get_descriptor+0xfc>
      {
        TU_LOG(USBD_DBG, " Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80049bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc fd93 	bl	80014ec <tud_descriptor_configuration_cb>
 80049c6:	4603      	mov	r3, r0
 80049c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ca:	e00b      	b.n	80049e4 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG(USBD_DBG, " Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 80049cc:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <process_get_descriptor+0x1c8>)
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <process_get_descriptor+0x106>
 80049d2:	2300      	movs	r3, #0
 80049d4:	e057      	b.n	8004a86 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80049d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80049da:	4618      	mov	r0, r3
 80049dc:	f3af 8000 	nop.w
 80049e0:	4603      	mov	r3, r0
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 80049e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10a      	bne.n	8004a00 <process_get_descriptor+0x130>
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <process_get_descriptor+0x1c4>)
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d000      	beq.n	80049fc <process_get_descriptor+0x12c>
 80049fa:	be00      	bkpt	0x0000
 80049fc:	2300      	movs	r3, #0
 80049fe:	e042      	b.n	8004a86 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8004a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a02:	3302      	adds	r3, #2
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8004a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a0e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a10:	79f8      	ldrb	r0, [r7, #7]
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	f000 fd38 	bl	8005488 <tud_control_xfer>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	e034      	b.n	8004a86 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG(USBD_DBG, " String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	889b      	ldrh	r3, [r3, #4]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fc fd6d 	bl	8001508 <tud_descriptor_string_cb>
 8004a2e:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <process_get_descriptor+0x16a>
 8004a36:	2300      	movs	r3, #0
 8004a38:	e025      	b.n	8004a86 <process_get_descriptor+0x1b6>
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	79f8      	ldrb	r0, [r7, #7]
 8004a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	f000 fd1d 	bl	8005488 <tud_control_xfer>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	e019      	b.n	8004a86 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG(USBD_DBG, " Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <process_get_descriptor+0x1cc>)
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <process_get_descriptor+0x18c>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e014      	b.n	8004a86 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8004a5c:	f3af 8000 	nop.w
 8004a60:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <process_get_descriptor+0x19c>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e00c      	b.n	8004a86 <process_get_descriptor+0x1b6>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	79f8      	ldrb	r0, [r7, #7]
 8004a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	f000 fd04 	bl	8005488 <tud_control_xfer>
 8004a80:	4603      	mov	r3, r0
 8004a82:	e000      	b.n	8004a86 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8004a84:	2300      	movs	r3, #0
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3750      	adds	r7, #80	; 0x50
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	00000000 	.word	0x00000000
 8004a94:	e000edf0 	.word	0xe000edf0
	...

08004aa0 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b0aa      	sub	sp, #168	; 0xa8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  switch (event->event_id)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	f200 8198 	bhi.w	8004de8 <dcd_event_handler+0x348>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <dcd_event_handler+0x20>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004cd5 	.word	0x08004cd5
 8004ac8:	08004b91 	.word	0x08004b91
 8004acc:	08004c37 	.word	0x08004c37
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8004ad0:	4a82      	ldr	r2, [pc, #520]	; (8004cdc <dcd_event_handler+0x23c>)
 8004ad2:	7813      	ldrb	r3, [r2, #0]
 8004ad4:	f36f 0300 	bfc	r3, #0, #1
 8004ad8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8004ada:	4a80      	ldr	r2, [pc, #512]	; (8004cdc <dcd_event_handler+0x23c>)
 8004adc:	7813      	ldrb	r3, [r2, #0]
 8004ade:	f36f 0341 	bfc	r3, #1, #1
 8004ae2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8004ae4:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <dcd_event_handler+0x23c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <dcd_event_handler+0x23c>)
 8004aec:	7813      	ldrb	r3, [r2, #0]
 8004aee:	f36f 0382 	bfc	r3, #2, #1
 8004af2:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8004af4:	4b7a      	ldr	r3, [pc, #488]	; (8004ce0 <dcd_event_handler+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
 8004b08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004b0c:	f083 0301 	eor.w	r3, r3, #1
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <dcd_event_handler+0x8a>
 8004b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  qhdl->interrupt_set(false);
 8004b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2000      	movs	r0, #0
 8004b26:	4798      	blx	r3
}
 8004b28:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8004b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b2e:	3304      	adds	r3, #4
 8004b30:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f815 	bl	8003b64 <tu_fifo_write>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

  if (!in_isr) {
 8004b40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004b44:	f083 0301 	eor.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <dcd_event_handler+0xc2>
 8004b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  qhdl->interrupt_set(true);
 8004b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	4798      	blx	r3
}
 8004b60:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8004b62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004b66:	f083 0301 	eor.w	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <dcd_event_handler+0xe8>
 8004b70:	4b5c      	ldr	r3, [pc, #368]	; (8004ce4 <dcd_event_handler+0x244>)
 8004b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <dcd_event_handler+0xec>
 8004b84:	be00      	bkpt	0x0000
 8004b86:	e001      	b.n	8004b8c <dcd_event_handler+0xec>

  return success;
 8004b88:	bf00      	nop
 8004b8a:	e172      	b.n	8004e72 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8004b8c:	bf00      	nop
    break;
 8004b8e:	e170      	b.n	8004e72 <dcd_event_handler+0x3d2>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8004b90:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <dcd_event_handler+0x23c>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8164 	beq.w	8004e68 <dcd_event_handler+0x3c8>
      {
        _usbd_dev.suspended = 1;
 8004ba0:	4a4e      	ldr	r2, [pc, #312]	; (8004cdc <dcd_event_handler+0x23c>)
 8004ba2:	7813      	ldrb	r3, [r2, #0]
 8004ba4:	f043 0304 	orr.w	r3, r3, #4
 8004ba8:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8004baa:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <dcd_event_handler+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  if (!in_isr) {
 8004bbc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d007      	beq.n	8004bda <dcd_event_handler+0x13a>
 8004bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bce:	677b      	str	r3, [r7, #116]	; 0x74
  qhdl->interrupt_set(false);
 8004bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	4798      	blx	r3
}
 8004bd8:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8004bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bde:	3304      	adds	r3, #4
 8004be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe ffbe 	bl	8003b64 <tu_fifo_write>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if (!in_isr) {
 8004bee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004bf2:	f083 0301 	eor.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <dcd_event_handler+0x16c>
 8004bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c00:	66fb      	str	r3, [r7, #108]	; 0x6c
  qhdl->interrupt_set(true);
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2001      	movs	r0, #1
 8004c08:	4798      	blx	r3
}
 8004c0a:	bf00      	nop
  TU_ASSERT(success);
 8004c0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004c10:	f083 0301 	eor.w	r3, r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <dcd_event_handler+0x18e>
 8004c1a:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <dcd_event_handler+0x244>)
 8004c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <dcd_event_handler+0x192>
 8004c2a:	be00      	bkpt	0x0000
 8004c2c:	e001      	b.n	8004c32 <dcd_event_handler+0x192>
  return success;
 8004c2e:	bf00      	nop
 8004c30:	e11a      	b.n	8004e68 <dcd_event_handler+0x3c8>
  TU_ASSERT(success);
 8004c32:	bf00      	nop
      }
    break;
 8004c34:	e118      	b.n	8004e68 <dcd_event_handler+0x3c8>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8004c36:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <dcd_event_handler+0x23c>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8113 	beq.w	8004e6c <dcd_event_handler+0x3cc>
      {
        _usbd_dev.suspended = 0;
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <dcd_event_handler+0x23c>)
 8004c48:	7813      	ldrb	r3, [r2, #0]
 8004c4a:	f36f 0382 	bfc	r3, #2, #1
 8004c4e:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8004c50:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <dcd_event_handler+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	667b      	str	r3, [r7, #100]	; 0x64
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (!in_isr) {
 8004c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <dcd_event_handler+0x1dc>
 8004c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c70:	65bb      	str	r3, [r7, #88]	; 0x58
  qhdl->interrupt_set(false);
 8004c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2000      	movs	r0, #0
 8004c78:	4798      	blx	r3
}
 8004c7a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7e:	3304      	adds	r3, #4
 8004c80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe ff6e 	bl	8003b64 <tu_fifo_write>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (!in_isr) {
 8004c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c92:	f083 0301 	eor.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d006      	beq.n	8004caa <dcd_event_handler+0x20a>
 8004c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(true);
 8004ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	4798      	blx	r3
}
 8004ca8:	bf00      	nop
  TU_ASSERT(success);
 8004caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cae:	f083 0301 	eor.w	r3, r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <dcd_event_handler+0x22c>
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <dcd_event_handler+0x244>)
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <dcd_event_handler+0x230>
 8004cc8:	be00      	bkpt	0x0000
 8004cca:	e001      	b.n	8004cd0 <dcd_event_handler+0x230>
  return success;
 8004ccc:	bf00      	nop
 8004cce:	e0cd      	b.n	8004e6c <dcd_event_handler+0x3cc>
  TU_ASSERT(success);
 8004cd0:	bf00      	nop
      }
    break;
 8004cd2:	e0cb      	b.n	8004e6c <dcd_event_handler+0x3cc>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004cda:	e023      	b.n	8004d24 <dcd_event_handler+0x284>
 8004cdc:	20002c0c 	.word	0x20002c0c
 8004ce0:	20002d00 	.word	0x20002d00
 8004ce4:	e000edf0 	.word	0xe000edf0
      {
        usbd_class_driver_t const * driver = get_driver(i);
 8004ce8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe ffc9 	bl	8003c84 <get_driver>
 8004cf2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
        if (driver && driver->sof)
 8004cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <dcd_event_handler+0x27a>
 8004cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <dcd_event_handler+0x27a>
        {
          driver->sof(event->rhport, event->sof.frame_count);
 8004d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	7810      	ldrb	r0, [r2, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6852      	ldr	r2, [r2, #4]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004d1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004d24:	4b55      	ldr	r3, [pc, #340]	; (8004e7c <dcd_event_handler+0x3dc>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	dada      	bge.n	8004ce8 <dcd_event_handler+0x248>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8004d32:	4b53      	ldr	r3, [pc, #332]	; (8004e80 <dcd_event_handler+0x3e0>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8097 	beq.w	8004e70 <dcd_event_handler+0x3d0>
      {
        _usbd_dev.suspended = 0;
 8004d42:	4a4f      	ldr	r2, [pc, #316]	; (8004e80 <dcd_event_handler+0x3e0>)
 8004d44:	7813      	ldrb	r3, [r2, #0]
 8004d46:	f36f 0382 	bfc	r3, #2, #1
 8004d4a:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8004d4c:	f107 0308 	add.w	r3, r7, #8
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	609a      	str	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	723b      	strb	r3, [r7, #8]
 8004d5e:	2305      	movs	r3, #5
 8004d60:	727b      	strb	r3, [r7, #9]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8004d62:	4b48      	ldr	r3, [pc, #288]	; (8004e84 <dcd_event_handler+0x3e4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (!in_isr) {
 8004d74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d78:	f083 0301 	eor.w	r3, r3, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <dcd_event_handler+0x2f0>
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  qhdl->interrupt_set(false);
 8004d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	4798      	blx	r3
}
 8004d8e:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8004d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d92:	3304      	adds	r3, #4
 8004d94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fee4 	bl	8003b64 <tu_fifo_write>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (!in_isr) {
 8004da2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004da6:	f083 0301 	eor.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <dcd_event_handler+0x31e>
 8004db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
  qhdl->interrupt_set(true);
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2001      	movs	r0, #1
 8004dba:	4798      	blx	r3
}
 8004dbc:	bf00      	nop
  TU_ASSERT(success);
 8004dbe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004dc2:	f083 0301 	eor.w	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <dcd_event_handler+0x340>
 8004dcc:	4b2e      	ldr	r3, [pc, #184]	; (8004e88 <dcd_event_handler+0x3e8>)
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <dcd_event_handler+0x344>
 8004ddc:	be00      	bkpt	0x0000
 8004dde:	e001      	b.n	8004de4 <dcd_event_handler+0x344>
  return success;
 8004de0:	bf00      	nop
 8004de2:	e045      	b.n	8004e70 <dcd_event_handler+0x3d0>
  TU_ASSERT(success);
 8004de4:	bf00      	nop
      }

      // skip osal queue for SOF in usbd task
    break;
 8004de6:	e043      	b.n	8004e70 <dcd_event_handler+0x3d0>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8004de8:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <dcd_event_handler+0x3e4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df2:	78fb      	ldrb	r3, [r7, #3]
 8004df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (!in_isr) {
 8004df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <dcd_event_handler+0x374>
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(false);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2000      	movs	r0, #0
 8004e10:	4798      	blx	r3
}
 8004e12:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	3304      	adds	r3, #4
 8004e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fea2 	bl	8003b64 <tu_fifo_write>
 8004e20:	4603      	mov	r3, r0
 8004e22:	77fb      	strb	r3, [r7, #31]
  if (!in_isr) {
 8004e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e28:	f083 0301 	eor.w	r3, r3, #1
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d006      	beq.n	8004e40 <dcd_event_handler+0x3a0>
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	61bb      	str	r3, [r7, #24]
  qhdl->interrupt_set(true);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	4798      	blx	r3
}
 8004e3e:	bf00      	nop
  TU_ASSERT(success);
 8004e40:	7ffb      	ldrb	r3, [r7, #31]
 8004e42:	f083 0301 	eor.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <dcd_event_handler+0x3c0>
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <dcd_event_handler+0x3e8>)
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <dcd_event_handler+0x3c4>
 8004e5c:	be00      	bkpt	0x0000
 8004e5e:	e001      	b.n	8004e64 <dcd_event_handler+0x3c4>
  return success;
 8004e60:	bf00      	nop
 8004e62:	e006      	b.n	8004e72 <dcd_event_handler+0x3d2>
  TU_ASSERT(success);
 8004e64:	bf00      	nop
    break;
 8004e66:	e004      	b.n	8004e72 <dcd_event_handler+0x3d2>
    break;
 8004e68:	bf00      	nop
 8004e6a:	e002      	b.n	8004e72 <dcd_event_handler+0x3d2>
    break;
 8004e6c:	bf00      	nop
 8004e6e:	e000      	b.n	8004e72 <dcd_event_handler+0x3d2>
    break;
 8004e70:	bf00      	nop
  }
}
 8004e72:	bf00      	nop
 8004e74:	37a8      	adds	r7, #168	; 0xa8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20002c3c 	.word	0x20002c3c
 8004e80:	20002c0c 	.word	0x20002c0c
 8004e84:	20002d00 	.word	0x20002d00
 8004e88:	e000edf0 	.word	0xe000edf0

08004e8c <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <usbd_int_set+0x30>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 ff71 	bl	8005d88 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8004ea6:	e004      	b.n	8004eb2 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <usbd_int_set+0x30>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 ff77 	bl	8005da0 <dcd_int_disable>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20002020 	.word	0x20002020

08004ec0 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6039      	str	r1, [r7, #0]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4603      	mov	r3, r0
 8004ece:	71fb      	strb	r3, [r7, #7]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	71bb      	strb	r3, [r7, #6]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	e04d      	b.n	8004f7a <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d108      	bne.n	8004efc <usbd_open_edpt_pair+0x3c>
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	797b      	ldrb	r3, [r7, #5]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00a      	beq.n	8004f12 <usbd_open_edpt_pair+0x52>
 8004efc:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <usbd_open_edpt_pair+0xcc>)
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d000      	beq.n	8004f0e <usbd_open_edpt_pair+0x4e>
 8004f0c:	be00      	bkpt	0x0000
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e038      	b.n	8004f84 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	6a39      	ldr	r1, [r7, #32]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f83a 	bl	8004f90 <usbd_edpt_open>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f083 0301 	eor.w	r3, r3, #1
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <usbd_open_edpt_pair+0x7e>
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <usbd_open_edpt_pair+0xcc>)
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d000      	beq.n	8004f3a <usbd_open_edpt_pair+0x7a>
 8004f38:	be00      	bkpt	0x0000
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e022      	b.n	8004f84 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	789b      	ldrb	r3, [r3, #2]
 8004f42:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d104      	bne.n	8004f58 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	789a      	ldrb	r2, [r3, #2]
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e003      	b.n	8004f60 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	789a      	ldrb	r2, [r3, #2]
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8004f72:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	79bb      	ldrb	r3, [r7, #6]
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	dbad      	blt.n	8004ede <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8004f82:	2301      	movs	r3, #1
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	e000edf0 	.word	0xe000edf0

08004f90 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <usbd_edpt_open+0x7c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d90a      	bls.n	8004fca <usbd_edpt_open+0x3a>
 8004fb4:	4b16      	ldr	r3, [pc, #88]	; (8005010 <usbd_edpt_open+0x80>)
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d000      	beq.n	8004fc6 <usbd_edpt_open+0x36>
 8004fc4:	be00      	bkpt	0x0000
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e01c      	b.n	8005004 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <usbd_edpt_open+0x84>)
 8004fcc:	789b      	ldrb	r3, [r3, #2]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6838      	ldr	r0, [r7, #0]
 8004fd2:	f001 ff55 	bl	8006e80 <tu_edpt_validate>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f083 0301 	eor.w	r3, r3, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <usbd_edpt_open+0x68>
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <usbd_edpt_open+0x80>)
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d000      	beq.n	8004ff4 <usbd_edpt_open+0x64>
 8004ff2:	be00      	bkpt	0x0000
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e005      	b.n	8005004 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 ff1f 	bl	8005e40 <dcd_edpt_open>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20002020 	.word	0x20002020
 8005010:	e000edf0 	.word	0xe000edf0
 8005014:	20002c0c 	.word	0x20002c0c

08005018 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	4603      	mov	r3, r0
 8005020:	460a      	mov	r2, r1
 8005022:	71fb      	strb	r3, [r7, #7]
 8005024:	4613      	mov	r3, r2
 8005026:	71bb      	strb	r3, [r7, #6]
 8005028:	79bb      	ldrb	r3, [r7, #6]
 800502a:	73bb      	strb	r3, [r7, #14]
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005032:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8005034:	75fb      	strb	r3, [r7, #23]
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	09db      	lsrs	r3, r3, #7
 800503e:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005040:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8005042:	7dfa      	ldrb	r2, [r7, #23]
 8005044:	7dbb      	ldrb	r3, [r7, #22]
 8005046:	0052      	lsls	r2, r2, #1
 8005048:	4413      	add	r3, r2
 800504a:	3318      	adds	r3, #24
 800504c:	4a06      	ldr	r2, [pc, #24]	; (8005068 <usbd_edpt_claim+0x50>)
 800504e:	4413      	add	r3, r2
 8005050:	3307      	adds	r3, #7
 8005052:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
 8005054:	2100      	movs	r1, #0
 8005056:	6938      	ldr	r0, [r7, #16]
 8005058:	f001 febe 	bl	8006dd8 <tu_edpt_claim>
 800505c:	4603      	mov	r3, r0
#endif
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20002c0c 	.word	0x20002c0c

0800506c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	460a      	mov	r2, r1
 8005076:	71fb      	strb	r3, [r7, #7]
 8005078:	4613      	mov	r3, r2
 800507a:	71bb      	strb	r3, [r7, #6]
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005086:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8005088:	75fb      	strb	r3, [r7, #23]
 800508a:	79bb      	ldrb	r3, [r7, #6]
 800508c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	09db      	lsrs	r3, r3, #7
 8005092:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005094:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8005096:	7dfa      	ldrb	r2, [r7, #23]
 8005098:	7dbb      	ldrb	r3, [r7, #22]
 800509a:	0052      	lsls	r2, r2, #1
 800509c:	4413      	add	r3, r2
 800509e:	3318      	adds	r3, #24
 80050a0:	4a06      	ldr	r2, [pc, #24]	; (80050bc <usbd_edpt_release+0x50>)
 80050a2:	4413      	add	r3, r2
 80050a4:	3307      	adds	r3, #7
 80050a6:	613b      	str	r3, [r7, #16]

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
 80050a8:	2100      	movs	r1, #0
 80050aa:	6938      	ldr	r0, [r7, #16]
 80050ac:	f001 febe 	bl	8006e2c <tu_edpt_release>
 80050b0:	4603      	mov	r3, r0
#endif
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20002c0c 	.word	0x20002c0c

080050c0 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	603a      	str	r2, [r7, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
 80050ce:	460b      	mov	r3, r1
 80050d0:	71bb      	strb	r3, [r7, #6]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80050d6:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <usbd_edpt_xfer+0xe0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	71fb      	strb	r3, [r7, #7]
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80050e0:	7abb      	ldrb	r3, [r7, #10]
 80050e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80050e8:	75fb      	strb	r3, [r7, #23]
 80050ea:	79bb      	ldrb	r3, [r7, #6]
 80050ec:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	09db      	lsrs	r3, r3, #7
 80050f2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80050f4:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80050f6:	7dfa      	ldrb	r2, [r7, #23]
 80050f8:	7dbb      	ldrb	r3, [r7, #22]
 80050fa:	492a      	ldr	r1, [pc, #168]	; (80051a4 <usbd_edpt_xfer+0xe4>)
 80050fc:	0052      	lsls	r2, r2, #1
 80050fe:	440a      	add	r2, r1
 8005100:	4413      	add	r3, r2
 8005102:	3318      	adds	r3, #24
 8005104:	79db      	ldrb	r3, [r3, #7]
 8005106:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <usbd_edpt_xfer+0x66>
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <usbd_edpt_xfer+0xe8>)
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d000      	beq.n	8005122 <usbd_edpt_xfer+0x62>
 8005120:	be00      	bkpt	0x0000
 8005122:	2300      	movs	r3, #0
 8005124:	e038      	b.n	8005198 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8005126:	7dfa      	ldrb	r2, [r7, #23]
 8005128:	7dbb      	ldrb	r3, [r7, #22]
 800512a:	491e      	ldr	r1, [pc, #120]	; (80051a4 <usbd_edpt_xfer+0xe4>)
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	440a      	add	r2, r1
 8005130:	4413      	add	r3, r2
 8005132:	f103 0218 	add.w	r2, r3, #24
 8005136:	79d3      	ldrb	r3, [r2, #7]
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800513e:	88bb      	ldrh	r3, [r7, #4]
 8005140:	79b9      	ldrb	r1, [r7, #6]
 8005142:	79f8      	ldrb	r0, [r7, #7]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	f000 ffd9 	bl	80060fc <dcd_edpt_xfer>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <usbd_edpt_xfer+0x94>
  {
    return true;
 8005150:	2301      	movs	r3, #1
 8005152:	e021      	b.n	8005198 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8005154:	7dfa      	ldrb	r2, [r7, #23]
 8005156:	7dbb      	ldrb	r3, [r7, #22]
 8005158:	4912      	ldr	r1, [pc, #72]	; (80051a4 <usbd_edpt_xfer+0xe4>)
 800515a:	0052      	lsls	r2, r2, #1
 800515c:	440a      	add	r2, r1
 800515e:	4413      	add	r3, r2
 8005160:	f103 0218 	add.w	r2, r3, #24
 8005164:	79d3      	ldrb	r3, [r2, #7]
 8005166:	f36f 0300 	bfc	r3, #0, #1
 800516a:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800516c:	7dfa      	ldrb	r2, [r7, #23]
 800516e:	7dbb      	ldrb	r3, [r7, #22]
 8005170:	490c      	ldr	r1, [pc, #48]	; (80051a4 <usbd_edpt_xfer+0xe4>)
 8005172:	0052      	lsls	r2, r2, #1
 8005174:	440a      	add	r2, r1
 8005176:	4413      	add	r3, r2
 8005178:	f103 0218 	add.w	r2, r3, #24
 800517c:	79d3      	ldrb	r3, [r2, #7]
 800517e:	f36f 0382 	bfc	r3, #2, #1
 8005182:	71d3      	strb	r3, [r2, #7]
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <usbd_edpt_xfer+0xe8>)
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d000      	beq.n	8005196 <usbd_edpt_xfer+0xd6>
 8005194:	be00      	bkpt	0x0000
    return false;
 8005196:	2300      	movs	r3, #0
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20002020 	.word	0x20002020
 80051a4:	20002c0c 	.word	0x20002c0c
 80051a8:	e000edf0 	.word	0xe000edf0

080051ac <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	460a      	mov	r2, r1
 80051b6:	71fb      	strb	r3, [r7, #7]
 80051b8:	4613      	mov	r3, r2
 80051ba:	71bb      	strb	r3, [r7, #6]
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80051c0:	7b3b      	ldrb	r3, [r7, #12]
 80051c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	79bb      	ldrb	r3, [r7, #6]
 80051cc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80051ce:	7b7b      	ldrb	r3, [r7, #13]
 80051d0:	09db      	lsrs	r3, r3, #7
 80051d2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80051d4:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80051d6:	7bfa      	ldrb	r2, [r7, #15]
 80051d8:	7bbb      	ldrb	r3, [r7, #14]
 80051da:	490a      	ldr	r1, [pc, #40]	; (8005204 <usbd_edpt_busy+0x58>)
 80051dc:	0052      	lsls	r2, r2, #1
 80051de:	440a      	add	r2, r1
 80051e0:	4413      	add	r3, r2
 80051e2:	3318      	adds	r3, #24
 80051e4:	79db      	ldrb	r3, [r3, #7]
 80051e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20002c0c 	.word	0x20002c0c

08005208 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	460a      	mov	r2, r1
 8005212:	71fb      	strb	r3, [r7, #7]
 8005214:	4613      	mov	r3, r2
 8005216:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8005218:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <usbd_edpt_stall+0x90>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	71fb      	strb	r3, [r7, #7]
 800521e:	79bb      	ldrb	r3, [r7, #6]
 8005220:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005222:	7b3b      	ldrb	r3, [r7, #12]
 8005224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005228:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	79bb      	ldrb	r3, [r7, #6]
 800522e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005230:	7b7b      	ldrb	r3, [r7, #13]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005236:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	4917      	ldr	r1, [pc, #92]	; (800529c <usbd_edpt_stall+0x94>)
 800523e:	0052      	lsls	r2, r2, #1
 8005240:	440a      	add	r2, r1
 8005242:	4413      	add	r3, r2
 8005244:	3318      	adds	r3, #24
 8005246:	79db      	ldrb	r3, [r3, #7]
 8005248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d11d      	bne.n	800528e <usbd_edpt_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8005252:	79ba      	ldrb	r2, [r7, #6]
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f001 f8a5 	bl	80063a8 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	490e      	ldr	r1, [pc, #56]	; (800529c <usbd_edpt_stall+0x94>)
 8005264:	0052      	lsls	r2, r2, #1
 8005266:	440a      	add	r2, r1
 8005268:	4413      	add	r3, r2
 800526a:	f103 0218 	add.w	r2, r3, #24
 800526e:	79d3      	ldrb	r3, [r2, #7]
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <usbd_edpt_stall+0x94>)
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	440a      	add	r2, r1
 8005280:	4413      	add	r3, r2
 8005282:	f103 0218 	add.w	r2, r3, #24
 8005286:	79d3      	ldrb	r3, [r2, #7]
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	71d3      	strb	r3, [r2, #7]
  }
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20002020 	.word	0x20002020
 800529c:	20002c0c 	.word	0x20002c0c

080052a0 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	460a      	mov	r2, r1
 80052aa:	71fb      	strb	r3, [r7, #7]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80052b0:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <usbd_edpt_clear_stall+0x90>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	71fb      	strb	r3, [r7, #7]
 80052b6:	79bb      	ldrb	r3, [r7, #6]
 80052b8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80052ba:	7b3b      	ldrb	r3, [r7, #12]
 80052bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	79bb      	ldrb	r3, [r7, #6]
 80052c6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80052c8:	7b7b      	ldrb	r3, [r7, #13]
 80052ca:	09db      	lsrs	r3, r3, #7
 80052cc:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80052ce:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80052d0:	7bfa      	ldrb	r2, [r7, #15]
 80052d2:	7bbb      	ldrb	r3, [r7, #14]
 80052d4:	4917      	ldr	r1, [pc, #92]	; (8005334 <usbd_edpt_clear_stall+0x94>)
 80052d6:	0052      	lsls	r2, r2, #1
 80052d8:	440a      	add	r2, r1
 80052da:	4413      	add	r3, r2
 80052dc:	3318      	adds	r3, #24
 80052de:	79db      	ldrb	r3, [r3, #7]
 80052e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01d      	beq.n	8005326 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80052ea:	79ba      	ldrb	r2, [r7, #6]
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f86b 	bl	80063cc <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <usbd_edpt_clear_stall+0x94>)
 80052fc:	0052      	lsls	r2, r2, #1
 80052fe:	440a      	add	r2, r1
 8005300:	4413      	add	r3, r2
 8005302:	f103 0218 	add.w	r2, r3, #24
 8005306:	79d3      	ldrb	r3, [r2, #7]
 8005308:	f36f 0341 	bfc	r3, #1, #1
 800530c:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	4908      	ldr	r1, [pc, #32]	; (8005334 <usbd_edpt_clear_stall+0x94>)
 8005314:	0052      	lsls	r2, r2, #1
 8005316:	440a      	add	r2, r1
 8005318:	4413      	add	r3, r2
 800531a:	f103 0218 	add.w	r2, r3, #24
 800531e:	79d3      	ldrb	r3, [r2, #7]
 8005320:	f36f 0300 	bfc	r3, #0, #1
 8005324:	71d3      	strb	r3, [r2, #7]
  }
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20002020 	.word	0x20002020
 8005334:	20002c0c 	.word	0x20002c0c

08005338 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	460a      	mov	r2, r1
 8005342:	71fb      	strb	r3, [r7, #7]
 8005344:	4613      	mov	r3, r2
 8005346:	71bb      	strb	r3, [r7, #6]
 8005348:	79bb      	ldrb	r3, [r7, #6]
 800534a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800534c:	7b3b      	ldrb	r3, [r7, #12]
 800534e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005352:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005354:	73fb      	strb	r3, [r7, #15]
 8005356:	79bb      	ldrb	r3, [r7, #6]
 8005358:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800535a:	7b7b      	ldrb	r3, [r7, #13]
 800535c:	09db      	lsrs	r3, r3, #7
 800535e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005360:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8005362:	7bfa      	ldrb	r2, [r7, #15]
 8005364:	7bbb      	ldrb	r3, [r7, #14]
 8005366:	490a      	ldr	r1, [pc, #40]	; (8005390 <usbd_edpt_stalled+0x58>)
 8005368:	0052      	lsls	r2, r2, #1
 800536a:	440a      	add	r2, r1
 800536c:	4413      	add	r3, r2
 800536e:	3318      	adds	r3, #24
 8005370:	79db      	ldrb	r3, [r3, #7]
 8005372:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20002c0c 	.word	0x20002c0c

08005394 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <_status_stage_xact+0x1e>
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <_status_stage_xact+0x20>
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80053b6:	7bf9      	ldrb	r1, [r7, #15]
 80053b8:	79f8      	ldrb	r0, [r7, #7]
 80053ba:	2300      	movs	r3, #0
 80053bc:	2200      	movs	r2, #0
 80053be:	f7ff fe7f 	bl	80050c0 <usbd_edpt_xfer>
 80053c2:	4603      	mov	r3, r0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <tud_control_status+0x3c>)
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	6810      	ldr	r0, [r2, #0]
 80053de:	6851      	ldr	r1, [r2, #4]
 80053e0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <tud_control_status+0x3c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <tud_control_status+0x3c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <tud_control_status+0x3c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ffcb 	bl	8005394 <_status_stage_xact>
 80053fe:	4603      	mov	r3, r0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20002d04 	.word	0x20002d04

0800540c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8005416:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <_data_stage_xact+0x74>)
 8005418:	899a      	ldrh	r2, [r3, #12]
 800541a:	4b19      	ldr	r3, [pc, #100]	; (8005480 <_data_stage_xact+0x74>)
 800541c:	89db      	ldrh	r3, [r3, #14]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b29b      	uxth	r3, r3
 8005422:	817b      	strh	r3, [r7, #10]
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005428:	897a      	ldrh	r2, [r7, #10]
 800542a:	893b      	ldrh	r3, [r7, #8]
 800542c:	4293      	cmp	r3, r2
 800542e:	bf28      	it	cs
 8005430:	4613      	movcs	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	81bb      	strh	r3, [r7, #12]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <_data_stage_xact+0x74>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <_data_stage_xact+0x54>
  {
    ep_addr = EDPT_CTRL_IN;
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	73fb      	strb	r3, [r7, #15]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 800544c:	89bb      	ldrh	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <_data_stage_xact+0x54>
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <_data_stage_xact+0x74>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	89ba      	ldrh	r2, [r7, #12]
 8005458:	4619      	mov	r1, r3
 800545a:	480a      	ldr	r0, [pc, #40]	; (8005484 <_data_stage_xact+0x78>)
 800545c:	f005 fffc 	bl	800b458 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8005460:	89bb      	ldrh	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <_data_stage_xact+0x5e>
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <_data_stage_xact+0x78>)
 8005468:	e000      	b.n	800546c <_data_stage_xact+0x60>
 800546a:	2200      	movs	r2, #0
 800546c:	89bb      	ldrh	r3, [r7, #12]
 800546e:	7bf9      	ldrb	r1, [r7, #15]
 8005470:	79f8      	ldrb	r0, [r7, #7]
 8005472:	f7ff fe25 	bl	80050c0 <usbd_edpt_xfer>
 8005476:	4603      	mov	r3, r0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20002d04 	.word	0x20002d04
 8005484:	20002d18 	.word	0x20002d18

08005488 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	461a      	mov	r2, r3
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	4613      	mov	r3, r2
 800549a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 800549c:	4b30      	ldr	r3, [pc, #192]	; (8005560 <tud_control_xfer+0xd8>)
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	6810      	ldr	r0, [r2, #0]
 80054a2:	6851      	ldr	r1, [r2, #4]
 80054a4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 80054a6:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <tud_control_xfer+0xd8>)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80054ac:	4b2c      	ldr	r3, [pc, #176]	; (8005560 <tud_control_xfer+0xd8>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	88db      	ldrh	r3, [r3, #6]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	89bb      	ldrh	r3, [r7, #12]
 80054ba:	827b      	strh	r3, [r7, #18]
 80054bc:	4613      	mov	r3, r2
 80054be:	823b      	strh	r3, [r7, #16]
 80054c0:	8a7a      	ldrh	r2, [r7, #18]
 80054c2:	8a3b      	ldrh	r3, [r7, #16]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bf28      	it	cs
 80054c8:	4613      	movcs	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	4b24      	ldr	r3, [pc, #144]	; (8005560 <tud_control_xfer+0xd8>)
 80054ce:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	88db      	ldrh	r3, [r3, #6]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d026      	beq.n	8005528 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 80054da:	4b21      	ldr	r3, [pc, #132]	; (8005560 <tud_control_xfer+0xd8>)
 80054dc:	899b      	ldrh	r3, [r3, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <tud_control_xfer+0x76>
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <tud_control_xfer+0xdc>)
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d000      	beq.n	80054fa <tud_control_xfer+0x72>
 80054f8:	be00      	bkpt	0x0000
 80054fa:	2300      	movs	r3, #0
 80054fc:	e02b      	b.n	8005556 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff83 	bl	800540c <_data_stage_xact>
 8005506:	4603      	mov	r3, r0
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <tud_control_xfer+0xcc>
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <tud_control_xfer+0xdc>)
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d000      	beq.n	8005524 <tud_control_xfer+0x9c>
 8005522:	be00      	bkpt	0x0000
 8005524:	2300      	movs	r3, #0
 8005526:	e016      	b.n	8005556 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff31 	bl	8005394 <_status_stage_xact>
 8005532:	4603      	mov	r3, r0
 8005534:	f083 0301 	eor.w	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <tud_control_xfer+0xcc>
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <tud_control_xfer+0xdc>)
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d000      	beq.n	8005550 <tud_control_xfer+0xc8>
 800554e:	be00      	bkpt	0x0000
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <tud_control_xfer+0xce>
  }

  return true;
 8005554:	2301      	movs	r3, #1
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20002d04 	.word	0x20002d04
 8005564:	e000edf0 	.word	0xe000edf0

08005568 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800556c:	2214      	movs	r2, #20
 800556e:	2100      	movs	r1, #0
 8005570:	4802      	ldr	r0, [pc, #8]	; (800557c <usbd_control_reset+0x14>)
 8005572:	f005 ff99 	bl	800b4a8 <memset>
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20002d04 	.word	0x20002d04

08005580 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8005588:	4a04      	ldr	r2, [pc, #16]	; (800559c <usbd_control_set_complete_callback+0x1c>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6113      	str	r3, [r2, #16]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20002d04 	.word	0x20002d04

080055a0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 80055a8:	4b09      	ldr	r3, [pc, #36]	; (80055d0 <usbd_control_set_request+0x30>)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6810      	ldr	r0, [r2, #0]
 80055ae:	6851      	ldr	r1, [r2, #4]
 80055b0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <usbd_control_set_request+0x30>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <usbd_control_set_request+0x30>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <usbd_control_set_request+0x30>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	819a      	strh	r2, [r3, #12]
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20002d04 	.word	0x20002d04

080055d4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4603      	mov	r3, r0
 80055de:	71fb      	strb	r3, [r7, #7]
 80055e0:	460b      	mov	r3, r1
 80055e2:	71bb      	strb	r3, [r7, #6]
 80055e4:	4613      	mov	r3, r2
 80055e6:	717b      	strb	r3, [r7, #5]
 80055e8:	79bb      	ldrb	r3, [r7, #6]
 80055ea:	73fb      	strb	r3, [r7, #15]
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	09db      	lsrs	r3, r3, #7
 80055f0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80055f2:	4a50      	ldr	r2, [pc, #320]	; (8005734 <usbd_control_xfer_cb+0x160>)
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d021      	beq.n	8005644 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <usbd_control_xfer_cb+0x48>
 8005606:	4b4c      	ldr	r3, [pc, #304]	; (8005738 <usbd_control_xfer_cb+0x164>)
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d000      	beq.n	8005618 <usbd_control_xfer_cb+0x44>
 8005616:	be00      	bkpt	0x0000
 8005618:	2300      	movs	r3, #0
 800561a:	e087      	b.n	800572c <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800561c:	4b47      	ldr	r3, [pc, #284]	; (800573c <usbd_control_xfer_cb+0x168>)
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <usbd_control_xfer_cb+0x58>
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	4943      	ldr	r1, [pc, #268]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005626:	4618      	mov	r0, r3
 8005628:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 800562c:	4b41      	ldr	r3, [pc, #260]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8005634:	4b3f      	ldr	r3, [pc, #252]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	79f8      	ldrb	r0, [r7, #7]
 800563a:	4a3e      	ldr	r2, [pc, #248]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800563c:	2103      	movs	r1, #3
 800563e:	4798      	blx	r3
    }

    return true;
 8005640:	2301      	movs	r3, #1
 8005642:	e073      	b.n	800572c <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8005644:	4b3b      	ldr	r3, [pc, #236]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10c      	bne.n	800566c <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8005652:	4b38      	ldr	r3, [pc, #224]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <usbd_control_xfer_cb+0x8a>
 800565a:	2300      	movs	r3, #0
 800565c:	e066      	b.n	800572c <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 800565e:	4b35      	ldr	r3, [pc, #212]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	4936      	ldr	r1, [pc, #216]	; (8005740 <usbd_control_xfer_cb+0x16c>)
 8005666:	4618      	mov	r0, r3
 8005668:	f005 fef6 	bl	800b458 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 800566c:	4b31      	ldr	r3, [pc, #196]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800566e:	89da      	ldrh	r2, [r3, #14]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	4413      	add	r3, r2
 8005676:	b29a      	uxth	r2, r3
 8005678:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800567a:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800567c:	4b2d      	ldr	r3, [pc, #180]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	4413      	add	r3, r2
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <usbd_control_xfer_cb+0x160>)
 8005686:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800568a:	88da      	ldrh	r2, [r3, #6]
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <usbd_control_xfer_cb+0x160>)
 800568e:	89db      	ldrh	r3, [r3, #14]
 8005690:	429a      	cmp	r2, r3
 8005692:	d002      	beq.n	800569a <usbd_control_xfer_cb+0xc6>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b3f      	cmp	r3, #63	; 0x3f
 8005698:	d831      	bhi.n	80056fe <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 800569a:	2301      	movs	r3, #1
 800569c:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 800569e:	4b25      	ldr	r3, [pc, #148]	; (8005734 <usbd_control_xfer_cb+0x160>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80056a6:	4b23      	ldr	r3, [pc, #140]	; (8005734 <usbd_control_xfer_cb+0x160>)
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	79f8      	ldrb	r0, [r7, #7]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <usbd_control_xfer_cb+0x160>)
 80056ae:	2102      	movs	r1, #2
 80056b0:	4798      	blx	r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d015      	beq.n	80056e8 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	491d      	ldr	r1, [pc, #116]	; (8005734 <usbd_control_xfer_cb+0x160>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fe67 	bl	8005394 <_status_stage_xact>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f083 0301 	eor.w	r3, r3, #1
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d02a      	beq.n	8005728 <usbd_control_xfer_cb+0x154>
 80056d2:	4b19      	ldr	r3, [pc, #100]	; (8005738 <usbd_control_xfer_cb+0x164>)
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <usbd_control_xfer_cb+0x110>
 80056e2:	be00      	bkpt	0x0000
 80056e4:	2300      	movs	r3, #0
 80056e6:	e021      	b.n	800572c <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fe5b 	bl	80063a8 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fe56 	bl	80063a8 <dcd_edpt_stall>
  {
 80056fc:	e014      	b.n	8005728 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fe83 	bl	800540c <_data_stage_xact>
 8005706:	4603      	mov	r3, r0
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <usbd_control_xfer_cb+0x156>
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <usbd_control_xfer_cb+0x164>)
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d000      	beq.n	8005724 <usbd_control_xfer_cb+0x150>
 8005722:	be00      	bkpt	0x0000
 8005724:	2300      	movs	r3, #0
 8005726:	e001      	b.n	800572c <usbd_control_xfer_cb+0x158>
  {
 8005728:	bf00      	nop
  }

  return true;
 800572a:	2301      	movs	r3, #1
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20002d04 	.word	0x20002d04
 8005738:	e000edf0 	.word	0xe000edf0
 800573c:	00000000 	.word	0x00000000
 8005740:	20002d18 	.word	0x20002d18

08005744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	2b00      	cmp	r3, #0
 8005754:	db0b      	blt.n	800576e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	f003 021f 	and.w	r2, r3, #31
 800575c:	4907      	ldr	r1, [pc, #28]	; (800577c <__NVIC_EnableIRQ+0x38>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	2001      	movs	r0, #1
 8005766:	fa00 f202 	lsl.w	r2, r0, r2
 800576a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	e000e100 	.word	0xe000e100

08005780 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800578a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db12      	blt.n	80057b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	490a      	ldr	r1, [pc, #40]	; (80057c4 <__NVIC_DisableIRQ+0x44>)
 800579a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2001      	movs	r0, #1
 80057a2:	fa00 f202 	lsl.w	r2, r0, r2
 80057a6:	3320      	adds	r3, #32
 80057a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80057ac:	f3bf 8f4f 	dsb	sy
}
 80057b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057b2:	f3bf 8f6f 	isb	sy
}
 80057b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	e000e100 	.word	0xe000e100

080057c8 <calc_rx_ff_size>:
static uint16_t _allocated_fifo_words_tx;         // TX FIFO size in words (IN EPs)
static bool _out_ep_closed;                       // Flag to check if RX FIFO size needs an update (reduce its size)

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_rx_ff_size(uint16_t ep_size)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	80fb      	strh	r3, [r7, #6]
  return 15 + 2*(ep_size/4) + 2*EP_MAX;
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	b29b      	uxth	r3, r3
 80057dc:	331b      	adds	r3, #27
 80057de:	b29b      	uxth	r3, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80057f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80057fa:	613b      	str	r3, [r7, #16]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005800:	2300      	movs	r3, #0
 8005802:	757b      	strb	r3, [r7, #21]
 8005804:	e013      	b.n	800582e <update_grxfsiz+0x42>
  {
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8005806:	7d7b      	ldrb	r3, [r7, #21]
 8005808:	4a10      	ldr	r2, [pc, #64]	; (800584c <update_grxfsiz+0x60>)
 800580a:	015b      	lsls	r3, r3, #5
 800580c:	4413      	add	r3, r2
 800580e:	330a      	adds	r3, #10
 8005810:	881a      	ldrh	r2, [r3, #0]
 8005812:	8afb      	ldrh	r3, [r7, #22]
 8005814:	81fb      	strh	r3, [r7, #14]
 8005816:	4613      	mov	r3, r2
 8005818:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 800581a:	89fa      	ldrh	r2, [r7, #14]
 800581c:	89bb      	ldrh	r3, [r7, #12]
 800581e:	4293      	cmp	r3, r2
 8005820:	bf38      	it	cc
 8005822:	4613      	movcc	r3, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < EP_MAX; epnum++)
 8005828:	7d7b      	ldrb	r3, [r7, #21]
 800582a:	3301      	adds	r3, #1
 800582c:	757b      	strb	r3, [r7, #21]
 800582e:	7d7b      	ldrb	r3, [r7, #21]
 8005830:	2b05      	cmp	r3, #5
 8005832:	d9e8      	bls.n	8005806 <update_grxfsiz+0x1a>
  }

  // Update size of RX FIFO
  usb_otg->GRXFSIZ = calc_rx_ff_size(max_epsize);
 8005834:	8afb      	ldrh	r3, [r7, #22]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ffc6 	bl	80057c8 <calc_rx_ff_size>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005844:	bf00      	nop
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20002d60 	.word	0x20002d60

08005850 <bus_reset>:

// Setup the control endpoint 0.
static void bus_reset(uint8_t rhport)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 800585a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800585e:	61bb      	str	r3, [r7, #24]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005860:	4b31      	ldr	r3, [pc, #196]	; (8005928 <bus_reset+0xd8>)
 8005862:	617b      	str	r3, [r7, #20]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005864:	4b31      	ldr	r3, [pc, #196]	; (800592c <bus_reset+0xdc>)
 8005866:	613b      	str	r3, [r7, #16]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005868:	4b31      	ldr	r3, [pc, #196]	; (8005930 <bus_reset+0xe0>)
 800586a:	60fb      	str	r3, [r7, #12]

  tu_memclr(xfer_status, sizeof(xfer_status));
 800586c:	22c0      	movs	r2, #192	; 0xc0
 800586e:	2100      	movs	r1, #0
 8005870:	4830      	ldr	r0, [pc, #192]	; (8005934 <bus_reset+0xe4>)
 8005872:	f005 fe19 	bl	800b4a8 <memset>
  _out_ep_closed = false;
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <bus_reset+0xe8>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]

  // clear device address
  dev->DCFG &= ~USB_OTG_DCFG_DAD_Msk;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	601a      	str	r2, [r3, #0]

  // 1. NAK for all OUT endpoints
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8005888:	2300      	movs	r3, #0
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e00e      	b.n	80058ac <bus_reset+0x5c>
    out_ep[n].DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	015b      	lsls	r3, r3, #5
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	7ffb      	ldrb	r3, [r7, #31]
 800589a:	015b      	lsls	r3, r3, #5
 800589c:	6939      	ldr	r1, [r7, #16]
 800589e:	440b      	add	r3, r1
 80058a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80058a4:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < EP_MAX; n++) {
 80058a6:	7ffb      	ldrb	r3, [r7, #31]
 80058a8:	3301      	adds	r3, #1
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d9ed      	bls.n	800588e <bus_reset+0x3e>
  }

  // 2. Un-mask interrupt bits
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80058b8:	61da      	str	r2, [r3, #28]
  dev->DOEPMSK = USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2209      	movs	r2, #9
 80058be:	615a      	str	r2, [r3, #20]
  dev->DIEPMSK = USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2209      	movs	r2, #9
 80058c4:	611a      	str	r2, [r3, #16]
  //
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  usb_otg->GRXFSIZ = calc_rx_ff_size(TUD_OPT_HIGH_SPEED ? 512 : 64);
 80058c6:	2040      	movs	r0, #64	; 0x40
 80058c8:	f7ff ff7e 	bl	80057c8 <calc_rx_ff_size>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24

  _allocated_fifo_words_tx = 16;
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <bus_reset+0xec>)
 80058d6:	2210      	movs	r2, #16
 80058d8:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  usb_otg->DIEPTXF0_HNPTXFSIZ = (16 << USB_OTG_TX0FD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <bus_reset+0xec>)
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80058e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e6:	461a      	mov	r2, r3
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  in_ep[0].DIEPCTL &= ~(0x03 << USB_OTG_DIEPCTL_MPSIZ_Pos);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 0203 	bic.w	r2, r3, #3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]
  xfer_status[0][TUSB_DIR_OUT].max_size = xfer_status[0][TUSB_DIR_IN].max_size = 64;
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <bus_reset+0xe4>)
 80058fa:	2240      	movs	r2, #64	; 0x40
 80058fc:	835a      	strh	r2, [r3, #26]
 80058fe:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <bus_reset+0xe4>)
 8005900:	8b5a      	ldrh	r2, [r3, #26]
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <bus_reset+0xe4>)
 8005904:	815a      	strh	r2, [r3, #10]

  out_ep[0].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	611a      	str	r2, [r3, #16]

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OEPINT | USB_OTG_GINTMSK_IEPINT;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	619a      	str	r2, [r3, #24]
}
 800591e:	bf00      	nop
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	50000800 	.word	0x50000800
 800592c:	50000b00 	.word	0x50000b00
 8005930:	50000900 	.word	0x50000900
 8005934:	20002d60 	.word	0x20002d60
 8005938:	20002e26 	.word	0x20002e26
 800593c:	20002e24 	.word	0x20002e24

08005940 <set_turnaround>:

// Set turn-around timeout according to link speed
extern uint32_t SystemCoreClock;
static void set_turnaround(USB_OTG_GlobalTypeDef * usb_otg, tusb_speed_t speed)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  usb_otg->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]

  if ( speed == TUSB_SPEED_HIGH )
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d106      	bne.n	800596c <set_turnaround+0x2c>
  {
    // Use fixed 0x09 for Highspeed
    usb_otg->GUSBCFG |= (0x09 << USB_OTG_GUSBCFG_TRDT_Pos);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f443 5210 	orr.w	r2, r3, #9216	; 0x2400
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60da      	str	r2, [r3, #12]
      turnaround = 0xFU;

    // Fullspeed depends on MCU clocks, but we will use 0x06 for 32+ Mhz
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
  }
}
 800596a:	e050      	b.n	8005a0e <set_turnaround+0xce>
    if ( SystemCoreClock >= 32000000U )
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <set_turnaround+0xdc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <set_turnaround+0xe0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d302      	bcc.n	800597c <set_turnaround+0x3c>
      turnaround = 0x6U;
 8005976:	2306      	movs	r3, #6
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e041      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 27500000U )
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <set_turnaround+0xdc>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <set_turnaround+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d902      	bls.n	800598c <set_turnaround+0x4c>
      turnaround = 0x7U;
 8005986:	2307      	movs	r3, #7
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e039      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 24000000U )
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <set_turnaround+0xdc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <set_turnaround+0xe8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d302      	bcc.n	800599c <set_turnaround+0x5c>
      turnaround = 0x8U;
 8005996:	2308      	movs	r3, #8
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e031      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 21800000U )
 800599c:	4b1f      	ldr	r3, [pc, #124]	; (8005a1c <set_turnaround+0xdc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <set_turnaround+0xec>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d902      	bls.n	80059ac <set_turnaround+0x6c>
      turnaround = 0x9U;
 80059a6:	2309      	movs	r3, #9
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e029      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 20000000U )
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <set_turnaround+0xdc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <set_turnaround+0xf0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d902      	bls.n	80059bc <set_turnaround+0x7c>
      turnaround = 0xAU;
 80059b6:	230a      	movs	r3, #10
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e021      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 18500000U )
 80059bc:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <set_turnaround+0xdc>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <set_turnaround+0xf4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d902      	bls.n	80059cc <set_turnaround+0x8c>
      turnaround = 0xBU;
 80059c6:	230b      	movs	r3, #11
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	e019      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 17200000U )
 80059cc:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <set_turnaround+0xdc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <set_turnaround+0xf8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d302      	bcc.n	80059dc <set_turnaround+0x9c>
      turnaround = 0xCU;
 80059d6:	230c      	movs	r3, #12
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e011      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 16000000U )
 80059dc:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <set_turnaround+0xdc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <set_turnaround+0xfc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d302      	bcc.n	80059ec <set_turnaround+0xac>
      turnaround = 0xDU;
 80059e6:	230d      	movs	r3, #13
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e009      	b.n	8005a00 <set_turnaround+0xc0>
    else if ( SystemCoreClock >= 15000000U )
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <set_turnaround+0xdc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <set_turnaround+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d302      	bcc.n	80059fc <set_turnaround+0xbc>
      turnaround = 0xEU;
 80059f6:	230e      	movs	r3, #14
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e001      	b.n	8005a00 <set_turnaround+0xc0>
      turnaround = 0xFU;
 80059fc:	230f      	movs	r3, #15
 80059fe:	60fb      	str	r3, [r7, #12]
    usb_otg->GUSBCFG |= (turnaround << USB_OTG_GUSBCFG_TRDT_Pos);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20002004 	.word	0x20002004
 8005a20:	01e84800 	.word	0x01e84800
 8005a24:	01a39ddf 	.word	0x01a39ddf
 8005a28:	016e3600 	.word	0x016e3600
 8005a2c:	014ca43f 	.word	0x014ca43f
 8005a30:	01312cff 	.word	0x01312cff
 8005a34:	011a499f 	.word	0x011a499f
 8005a38:	01067380 	.word	0x01067380
 8005a3c:	00f42400 	.word	0x00f42400
 8005a40:	00e4e1c0 	.word	0x00e4e1c0

08005a44 <get_speed>:

static tusb_speed_t get_speed(uint8_t rhport)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <get_speed+0x34>)
 8005a50:	60fb      	str	r3, [r7, #12]
  uint32_t const enum_spd = (dev->DSTS & USB_OTG_DSTS_ENUMSPD_Msk) >> USB_OTG_DSTS_ENUMSPD_Pos;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	f003 0303 	and.w	r3, r3, #3
 8005a5c:	60bb      	str	r3, [r7, #8]
  return (enum_spd == DCD_HIGH_SPEED) ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <get_speed+0x24>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e000      	b.n	8005a6a <get_speed+0x26>
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	50000800 	.word	0x50000800

08005a7c <set_speed>:

static void set_speed(uint8_t rhport, tusb_speed_t speed)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	460a      	mov	r2, r1
 8005a86:	71fb      	strb	r3, [r7, #7]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71bb      	strb	r3, [r7, #6]
  uint32_t bitvalue;

  if ( rhport == 1 )
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <set_speed+0x26>
  {
    bitvalue = ((TUSB_SPEED_HIGH == speed) ? DCD_HIGH_SPEED : DCD_FULL_SPEED_USE_HS);
 8005a92:	79bb      	ldrb	r3, [r7, #6]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e001      	b.n	8005aa6 <set_speed+0x2a>
  }
  else
  {
    bitvalue = DCD_FULL_SPEED;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	60fb      	str	r3, [r7, #12]
  }

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <set_speed+0x54>)
 8005aa8:	60bb      	str	r3, [r7, #8]

  // Clear and set speed bits
  dev->DCFG &= ~(3 << USB_OTG_DCFG_DSPD_Pos);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0203 	bic.w	r2, r3, #3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	601a      	str	r2, [r3, #0]
  dev->DCFG |= (bitvalue << USB_OTG_DCFG_DSPD_Pos);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	50000800 	.word	0x50000800

08005ad4 <edpt_schedule_packets>:
  return true;
}
#endif

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets, uint16_t total_bytes)
{
 8005ad4:	b490      	push	{r4, r7}
 8005ad6:	b08a      	sub	sp, #40	; 0x28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	71fb      	strb	r3, [r7, #7]
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71bb      	strb	r3, [r7, #6]
 8005aea:	460b      	mov	r3, r1
 8005aec:	717b      	strb	r3, [r7, #5]
 8005aee:	4613      	mov	r3, r2
 8005af0:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005af2:	4b6c      	ldr	r3, [pc, #432]	; (8005ca4 <edpt_schedule_packets+0x1d0>)
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005af6:	4b6c      	ldr	r3, [pc, #432]	; (8005ca8 <edpt_schedule_packets+0x1d4>)
 8005af8:	623b      	str	r3, [r7, #32]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005afa:	4b6c      	ldr	r3, [pc, #432]	; (8005cac <edpt_schedule_packets+0x1d8>)
 8005afc:	61fb      	str	r3, [r7, #28]

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if(epnum == 0) {
 8005afe:	79bb      	ldrb	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d121      	bne.n	8005b48 <edpt_schedule_packets+0x74>
    xfer_ctl_t * const xfer = XFER_CTL_BASE(epnum, dir);
 8005b04:	79ba      	ldrb	r2, [r7, #6]
 8005b06:	797b      	ldrb	r3, [r7, #5]
 8005b08:	0052      	lsls	r2, r2, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	4a68      	ldr	r2, [pc, #416]	; (8005cb0 <edpt_schedule_packets+0x1dc>)
 8005b10:	4413      	add	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8005b14:	797b      	ldrb	r3, [r7, #5]
 8005b16:	4a67      	ldr	r2, [pc, #412]	; (8005cb4 <edpt_schedule_packets+0x1e0>)
 8005b18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	81fa      	strh	r2, [r7, #14]
 8005b22:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005b24:	89fa      	ldrh	r2, [r7, #14]
 8005b26:	89bb      	ldrh	r3, [r7, #12]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bf28      	it	cs
 8005b2c:	4613      	movcs	r3, r2
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8005b32:	797b      	ldrb	r3, [r7, #5]
 8005b34:	4a5f      	ldr	r2, [pc, #380]	; (8005cb4 <edpt_schedule_packets+0x1e0>)
 8005b36:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b3a:	797b      	ldrb	r3, [r7, #5]
 8005b3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005b3e:	1a8a      	subs	r2, r1, r2
 8005b40:	b291      	uxth	r1, r2
 8005b42:	4a5c      	ldr	r2, [pc, #368]	; (8005cb4 <edpt_schedule_packets+0x1e0>)
 8005b44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if(dir == TUSB_DIR_IN) {
 8005b48:	797b      	ldrb	r3, [r7, #5]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d14f      	bne.n	8005bee <edpt_schedule_packets+0x11a>
    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	04db      	lsls	r3, r3, #19
 8005b52:	4618      	mov	r0, r3
        ((total_bytes << USB_OTG_DIEPTSIZ_XFRSIZ_Pos) & USB_OTG_DIEPTSIZ_XFRSIZ_Msk);
 8005b54:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    in_ep[epnum].DIEPTSIZ = (num_packets << USB_OTG_DIEPTSIZ_PKTCNT_Pos) |
 8005b56:	79bb      	ldrb	r3, [r7, #6]
 8005b58:	015b      	lsls	r3, r3, #5
 8005b5a:	69f9      	ldr	r1, [r7, #28]
 8005b5c:	440b      	add	r3, r1
 8005b5e:	4302      	orrs	r2, r0
 8005b60:	611a      	str	r2, [r3, #16]

    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPENA | USB_OTG_DIEPCTL_CNAK;
 8005b62:	79bb      	ldrb	r3, [r7, #6]
 8005b64:	015b      	lsls	r3, r3, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	79bb      	ldrb	r3, [r7, #6]
 8005b6e:	015b      	lsls	r3, r3, #5
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	440b      	add	r3, r1
 8005b74:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005b78:	601a      	str	r2, [r3, #0]
    // For ISO endpoint set correct odd/even bit for next frame.
    if ((in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPTYP) == USB_OTG_DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8005b7a:	79bb      	ldrb	r3, [r7, #6]
 8005b7c:	015b      	lsls	r3, r3, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b8c:	d122      	bne.n	8005bd4 <edpt_schedule_packets+0x100>
 8005b8e:	79ba      	ldrb	r2, [r7, #6]
 8005b90:	797b      	ldrb	r3, [r7, #5]
 8005b92:	4947      	ldr	r1, [pc, #284]	; (8005cb0 <edpt_schedule_packets+0x1dc>)
 8005b94:	0052      	lsls	r2, r2, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	440b      	add	r3, r1
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d117      	bne.n	8005bd4 <edpt_schedule_packets+0x100>
    {
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	613b      	str	r3, [r7, #16]
      in_ep[epnum].DIEPCTL |= (odd_frame_now ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DIEPCTL_SODDFRM_Msk);
 8005bae:	79bb      	ldrb	r3, [r7, #6]
 8005bb0:	015b      	lsls	r3, r3, #5
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <edpt_schedule_packets+0xf0>
 8005bbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8005bc2:	e001      	b.n	8005bc8 <edpt_schedule_packets+0xf4>
 8005bc4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	015b      	lsls	r3, r3, #5
 8005bcc:	69f8      	ldr	r0, [r7, #28]
 8005bce:	4403      	add	r3, r0
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if(total_bytes != 0) {
 8005bd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d05e      	beq.n	8005c98 <edpt_schedule_packets+0x1c4>
      dev->DIEPEMPMSK |= (1 << epnum);
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bde:	79ba      	ldrb	r2, [r7, #6]
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f202 	lsl.w	r2, r1, r2
 8005be6:	431a      	orrs	r2, r3
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	635a      	str	r2, [r3, #52]	; 0x34
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8005bec:	e054      	b.n	8005c98 <edpt_schedule_packets+0x1c4>
    out_ep[epnum].DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT_Msk | USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bee:	79bb      	ldrb	r3, [r7, #6]
 8005bf0:	015b      	lsls	r3, r3, #5
 8005bf2:	6a3a      	ldr	r2, [r7, #32]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	79bb      	ldrb	r3, [r7, #6]
 8005bfa:	015b      	lsls	r3, r3, #5
 8005bfc:	6a39      	ldr	r1, [r7, #32]
 8005bfe:	440b      	add	r3, r1
 8005c00:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8005c04:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8005c06:	79bb      	ldrb	r3, [r7, #6]
 8005c08:	015b      	lsls	r3, r3, #5
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	6919      	ldr	r1, [r3, #16]
 8005c10:	887b      	ldrh	r3, [r7, #2]
 8005c12:	04db      	lsls	r3, r3, #19
 8005c14:	461a      	mov	r2, r3
        ((total_bytes << USB_OTG_DOEPTSIZ_XFRSIZ_Pos) & USB_OTG_DOEPTSIZ_XFRSIZ_Msk);
 8005c16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    out_ep[epnum].DOEPTSIZ |= (num_packets << USB_OTG_DOEPTSIZ_PKTCNT_Pos) |
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	79bb      	ldrb	r3, [r7, #6]
 8005c1c:	015b      	lsls	r3, r3, #5
 8005c1e:	6a38      	ldr	r0, [r7, #32]
 8005c20:	4403      	add	r3, r0
 8005c22:	430a      	orrs	r2, r1
 8005c24:	611a      	str	r2, [r3, #16]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK;
 8005c26:	79bb      	ldrb	r3, [r7, #6]
 8005c28:	015b      	lsls	r3, r3, #5
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	79bb      	ldrb	r3, [r7, #6]
 8005c32:	015b      	lsls	r3, r3, #5
 8005c34:	6a39      	ldr	r1, [r7, #32]
 8005c36:	440b      	add	r3, r1
 8005c38:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005c3c:	601a      	str	r2, [r3, #0]
    if ((out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPTYP) == USB_OTG_DOEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1)
 8005c3e:	79bb      	ldrb	r3, [r7, #6]
 8005c40:	015b      	lsls	r3, r3, #5
 8005c42:	6a3a      	ldr	r2, [r7, #32]
 8005c44:	4413      	add	r3, r2
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c50:	d122      	bne.n	8005c98 <edpt_schedule_packets+0x1c4>
 8005c52:	79ba      	ldrb	r2, [r7, #6]
 8005c54:	797b      	ldrb	r3, [r7, #5]
 8005c56:	4916      	ldr	r1, [pc, #88]	; (8005cb0 <edpt_schedule_packets+0x1dc>)
 8005c58:	0052      	lsls	r2, r2, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	440b      	add	r3, r1
 8005c60:	330c      	adds	r3, #12
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d117      	bne.n	8005c98 <edpt_schedule_packets+0x1c4>
      uint32_t const odd_frame_now = (dev->DSTS & (1u << USB_OTG_DSTS_FNSOF_Pos));
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c70:	617b      	str	r3, [r7, #20]
      out_ep[epnum].DOEPCTL |= (odd_frame_now ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM_Msk : USB_OTG_DOEPCTL_SODDFRM_Msk);
 8005c72:	79bb      	ldrb	r3, [r7, #6]
 8005c74:	015b      	lsls	r3, r3, #5
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	4413      	add	r3, r2
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <edpt_schedule_packets+0x1b4>
 8005c82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8005c86:	e001      	b.n	8005c8c <edpt_schedule_packets+0x1b8>
 8005c88:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8005c8c:	79bb      	ldrb	r3, [r7, #6]
 8005c8e:	015b      	lsls	r3, r3, #5
 8005c90:	6a38      	ldr	r0, [r7, #32]
 8005c92:	4403      	add	r3, r0
 8005c94:	430a      	orrs	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc90      	pop	{r4, r7}
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	50000800 	.word	0x50000800
 8005ca8:	50000b00 	.word	0x50000b00
 8005cac:	50000900 	.word	0x50000900
 8005cb0:	20002d60 	.word	0x20002d60
 8005cb4:	20002e20 	.word	0x20002e20

08005cb8 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005cc6:	60fb      	str	r3, [r7, #12]

  // No HNP/SRP (no OTG support), program timeout later.
  if ( rhport == 1 )
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d106      	bne.n	8005cdc <dcd_init+0x24>
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);

    // Select default internal VBUS Indicator and Drive for ULPI
    usb_otg->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
#else
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	e005      	b.n	8005ce8 <dcd_init+0x30>
    USB_HS_PHYCInit();
#endif
  } else
  {
    // Enable internal PHY
    usb_otg->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	60da      	str	r2, [r3, #12]
  }

  // Reset core after selecting PHY
  // Wait AHB IDLE, reset then wait until it is cleared
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U) {}
 8005ce8:	bf00      	nop
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dafb      	bge.n	8005cea <dcd_init+0x32>
  usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	611a      	str	r2, [r3, #16]
  while ((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST) {}
 8005cfe:	bf00      	nop
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d0f9      	beq.n	8005d00 <dcd_init+0x48>

  // Restart PHY clock
  *((volatile uint32_t *)(RHPORT_REGS_BASE + USB_OTG_PCGCCTL_BASE)) = 0;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <dcd_init+0xc4>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]

  // Clear all interrupts
  usb_otg->GINTSTS |= usb_otg->GINTSTS;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	615a      	str	r2, [r3, #20]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  usb_otg->GINTMSK |= USB_OTG_GINTMSK_OTGINT | USB_OTG_GINTMSK_MMISM;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f043 0206 	orr.w	r2, r3, #6
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	619a      	str	r2, [r3, #24]

  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <dcd_init+0xc8>)
 8005d2e:	60bb      	str	r3, [r7, #8]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dev->DCFG |=  USB_OTG_DCFG_NZLSOHSK;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f043 0204 	orr.w	r2, r3, #4
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	601a      	str	r2, [r3, #0]

  set_speed(rhport, TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL);
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fe9b 	bl	8005a7c <set_speed>

  // Enable internal USB transceiver, unless using HS core (port 1) with external PHY.
  if (!(rhport == 1 && (CFG_TUSB_RHPORT0_MODE & OPT_MODE_HIGH_SPEED))) usb_otg->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38

  usb_otg->GINTMSK |= USB_OTG_GINTMSK_USBRST   | USB_OTG_GINTMSK_ENUMDNEM |
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <dcd_init+0xcc>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6193      	str	r3, [r2, #24]
      USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM     |
      USB_OTG_GINTMSK_RXFLVLM  | (USE_SOF ? USB_OTG_GINTMSK_SOFM : 0);

  // Enable global interrupt
  usb_otg->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f851 	bl	8005e14 <dcd_connect>
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	50000e00 	.word	0x50000e00
 8005d80:	50000800 	.word	0x50000800
 8005d84:	80003810 	.word	0x80003810

08005d88 <dcd_int_enable>:

void dcd_int_enable (uint8_t rhport)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_EnableIRQ(RHPORT_IRQn);
 8005d92:	2043      	movs	r0, #67	; 0x43
 8005d94:	f7ff fcd6 	bl	8005744 <__NVIC_EnableIRQ>
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <dcd_int_disable>:

void dcd_int_disable (uint8_t rhport)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  NVIC_DisableIRQ(RHPORT_IRQn);
 8005daa:	2043      	movs	r0, #67	; 0x43
 8005dac:	f7ff fce8 	bl	8005780 <__NVIC_DisableIRQ>
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <dcd_set_address>:

void dcd_set_address (uint8_t rhport, uint8_t dev_addr)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	71fb      	strb	r3, [r7, #7]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	71bb      	strb	r3, [r7, #6]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <dcd_set_address+0x58>)
 8005dca:	60fb      	str	r3, [r7, #12]
  dev->DCFG = (dev->DCFG & ~USB_OTG_DCFG_DAD_Msk) | (dev_addr << USB_OTG_DCFG_DAD_Pos);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dd4:	79ba      	ldrb	r2, [r7, #6]
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	2300      	movs	r3, #0
 8005de0:	72fb      	strb	r3, [r7, #11]
 8005de2:	2301      	movs	r3, #1
 8005de4:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8005de6:	7abb      	ldrb	r3, [r7, #10]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <dcd_set_address+0x3a>
 8005dec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8005df0:	e000      	b.n	8005df4 <dcd_set_address+0x3c>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8005dfe:	79f8      	ldrb	r0, [r7, #7]
 8005e00:	2300      	movs	r3, #0
 8005e02:	2200      	movs	r2, #0
 8005e04:	f000 f97a 	bl	80060fc <dcd_edpt_xfer>
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	50000800 	.word	0x50000800

08005e14 <dcd_connect>:

  dev->DCTL &= ~USB_OTG_DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005e1e:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <dcd_connect+0x28>)
 8005e20:	60fb      	str	r3, [r7, #12]
  dev->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f023 0202 	bic.w	r2, r3, #2
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	605a      	str	r2, [r3, #4]
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	50000800 	.word	0x50000800

08005e40 <dcd_edpt_open>:
/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b090      	sub	sp, #64	; 0x40
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	6039      	str	r1, [r7, #0]
 8005e4a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8005e4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8005e52:	4b81      	ldr	r3, [pc, #516]	; (8006058 <dcd_edpt_open+0x218>)
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8005e56:	4b81      	ldr	r3, [pc, #516]	; (800605c <dcd_edpt_open+0x21c>)
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8005e5a:	4b81      	ldr	r3, [pc, #516]	; (8006060 <dcd_edpt_open+0x220>)
 8005e5c:	633b      	str	r3, [r7, #48]	; 0x30

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005e64:	7cbb      	ldrb	r3, [r7, #18]
 8005e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	789b      	ldrb	r3, [r3, #2]
 8005e74:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	09db      	lsrs	r3, r3, #7
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  TU_ASSERT(epnum < EP_MAX);
 8005e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e84:	2b05      	cmp	r3, #5
 8005e86:	d90a      	bls.n	8005e9e <dcd_edpt_open+0x5e>
 8005e88:	4b76      	ldr	r3, [pc, #472]	; (8006064 <dcd_edpt_open+0x224>)
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d000      	beq.n	8005e9a <dcd_edpt_open+0x5a>
 8005e98:	be00      	bkpt	0x0000
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e0d8      	b.n	8006050 <dcd_edpt_open+0x210>

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 8005e9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ea6:	0052      	lsls	r2, r2, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	4a6e      	ldr	r2, [pc, #440]	; (8006068 <dcd_edpt_open+0x228>)
 8005eae:	4413      	add	r3, r2
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	889b      	ldrh	r3, [r3, #4]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec0:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	799a      	ldrb	r2, [r3, #6]
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = (xfer->max_size + 3) / 4; // Round up to next full word
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	895b      	ldrh	r3, [r3, #10]
 8005ed2:	3303      	adds	r3, #3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	da00      	bge.n	8005eda <dcd_edpt_open+0x9a>
 8005ed8:	3303      	adds	r3, #3
 8005eda:	109b      	asrs	r3, r3, #2
 8005edc:	84fb      	strh	r3, [r7, #38]	; 0x26

  if(dir == TUSB_DIR_OUT)
 8005ede:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d152      	bne.n	8005f8c <dcd_edpt_open+0x14c>
  {
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_rx_ff_size(4*fifo_size);
 8005ee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fc6b 	bl	80057c8 <calc_rx_ff_size>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	83fb      	strh	r3, [r7, #30]

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (usb_otg->GRXFSIZ < sz)
 8005ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005efa:	8bfb      	ldrh	r3, [r7, #30]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d214      	bcs.n	8005f2a <dcd_edpt_open+0xea>
    {
      TU_ASSERT(sz + _allocated_fifo_words_tx <= EP_FIFO_SIZE/4);
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	4a5a      	ldr	r2, [pc, #360]	; (800606c <dcd_edpt_open+0x22c>)
 8005f04:	8812      	ldrh	r2, [r2, #0]
 8005f06:	4413      	add	r3, r2
 8005f08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005f0c:	dd0a      	ble.n	8005f24 <dcd_edpt_open+0xe4>
 8005f0e:	4b55      	ldr	r3, [pc, #340]	; (8006064 <dcd_edpt_open+0x224>)
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <dcd_edpt_open+0xe0>
 8005f1e:	be00      	bkpt	0x0000
 8005f20:	2300      	movs	r3, #0
 8005f22:	e095      	b.n	8006050 <dcd_edpt_open+0x210>

      // Enlarge RX FIFO
      usb_otg->GRXFSIZ = sz;
 8005f24:	8bfa      	ldrh	r2, [r7, #30]
 8005f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8005f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f2e:	015b      	lsls	r3, r3, #5
 8005f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f32:	4413      	add	r3, r2
 8005f34:	681a      	ldr	r2, [r3, #0]
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	049b      	lsls	r3, r3, #18
 8005f42:	4619      	mov	r1, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d002      	beq.n	8005f58 <dcd_edpt_open+0x118>
 8005f52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f56:	e000      	b.n	8005f5a <dcd_edpt_open+0x11a>
 8005f58:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DOEPCTL_EPTYP_Pos)   |
 8005f5a:	430b      	orrs	r3, r1
        (xfer->max_size << USB_OTG_DOEPCTL_MPSIZ_Pos);
 8005f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5e:	8949      	ldrh	r1, [r1, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DOEPCTL_SD0PID_SEVNFRM : 0) |
 8005f60:	430b      	orrs	r3, r1
    out_ep[epnum].DOEPCTL |= (1 << USB_OTG_DOEPCTL_USBAEP_Pos)        |
 8005f62:	431a      	orrs	r2, r3
 8005f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f72:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_OEPM_Pos + epnum));
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005f7c:	3210      	adds	r2, #16
 8005f7e:	2101      	movs	r1, #1
 8005f80:	fa01 f202 	lsl.w	r2, r1, r2
 8005f84:	431a      	orrs	r2, r3
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	e060      	b.n	800604e <dcd_edpt_open+0x20e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + usb_otg->GRXFSIZ <= EP_FIFO_SIZE/4);
 8005f8c:	4b37      	ldr	r3, [pc, #220]	; (800606c <dcd_edpt_open+0x22c>)
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f94:	4413      	add	r3, r2
 8005f96:	461a      	mov	r2, r3
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005fa2:	d90a      	bls.n	8005fba <dcd_edpt_open+0x17a>
 8005fa4:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <dcd_edpt_open+0x224>)
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d000      	beq.n	8005fb6 <dcd_edpt_open+0x176>
 8005fb4:	be00      	bkpt	0x0000
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e04a      	b.n	8006050 <dcd_edpt_open+0x210>

    _allocated_fifo_words_tx += fifo_size;
 8005fba:	4b2c      	ldr	r3, [pc, #176]	; (800606c <dcd_edpt_open+0x22c>)
 8005fbc:	881a      	ldrh	r2, [r3, #0]
 8005fbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fc0:	4413      	add	r3, r2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	4b29      	ldr	r3, [pc, #164]	; (800606c <dcd_edpt_open+0x22c>)
 8005fc6:	801a      	strh	r2, [r3, #0]

    TU_LOG(2, "    Allocated %u bytes at offset %u", fifo_size*4, EP_FIFO_SIZE-_allocated_fifo_words_tx*4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    usb_otg->DIEPTXF[epnum - 1] = (fifo_size << USB_OTG_DIEPTXF_INEPTXFD_Pos) | (EP_FIFO_SIZE/4 - _allocated_fifo_words_tx);
 8005fc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fca:	041a      	lsls	r2, r3, #16
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <dcd_edpt_open+0x22c>)
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe0:	3340      	adds	r3, #64	; 0x40
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	6059      	str	r1, [r3, #4]

    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8005fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fec:	015b      	lsls	r3, r3, #5
 8005fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff0:	4413      	add	r3, r2
 8005ff2:	6819      	ldr	r1, [r3, #0]
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 8005ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ff8:	059b      	lsls	r3, r3, #22
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 8005ffa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006006:	b2db      	uxtb	r3, r3
 8006008:	049b      	lsls	r3, r3, #18
        (epnum << USB_OTG_DIEPCTL_TXFNUM_Pos) |
 800600a:	4313      	orrs	r3, r2
 800600c:	461a      	mov	r2, r3
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d002      	beq.n	8006022 <dcd_edpt_open+0x1e2>
 800601c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006020:	e000      	b.n	8006024 <dcd_edpt_open+0x1e4>
 8006022:	2300      	movs	r3, #0
        (desc_edpt->bmAttributes.xfer << USB_OTG_DIEPCTL_EPTYP_Pos) |
 8006024:	4313      	orrs	r3, r2
        (xfer->max_size << USB_OTG_DIEPCTL_MPSIZ_Pos);
 8006026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006028:	8952      	ldrh	r2, [r2, #10]
        (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? USB_OTG_DIEPCTL_SD0PID_SEVNFRM : 0) |
 800602a:	431a      	orrs	r2, r3
    in_ep[epnum].DIEPCTL |= (1 << USB_OTG_DIEPCTL_USBAEP_Pos) |
 800602c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006030:	015b      	lsls	r3, r3, #5
 8006032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006034:	4403      	add	r3, r0
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]

    dev->DAINTMSK |= (1 << (USB_OTG_DAINTMSK_IEPM_Pos + epnum));
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f202 	lsl.w	r2, r1, r2
 8006048:	431a      	orrs	r2, r3
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	61da      	str	r2, [r3, #28]
  }

  return true;
 800604e:	2301      	movs	r3, #1
}
 8006050:	4618      	mov	r0, r3
 8006052:	3740      	adds	r7, #64	; 0x40
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	50000800 	.word	0x50000800
 800605c:	50000b00 	.word	0x50000b00
 8006060:	50000900 	.word	0x50000900
 8006064:	e000edf0 	.word	0xe000edf0
 8006068:	20002d60 	.word	0x20002d60
 800606c:	20002e24 	.word	0x20002e24

08006070 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all (uint8_t rhport)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

//  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 800607a:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <dcd_edpt_close_all+0x78>)
 800607c:	613b      	str	r3, [r7, #16]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 800607e:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <dcd_edpt_close_all+0x7c>)
 8006080:	60fb      	str	r3, [r7, #12]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <dcd_edpt_close_all+0x80>)
 8006084:	60bb      	str	r3, [r7, #8]

  // Disable non-control interrupt
  dev->DAINTMSK = (1 << USB_OTG_DAINTMSK_OEPM_Pos) | (1 << USB_OTG_DAINTMSK_IEPM_Pos);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800608c:	61da      	str	r2, [r3, #28]

  for(uint8_t n = 1; n < EP_MAX; n++)
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
 8006092:	e01c      	b.n	80060ce <dcd_edpt_close_all+0x5e>
  {
    // disable OUT endpoint
    out_ep[n].DOEPCTL = 0;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <dcd_edpt_close_all+0x84>)
 80060a4:	015b      	lsls	r3, r3, #5
 80060a6:	4413      	add	r3, r2
 80060a8:	330a      	adds	r3, #10
 80060aa:	2200      	movs	r2, #0
 80060ac:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    in_ep[n].DIEPCTL = 0;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	015b      	lsls	r3, r3, #5
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <dcd_edpt_close_all+0x84>)
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	4413      	add	r3, r2
 80060c2:	331a      	adds	r3, #26
 80060c4:	2200      	movs	r2, #0
 80060c6:	801a      	strh	r2, [r3, #0]
  for(uint8_t n = 1; n < EP_MAX; n++)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	3301      	adds	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d9df      	bls.n	8006094 <dcd_edpt_close_all+0x24>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 80060d4:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <dcd_edpt_close_all+0x88>)
 80060d6:	2210      	movs	r2, #16
 80060d8:	801a      	strh	r2, [r3, #0]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	50000800 	.word	0x50000800
 80060ec:	50000b00 	.word	0x50000b00
 80060f0:	50000900 	.word	0x50000900
 80060f4:	20002d60 	.word	0x20002d60
 80060f8:	20002e24 	.word	0x20002e24

080060fc <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b089      	sub	sp, #36	; 0x24
 8006100:	af02      	add	r7, sp, #8
 8006102:	603a      	str	r2, [r7, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	4603      	mov	r3, r0
 8006108:	71fb      	strb	r3, [r7, #7]
 800610a:	460b      	mov	r3, r1
 800610c:	71bb      	strb	r3, [r7, #6]
 800610e:	4613      	mov	r3, r2
 8006110:	80bb      	strh	r3, [r7, #4]
 8006112:	79bb      	ldrb	r3, [r7, #6]
 8006114:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006116:	7b3b      	ldrb	r3, [r7, #12]
 8006118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800611e:	757b      	strb	r3, [r7, #21]
 8006120:	79bb      	ldrb	r3, [r7, #6]
 8006122:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006124:	7b7b      	ldrb	r3, [r7, #13]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800612a:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, dir);
 800612c:	7d7a      	ldrb	r2, [r7, #21]
 800612e:	7d3b      	ldrb	r3, [r7, #20]
 8006130:	0052      	lsls	r2, r2, #1
 8006132:	4413      	add	r3, r2
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <dcd_edpt_xfer+0xc8>)
 8006138:	4413      	add	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
  xfer->buffer      = buffer;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	601a      	str	r2, [r3, #0]
  xfer->ff          = NULL;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]
  xfer->total_len   = total_bytes;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	88ba      	ldrh	r2, [r7, #4]
 800614c:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if(epnum == 0) {
 800614e:	7d7b      	ldrb	r3, [r7, #21]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d111      	bne.n	8006178 <dcd_edpt_xfer+0x7c>
    ep0_pending[dir] = total_bytes;
 8006154:	7d3b      	ldrb	r3, [r7, #20]
 8006156:	491c      	ldr	r1, [pc, #112]	; (80061c8 <dcd_edpt_xfer+0xcc>)
 8006158:	88ba      	ldrh	r2, [r7, #4]
 800615a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 800615e:	7d3b      	ldrb	r3, [r7, #20]
 8006160:	4a19      	ldr	r2, [pc, #100]	; (80061c8 <dcd_edpt_xfer+0xcc>)
 8006162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006166:	7d3a      	ldrb	r2, [r7, #20]
 8006168:	7d79      	ldrb	r1, [r7, #21]
 800616a:	79f8      	ldrb	r0, [r7, #7]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2301      	movs	r3, #1
 8006170:	f7ff fcb0 	bl	8005ad4 <edpt_schedule_packets>
    return true;
 8006174:	2301      	movs	r3, #1
 8006176:	e021      	b.n	80061bc <dcd_edpt_xfer+0xc0>
  }

  uint16_t num_packets = (total_bytes / xfer->max_size);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	88ba      	ldrh	r2, [r7, #4]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	82fb      	strh	r3, [r7, #22]
  uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	895a      	ldrh	r2, [r3, #10]
 8006188:	88bb      	ldrh	r3, [r7, #4]
 800618a:	fbb3 f1f2 	udiv	r1, r3, r2
 800618e:	fb01 f202 	mul.w	r2, r1, r2
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	81fb      	strh	r3, [r7, #14]

  // Zero-size packet is special case.
  if(short_packet_size > 0 || (total_bytes == 0)) {
 8006196:	89fb      	ldrh	r3, [r7, #14]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <dcd_edpt_xfer+0xa6>
 800619c:	88bb      	ldrh	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <dcd_edpt_xfer+0xac>
    num_packets++;
 80061a2:	8afb      	ldrh	r3, [r7, #22]
 80061a4:	3301      	adds	r3, #1
 80061a6:	82fb      	strh	r3, [r7, #22]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80061a8:	8afc      	ldrh	r4, [r7, #22]
 80061aa:	7d3a      	ldrb	r2, [r7, #20]
 80061ac:	7d79      	ldrb	r1, [r7, #21]
 80061ae:	79f8      	ldrb	r0, [r7, #7]
 80061b0:	88bb      	ldrh	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	4623      	mov	r3, r4
 80061b6:	f7ff fc8d 	bl	8005ad4 <edpt_schedule_packets>

  return true;
 80061ba:	2301      	movs	r3, #1
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}
 80061c4:	20002d60 	.word	0x20002d60
 80061c8:	20002e20 	.word	0x20002e20

080061cc <dcd_edpt_disable>:

  return true;
}

static void dcd_edpt_disable (uint8_t rhport, uint8_t ep_addr, bool stall)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
 80061d6:	460b      	mov	r3, r1
 80061d8:	71bb      	strb	r3, [r7, #6]
 80061da:	4613      	mov	r3, r2
 80061dc:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 80061de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80061e2:	61fb      	str	r3, [r7, #28]
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 80061e4:	4b6c      	ldr	r3, [pc, #432]	; (8006398 <dcd_edpt_disable+0x1cc>)
 80061e6:	61bb      	str	r3, [r7, #24]
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80061e8:	4b6c      	ldr	r3, [pc, #432]	; (800639c <dcd_edpt_disable+0x1d0>)
 80061ea:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80061ec:	4b6c      	ldr	r3, [pc, #432]	; (80063a0 <dcd_edpt_disable+0x1d4>)
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	79bb      	ldrb	r3, [r7, #6]
 80061f2:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80061f4:	7b3b      	ldrb	r3, [r7, #12]
 80061f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fa:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	79bb      	ldrb	r3, [r7, #6]
 8006200:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006202:	7b7b      	ldrb	r3, [r7, #13]
 8006204:	09db      	lsrs	r3, r3, #7
 8006206:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006208:	73bb      	strb	r3, [r7, #14]

  if(dir == TUSB_DIR_IN) {
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d16a      	bne.n	80062e6 <dcd_edpt_disable+0x11a>
    // Only disable currently enabled non-control endpoint
    if ( (epnum == 0) || !(in_ep[epnum].DIEPCTL & USB_OTG_DIEPCTL_EPENA) ){
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <dcd_edpt_disable+0x58>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	015b      	lsls	r3, r3, #5
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4413      	add	r3, r2
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db13      	blt.n	800624c <dcd_edpt_disable+0x80>
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	015b      	lsls	r3, r3, #5
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	797b      	ldrb	r3, [r7, #5]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <dcd_edpt_disable+0x6e>
 8006234:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 8006238:	e001      	b.n	800623e <dcd_edpt_disable+0x72>
 800623a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	015b      	lsls	r3, r3, #5
 8006242:	6938      	ldr	r0, [r7, #16]
 8006244:	4403      	add	r3, r0
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e037      	b.n	80062bc <dcd_edpt_disable+0xf0>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	015b      	lsls	r3, r3, #5
 800625a:	6939      	ldr	r1, [r7, #16]
 800625c:	440b      	add	r3, r1
 800625e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006262:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_INEPNE) == 0);
 8006264:	bf00      	nop
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	015b      	lsls	r3, r3, #5
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f6      	beq.n	8006266 <dcd_edpt_disable+0x9a>

      // Disable the endpoint.
      in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_EPDIS | (stall ? USB_OTG_DIEPCTL_STALL : 0);
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	797b      	ldrb	r3, [r7, #5]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <dcd_edpt_disable+0xc0>
 8006288:	4946      	ldr	r1, [pc, #280]	; (80063a4 <dcd_edpt_disable+0x1d8>)
 800628a:	e001      	b.n	8006290 <dcd_edpt_disable+0xc4>
 800628c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	015b      	lsls	r3, r3, #5
 8006294:	6938      	ldr	r0, [r7, #16]
 8006296:	4403      	add	r3, r0
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
      while((in_ep[epnum].DIEPINT & USB_OTG_DIEPINT_EPDISD_Msk) == 0);
 800629c:	bf00      	nop
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	015b      	lsls	r3, r3, #5
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f6      	beq.n	800629e <dcd_edpt_disable+0xd2>
      in_ep[epnum].DIEPINT = USB_OTG_DIEPINT_EPDISD;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	015b      	lsls	r3, r3, #5
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	2202      	movs	r2, #2
 80062ba:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    usb_otg->GRSTCTL |= (epnum << USB_OTG_GRSTCTL_TXFNUM_Pos);
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	7bfa      	ldrb	r2, [r7, #15]
 80062c2:	0192      	lsls	r2, r2, #6
 80062c4:	431a      	orrs	r2, r3
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	611a      	str	r2, [r3, #16]
    usb_otg->GRSTCTL |= USB_OTG_GRSTCTL_TXFFLSH;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	611a      	str	r2, [r3, #16]
    while((usb_otg->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH_Msk) != 0);
 80062d6:	bf00      	nop
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f9      	bne.n	80062d8 <dcd_edpt_disable+0x10c>

      // Allow other OUT endpoints to keep receiving.
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
    }
  }
}
 80062e4:	e051      	b.n	800638a <dcd_edpt_disable+0x1be>
    if ( (epnum == 0) || !(out_ep[epnum].DOEPCTL & USB_OTG_DOEPCTL_EPENA) ){
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d006      	beq.n	80062fa <dcd_edpt_disable+0x12e>
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	015b      	lsls	r3, r3, #5
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	db12      	blt.n	8006320 <dcd_edpt_disable+0x154>
      out_ep[epnum].DOEPCTL |= stall ? USB_OTG_DOEPCTL_STALL : 0;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	015b      	lsls	r3, r3, #5
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	797b      	ldrb	r3, [r7, #5]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <dcd_edpt_disable+0x144>
 800630a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800630e:	e000      	b.n	8006312 <dcd_edpt_disable+0x146>
 8006310:	2100      	movs	r1, #0
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	015b      	lsls	r3, r3, #5
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	4403      	add	r3, r0
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]
}
 800631e:	e034      	b.n	800638a <dcd_edpt_disable+0x1be>
      dev->DCTL |= USB_OTG_DCTL_SGONAK;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	605a      	str	r2, [r3, #4]
      while((usb_otg->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF_Msk) == 0);
 800632c:	bf00      	nop
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f9      	beq.n	800632e <dcd_edpt_disable+0x162>
      out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_EPDIS | (stall ? USB_OTG_DOEPCTL_STALL : 0);
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	015b      	lsls	r3, r3, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	797b      	ldrb	r3, [r7, #5]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <dcd_edpt_disable+0x182>
 800634a:	4916      	ldr	r1, [pc, #88]	; (80063a4 <dcd_edpt_disable+0x1d8>)
 800634c:	e001      	b.n	8006352 <dcd_edpt_disable+0x186>
 800634e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	015b      	lsls	r3, r3, #5
 8006356:	6978      	ldr	r0, [r7, #20]
 8006358:	4403      	add	r3, r0
 800635a:	430a      	orrs	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
      while((out_ep[epnum].DOEPINT & USB_OTG_DOEPINT_EPDISD_Msk) == 0);
 800635e:	bf00      	nop
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f6      	beq.n	8006360 <dcd_edpt_disable+0x194>
      out_ep[epnum].DOEPINT = USB_OTG_DOEPINT_EPDISD;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	015b      	lsls	r3, r3, #5
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	2202      	movs	r2, #2
 800637c:	609a      	str	r2, [r3, #8]
      dev->DCTL |= USB_OTG_DCTL_CGONAK;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	605a      	str	r2, [r3, #4]
}
 800638a:	bf00      	nop
 800638c:	3724      	adds	r7, #36	; 0x24
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	50000800 	.word	0x50000800
 800639c:	50000b00 	.word	0x50000b00
 80063a0:	50000900 	.word	0x50000900
 80063a4:	40200000 	.word	0x40200000

080063a8 <dcd_edpt_stall>:
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	460a      	mov	r2, r1
 80063b2:	71fb      	strb	r3, [r7, #7]
 80063b4:	4613      	mov	r3, r2
 80063b6:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 80063b8:	79b9      	ldrb	r1, [r7, #6]
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	2201      	movs	r2, #1
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ff04 	bl	80061cc <dcd_edpt_disable>
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	460a      	mov	r2, r1
 80063d6:	71fb      	strb	r3, [r7, #7]
 80063d8:	4613      	mov	r3, r2
 80063da:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <dcd_edpt_clear_stall+0xa8>)
 80063de:	617b      	str	r3, [r7, #20]
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <dcd_edpt_clear_stall+0xac>)
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	79bb      	ldrb	r3, [r7, #6]
 80063e6:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80063e8:	7b3b      	ldrb	r3, [r7, #12]
 80063ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ee:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	79bb      	ldrb	r3, [r7, #6]
 80063f4:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80063f6:	7b7b      	ldrb	r3, [r7, #13]
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80063fc:	73bb      	strb	r3, [r7, #14]

  // Clear stall and reset data toggle
  if(dir == TUSB_DIR_IN) {
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d118      	bne.n	8006436 <dcd_edpt_clear_stall+0x6a>
    in_ep[epnum].DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	015b      	lsls	r3, r3, #5
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	015b      	lsls	r3, r3, #5
 8006412:	6939      	ldr	r1, [r7, #16]
 8006414:	440b      	add	r3, r1
 8006416:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800641a:	601a      	str	r2, [r3, #0]
    in_ep[epnum].DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	015b      	lsls	r3, r3, #5
 800642a:	6939      	ldr	r1, [r7, #16]
 800642c:	440b      	add	r3, r1
 800642e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
  } else {
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8006434:	e017      	b.n	8006466 <dcd_edpt_clear_stall+0x9a>
    out_ep[epnum].DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	015b      	lsls	r3, r3, #5
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	015b      	lsls	r3, r3, #5
 8006444:	6979      	ldr	r1, [r7, #20]
 8006446:	440b      	add	r3, r1
 8006448:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800644c:	601a      	str	r2, [r3, #0]
    out_ep[epnum].DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	015b      	lsls	r3, r3, #5
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	015b      	lsls	r3, r3, #5
 800645c:	6979      	ldr	r1, [r7, #20]
 800645e:	440b      	add	r3, r1
 8006460:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	50000b00 	.word	0x50000b00
 8006478:	50000900 	.word	0x50000900

0800647c <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t * dst, uint16_t len)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
 8006488:	4613      	mov	r3, r2
 800648a:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 800648c:	4b28      	ldr	r3, [pc, #160]	; (8006530 <read_fifo_packet+0xb4>)
 800648e:	61bb      	str	r3, [r7, #24]

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8006490:	88bb      	ldrh	r3, [r7, #4]
 8006492:	089b      	lsrs	r3, r3, #2
 8006494:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < full_words; i++) {
 8006496:	2300      	movs	r3, #0
 8006498:	83fb      	strh	r3, [r7, #30]
 800649a:	e01e      	b.n	80064da <read_fifo_packet+0x5e>
    uint32_t tmp = *rx_fifo;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
    dst[0] = tmp & 0x000000FF;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	701a      	strb	r2, [r3, #0]
    dst[1] = (tmp & 0x0000FF00) >> 8;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	0a1a      	lsrs	r2, r3, #8
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
    dst[2] = (tmp & 0x00FF0000) >> 16;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	0c1a      	lsrs	r2, r3, #16
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	3302      	adds	r3, #2
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
    dst[3] = (tmp & 0xFF000000) >> 24;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	0e1a      	lsrs	r2, r3, #24
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	3303      	adds	r3, #3
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
    dst += 4;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3304      	adds	r3, #4
 80064d2:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++) {
 80064d4:	8bfb      	ldrh	r3, [r7, #30]
 80064d6:	3301      	adds	r3, #1
 80064d8:	83fb      	strh	r3, [r7, #30]
 80064da:	8bfa      	ldrh	r2, [r7, #30]
 80064dc:	8afb      	ldrh	r3, [r7, #22]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d3dc      	bcc.n	800649c <read_fifo_packet+0x20>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t bytes_rem = len & 0x03;
 80064e2:	88bb      	ldrh	r3, [r7, #4]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	757b      	strb	r3, [r7, #21]
  if(bytes_rem != 0) {
 80064ec:	7d7b      	ldrb	r3, [r7, #21]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <read_fifo_packet+0xa8>
    uint32_t tmp = *rx_fifo;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	613b      	str	r3, [r7, #16]
    dst[0] = tmp & 0x000000FF;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	701a      	strb	r2, [r3, #0]
    if(bytes_rem > 1) {
 8006500:	7d7b      	ldrb	r3, [r7, #21]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d905      	bls.n	8006512 <read_fifo_packet+0x96>
      dst[1] = (tmp & 0x0000FF00) >> 8;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	0a1a      	lsrs	r2, r3, #8
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
    }
    if(bytes_rem > 2) {
 8006512:	7d7b      	ldrb	r3, [r7, #21]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d905      	bls.n	8006524 <read_fifo_packet+0xa8>
      dst[2] = (tmp & 0x00FF0000) >> 16;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	0c1a      	lsrs	r2, r3, #16
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	3302      	adds	r3, #2
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8006524:	bf00      	nop
 8006526:	3724      	adds	r7, #36	; 0x24
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	50001000 	.word	0x50001000

08006534 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t * src, uint16_t len)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	603a      	str	r2, [r7, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
 8006542:	460b      	mov	r3, r1
 8006544:	71bb      	strb	r3, [r7, #6]
 8006546:	4613      	mov	r3, r2
 8006548:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  usb_fifo_t tx_fifo = FIFO_BASE(rhport, fifo_num);
 800654a:	79bb      	ldrb	r3, [r7, #6]
 800654c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8006550:	3301      	adds	r3, #1
 8006552:	031b      	lsls	r3, r3, #12
 8006554:	60fb      	str	r3, [r7, #12]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8006556:	88bb      	ldrh	r3, [r7, #4]
 8006558:	089b      	lsrs	r3, r3, #2
 800655a:	817b      	strh	r3, [r7, #10]
  for(uint16_t i = 0; i < full_words; i++){
 800655c:	2300      	movs	r3, #0
 800655e:	82fb      	strh	r3, [r7, #22]
 8006560:	e019      	b.n	8006596 <write_fifo_packet+0x62>
    *tx_fifo = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	3303      	adds	r3, #3
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	061a      	lsls	r2, r3, #24
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	3302      	adds	r3, #2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	041b      	lsls	r3, r3, #16
 8006572:	431a      	orrs	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	4313      	orrs	r3, r2
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	461a      	mov	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]
    src += 4;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	3304      	adds	r3, #4
 800658e:	603b      	str	r3, [r7, #0]
  for(uint16_t i = 0; i < full_words; i++){
 8006590:	8afb      	ldrh	r3, [r7, #22]
 8006592:	3301      	adds	r3, #1
 8006594:	82fb      	strh	r3, [r7, #22]
 8006596:	8afa      	ldrh	r2, [r7, #22]
 8006598:	897b      	ldrh	r3, [r7, #10]
 800659a:	429a      	cmp	r2, r3
 800659c:	d3e1      	bcc.n	8006562 <write_fifo_packet+0x2e>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t bytes_rem = len & 0x03;
 800659e:	88bb      	ldrh	r3, [r7, #4]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	727b      	strb	r3, [r7, #9]
  if(bytes_rem){
 80065a8:	7a7b      	ldrb	r3, [r7, #9]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d020      	beq.n	80065f0 <write_fifo_packet+0xbc>
    uint32_t tmp_word = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	613b      	str	r3, [r7, #16]
    tmp_word |= src[0];
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]
    if(bytes_rem > 1){
 80065be:	7a7b      	ldrb	r3, [r7, #9]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d907      	bls.n	80065d4 <write_fifo_packet+0xa0>
      tmp_word |= src[1] << 8;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	461a      	mov	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
    }
    if(bytes_rem > 2){
 80065d4:	7a7b      	ldrb	r3, [r7, #9]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d907      	bls.n	80065ea <write_fifo_packet+0xb6>
      tmp_word |= src[2] << 16;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	3302      	adds	r3, #2
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	041b      	lsls	r3, r3, #16
 80065e2:	461a      	mov	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
    }
    *tx_fifo = tmp_word;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	601a      	str	r2, [r3, #0]
  }
}
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <handle_rxflvl_ints>:

static void handle_rxflvl_ints(uint8_t rhport, USB_OTG_OUTEndpointTypeDef * out_ep) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006608:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800660c:	61fb      	str	r3, [r7, #28]
  usb_fifo_t rx_fifo = FIFO_BASE(rhport, 0);
 800660e:	4b49      	ldr	r3, [pc, #292]	; (8006734 <handle_rxflvl_ints+0x138>)
 8006610:	61bb      	str	r3, [r7, #24]

  // Pop control word off FIFO
  uint32_t ctl_word = usb_otg->GRXSTSP;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  uint8_t pktsts = (ctl_word & USB_OTG_GRXSTSP_PKTSTS_Msk) >> USB_OTG_GRXSTSP_PKTSTS_Pos;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	0c5b      	lsrs	r3, r3, #17
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	74fb      	strb	r3, [r7, #19]
  uint8_t epnum = (ctl_word &  USB_OTG_GRXSTSP_EPNUM_Msk) >>  USB_OTG_GRXSTSP_EPNUM_Pos;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	74bb      	strb	r3, [r7, #18]
  uint16_t bcnt = (ctl_word & USB_OTG_GRXSTSP_BCNT_Msk) >> USB_OTG_GRXSTSP_BCNT_Pos;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	b29b      	uxth	r3, r3
 8006634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006638:	823b      	strh	r3, [r7, #16]

  switch(pktsts) {
 800663a:	7cfb      	ldrb	r3, [r7, #19]
 800663c:	3b01      	subs	r3, #1
 800663e:	2b05      	cmp	r3, #5
 8006640:	d864      	bhi.n	800670c <handle_rxflvl_ints+0x110>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <handle_rxflvl_ints+0x4c>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006721 	.word	0x08006721
 800664c:	08006661 	.word	0x08006661
 8006650:	08006721 	.word	0x08006721
 8006654:	080066e1 	.word	0x080066e1
 8006658:	0800670d 	.word	0x0800670d
 800665c:	080066fb 	.word	0x080066fb
    case 0x01: // Global OUT NAK (Interrupt)
      break;

    case 0x02: // Out packet recvd
    {
      xfer_ctl_t * xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8006660:	7cbb      	ldrb	r3, [r7, #18]
 8006662:	015b      	lsls	r3, r3, #5
 8006664:	4a34      	ldr	r2, [pc, #208]	; (8006738 <handle_rxflvl_ints+0x13c>)
 8006666:	4413      	add	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

      // Read packet off RxFIFO
      if (xfer->ff)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <handle_rxflvl_ints+0x86>
      {
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void *)(uintptr_t) rx_fifo, bcnt);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	8a3a      	ldrh	r2, [r7, #16]
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd fabf 	bl	8003bfe <tu_fifo_write_n_const_addr_full_words>
 8006680:	e00c      	b.n	800669c <handle_rxflvl_ints+0xa0>
      }
      else
      {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6819      	ldr	r1, [r3, #0]
 8006686:	8a3a      	ldrh	r2, [r7, #16]
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff fef6 	bl	800647c <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	8a3b      	ldrh	r3, [r7, #16]
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if(bcnt < xfer->max_size) {
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	895b      	ldrh	r3, [r3, #10]
 80066a0:	8a3a      	ldrh	r2, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d23e      	bcs.n	8006724 <handle_rxflvl_ints+0x128>
        xfer->total_len -= (out_ep[epnum].DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DOEPTSIZ_XFRSIZ_Pos;
 80066a6:	7cbb      	ldrb	r3, [r7, #18]
 80066a8:	015b      	lsls	r3, r3, #5
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f3c3 0112 	ubfx	r1, r3, #0, #19
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	891a      	ldrh	r2, [r3, #8]
 80066b8:	b28b      	uxth	r3, r1
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	811a      	strh	r2, [r3, #8]
        if(epnum == 0) {
 80066c2:	7cbb      	ldrb	r3, [r7, #18]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d12d      	bne.n	8006724 <handle_rxflvl_ints+0x128>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	891a      	ldrh	r2, [r3, #8]
 80066cc:	4b1b      	ldr	r3, [pc, #108]	; (800673c <handle_rxflvl_ints+0x140>)
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <handle_rxflvl_ints+0x140>)
 80066da:	2200      	movs	r2, #0
 80066dc:	801a      	strh	r2, [r3, #0]
        }
      }
    }
    break;
 80066de:	e021      	b.n	8006724 <handle_rxflvl_ints+0x128>

    case 0x03: // Out packet done (Interrupt)
      break;

    case 0x04: // Setup packet done (Interrupt)
      out_ep[epnum].DOEPTSIZ |= (3 << USB_OTG_DOEPTSIZ_STUPCNT_Pos);
 80066e0:	7cbb      	ldrb	r3, [r7, #18]
 80066e2:	015b      	lsls	r3, r3, #5
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	4413      	add	r3, r2
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	7cbb      	ldrb	r3, [r7, #18]
 80066ec:	015b      	lsls	r3, r3, #5
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	440b      	add	r3, r1
 80066f2:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80066f6:	611a      	str	r2, [r3, #16]
      break;
 80066f8:	e017      	b.n	800672a <handle_rxflvl_ints+0x12e>

    case 0x06: // Setup packet recvd
      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (* rx_fifo);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a10      	ldr	r2, [pc, #64]	; (8006740 <handle_rxflvl_ints+0x144>)
 8006700:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (* rx_fifo);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <handle_rxflvl_ints+0x144>)
 8006708:	6053      	str	r3, [r2, #4]
      break;
 800670a:	e00e      	b.n	800672a <handle_rxflvl_ints+0x12e>

    default: // Invalid
      TU_BREAKPOINT();
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <handle_rxflvl_ints+0x148>)
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <handle_rxflvl_ints+0x12c>
 800671c:	be00      	bkpt	0x0000
      break;
 800671e:	e003      	b.n	8006728 <handle_rxflvl_ints+0x12c>
      break;
 8006720:	bf00      	nop
 8006722:	e002      	b.n	800672a <handle_rxflvl_ints+0x12e>
    break;
 8006724:	bf00      	nop
 8006726:	e000      	b.n	800672a <handle_rxflvl_ints+0x12e>
      break;
 8006728:	bf00      	nop
  }
}
 800672a:	bf00      	nop
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	50001000 	.word	0x50001000
 8006738:	20002d60 	.word	0x20002d60
 800673c:	20002e20 	.word	0x20002e20
 8006740:	20002d58 	.word	0x20002d58
 8006744:	e000edf0 	.word	0xe000edf0

08006748 <handle_epout_ints>:

static void handle_epout_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_OUTEndpointTypeDef * out_ep) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b094      	sub	sp, #80	; 0x50
 800674c:	af02      	add	r7, sp, #8
 800674e:	4603      	mov	r3, r0
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006756:	2300      	movs	r3, #0
 8006758:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800675c:	e09e      	b.n	800689c <handle_epout_ints+0x154>
    xfer_ctl_t * xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 800675e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006762:	015b      	lsls	r3, r3, #5
 8006764:	4a52      	ldr	r2, [pc, #328]	; (80068b0 <handle_epout_ints+0x168>)
 8006766:	4413      	add	r3, r2
 8006768:	643b      	str	r3, [r7, #64]	; 0x40

    if(dev->DAINT & (1 << (USB_OTG_DAINT_OEPINT_Pos + n))) {
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006772:	3210      	adds	r2, #16
 8006774:	2101      	movs	r1, #1
 8006776:	fa01 f202 	lsl.w	r2, r1, r2
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8088 	beq.w	8006892 <handle_epout_ints+0x14a>
      // SETUP packet Setup Phase done.
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_STUP) {
 8006782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006786:	015b      	lsls	r3, r3, #5
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d028      	beq.n	80067e8 <handle_epout_ints+0xa0>
        out_ep[n].DOEPINT =  USB_OTG_DOEPINT_STUP;
 8006796:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	2208      	movs	r2, #8
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80067aa:	4b42      	ldr	r3, [pc, #264]	; (80068b4 <handle_epout_ints+0x16c>)
 80067ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80067b4:	f107 0314 	add.w	r3, r7, #20
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067c4:	753b      	strb	r3, [r7, #20]
 80067c6:	2306      	movs	r3, #6
 80067c8:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, 8);
 80067ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067cc:	f107 0318 	add.w	r3, r7, #24
 80067d0:	6810      	ldr	r0, [r2, #0]
 80067d2:	6851      	ldr	r1, [r2, #4]
 80067d4:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80067d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80067da:	f107 0314 	add.w	r3, r7, #20
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fe f95d 	bl	8004aa0 <dcd_event_handler>
}
 80067e6:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) &_setup_packet[0], true);
      }

      // OUT XFER complete
      if(out_ep[n].DOEPINT & USB_OTG_DOEPINT_XFRC) {
 80067e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80067ec:	015b      	lsls	r3, r3, #5
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	4413      	add	r3, r2
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d04a      	beq.n	8006892 <handle_epout_ints+0x14a>
        out_ep[n].DOEPINT = USB_OTG_DOEPINT_XFRC;
 80067fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006800:	015b      	lsls	r3, r3, #5
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	2201      	movs	r2, #1
 8006808:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 800680a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10e      	bne.n	8006830 <handle_epout_ints+0xe8>
 8006812:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <handle_epout_ints+0x170>)
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <handle_epout_ints+0xe8>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800681a:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <handle_epout_ints+0x170>)
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8006822:	7bf8      	ldrb	r0, [r7, #15]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2301      	movs	r3, #1
 8006828:	2200      	movs	r2, #0
 800682a:	f7ff f953 	bl	8005ad4 <edpt_schedule_packets>
 800682e:	e030      	b.n	8006892 <handle_epout_ints+0x14a>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8006830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006832:	891b      	ldrh	r3, [r3, #8]
 8006834:	461a      	mov	r2, r3
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800683c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006840:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006844:	633a      	str	r2, [r7, #48]	; 0x30
 8006846:	2300      	movs	r3, #0
 8006848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800684c:	2301      	movs	r3, #1
 800684e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8006852:	f107 0320 	add.w	r3, r7, #32
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006862:	f887 3020 	strb.w	r3, [r7, #32]
 8006866:	2307      	movs	r3, #7
 8006868:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.xfer_complete.ep_addr = ep_addr;
 800686c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006870:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  event.xfer_complete.len     = xferred_bytes;
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
  event.xfer_complete.result  = result;
 8006878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800687c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dcd_event_handler(&event, in_isr);
 8006880:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006884:	f107 0320 	add.w	r3, r7, #32
 8006888:	4611      	mov	r1, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe f908 	bl	8004aa0 <dcd_event_handler>
}
 8006890:	bf00      	nop
  for(uint8_t n = 0; n < EP_MAX; n++) {
 8006892:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006896:	3301      	adds	r3, #1
 8006898:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800689c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068a0:	2b05      	cmp	r3, #5
 80068a2:	f67f af5c 	bls.w	800675e <handle_epout_ints+0x16>
        }
      }
    }
  }
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	3748      	adds	r7, #72	; 0x48
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20002d60 	.word	0x20002d60
 80068b4:	20002d58 	.word	0x20002d58
 80068b8:	20002e20 	.word	0x20002e20

080068bc <handle_epin_ints>:

static void handle_epin_ints(uint8_t rhport, USB_OTG_DeviceTypeDef * dev, USB_OTG_INEndpointTypeDef * in_ep) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b092      	sub	sp, #72	; 0x48
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	4603      	mov	r3, r0
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	73fb      	strb	r3, [r7, #15]
  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80068d0:	e0ec      	b.n	8006aac <handle_epin_ints+0x1f0>
  {
    xfer_ctl_t *xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80068d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068d6:	015b      	lsls	r3, r3, #5
 80068d8:	3310      	adds	r3, #16
 80068da:	4a79      	ldr	r2, [pc, #484]	; (8006ac0 <handle_epin_ints+0x204>)
 80068dc:	4413      	add	r3, r2
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38

    if ( dev->DAINT & (1 << (USB_OTG_DAINT_IEPINT_Pos + n)) )
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068e8:	2101      	movs	r1, #1
 80068ea:	fa01 f202 	lsl.w	r2, r1, r2
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80d6 	beq.w	8006aa2 <handle_epin_ints+0x1e6>
    {
      // IN XFER complete (entire xfer).
      if ( in_ep[n].DIEPINT & USB_OTG_DIEPINT_XFRC )
 80068f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068fa:	015b      	lsls	r3, r3, #5
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4413      	add	r3, r2
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04a      	beq.n	80069a0 <handle_epin_ints+0xe4>
      {
        in_ep[n].DIEPINT = USB_OTG_DIEPINT_XFRC;
 800690a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800690e:	015b      	lsls	r3, r3, #5
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	2201      	movs	r2, #1
 8006916:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8006918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10e      	bne.n	800693e <handle_epin_ints+0x82>
 8006920:	4b68      	ldr	r3, [pc, #416]	; (8006ac4 <handle_epin_ints+0x208>)
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <handle_epin_ints+0x82>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8006928:	4b66      	ldr	r3, [pc, #408]	; (8006ac4 <handle_epin_ints+0x208>)
 800692a:	885b      	ldrh	r3, [r3, #2]
 800692c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006930:	7bf8      	ldrb	r0, [r7, #15]
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2301      	movs	r3, #1
 8006936:	2201      	movs	r2, #1
 8006938:	f7ff f8cc 	bl	8005ad4 <edpt_schedule_packets>
 800693c:	e030      	b.n	80069a0 <handle_epin_ints+0xe4>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800693e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006946:	b2d9      	uxtb	r1, r3
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	891b      	ldrh	r3, [r3, #8]
 800694c:	461a      	mov	r2, r3
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006954:	460b      	mov	r3, r1
 8006956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800695a:	627a      	str	r2, [r7, #36]	; 0x24
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	2301      	movs	r3, #1
 8006964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	605a      	str	r2, [r3, #4]
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006978:	743b      	strb	r3, [r7, #16]
 800697a:	2307      	movs	r3, #7
 800697c:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800697e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006982:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8006988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698c:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800698e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006992:	f107 0310 	add.w	r3, r7, #16
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe f881 	bl	8004aa0 <dcd_event_handler>
}
 800699e:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ( (in_ep[n].DIEPINT & USB_OTG_DIEPINT_TXFE) && (dev->DIEPEMPMSK & (1 << n)) )
 80069a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4413      	add	r3, r2
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d076      	beq.n	8006aa2 <handle_epin_ints+0x1e6>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80069bc:	2101      	movs	r1, #1
 80069be:	fa01 f202 	lsl.w	r2, r1, r2
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d06c      	beq.n	8006aa2 <handle_epin_ints+0x1e6>
        // DIEPINT's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_PKTCNT_Msk) >> USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 80069c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069cc:	015b      	lsls	r3, r3, #5
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	0cdb      	lsrs	r3, r3, #19
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069dc:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Process every single packet (only whole packets can be written to fifo)
        for(uint16_t i = 0; i < remaining_packets; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80069e2:	e043      	b.n	8006a6c <handle_epin_ints+0x1b0>
        {
          uint16_t const remaining_bytes = (in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos;
 80069e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069e8:	015b      	lsls	r3, r3, #5
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	86bb      	strh	r3, [r7, #52]	; 0x34

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	895a      	ldrh	r2, [r3, #10]
 80069f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069f8:	843b      	strh	r3, [r7, #32]
 80069fa:	4613      	mov	r3, r2
 80069fc:	83fb      	strh	r3, [r7, #30]
 80069fe:	8c3a      	ldrh	r2, [r7, #32]
 8006a00:	8bfb      	ldrh	r3, [r7, #30]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf28      	it	cs
 8006a06:	4613      	movcs	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	867b      	strh	r3, [r7, #50]	; 0x32

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8006a0c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a12:	015b      	lsls	r3, r3, #5
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	440b      	add	r3, r1
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	0099      	lsls	r1, r3, #2
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <handle_epin_ints+0x20c>)
 8006a1e:	400b      	ands	r3, r1
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d828      	bhi.n	8006a76 <handle_epin_ints+0x1ba>

          // Push packet to Tx-FIFO
          if (xfer->ff)
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00e      	beq.n	8006a4a <handle_epin_ints+0x18e>
          {
            usb_fifo_t tx_fifo = FIFO_BASE(rhport, n);
 8006a2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a30:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8006a34:	3301      	adds	r3, #1
 8006a36:	031b      	lsls	r3, r3, #12
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void *)(uintptr_t) tx_fifo, packet_size);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd f87c 	bl	8003b40 <tu_fifo_read_n_const_addr_full_words>
 8006a48:	e00d      	b.n	8006a66 <handle_epin_ints+0x1aa>
          }
          else
          {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a50:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006a54:	7bf8      	ldrb	r0, [r7, #15]
 8006a56:	f7ff fd6d 	bl	8006534 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a60:	441a      	add	r2, r3
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	601a      	str	r2, [r3, #0]
        for(uint16_t i = 0; i < remaining_packets; i++)
 8006a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a68:	3301      	adds	r3, #1
 8006a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a6c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8006a6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d3b7      	bcc.n	80069e4 <handle_epin_ints+0x128>
 8006a74:	e000      	b.n	8006a78 <handle_epin_ints+0x1bc>
          if(packet_size > ((in_ep[n].DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8006a76:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((in_ep[n].DIEPTSIZ & USB_OTG_DIEPTSIZ_XFRSIZ_Msk) >> USB_OTG_DIEPTSIZ_XFRSIZ_Pos) == 0)
 8006a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a7c:	015b      	lsls	r3, r3, #5
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <handle_epin_ints+0x1e6>
        {
          dev->DIEPEMPMSK &= ~(1 << n);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006a94:	2101      	movs	r1, #1
 8006a96:	fa01 f202 	lsl.w	r2, r1, r2
 8006a9a:	43d2      	mvns	r2, r2
 8006a9c:	401a      	ands	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34
  for ( uint8_t n = 0; n < EP_MAX; n++ )
 8006aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	f67f af0e 	bls.w	80068d2 <handle_epin_ints+0x16>
        }
      }
    }
  }
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	3740      	adds	r7, #64	; 0x40
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20002d60 	.word	0x20002d60
 8006ac4:	20002e20 	.word	0x20002e20
 8006ac8:	0003fffc 	.word	0x0003fffc

08006acc <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b09c      	sub	sp, #112	; 0x70
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  USB_OTG_GlobalTypeDef * usb_otg = GLOBAL_BASE(rhport);
 8006ad6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  USB_OTG_DeviceTypeDef * dev = DEVICE_BASE(rhport);
 8006adc:	4b9e      	ldr	r3, [pc, #632]	; (8006d58 <dcd_int_handler+0x28c>)
 8006ade:	66bb      	str	r3, [r7, #104]	; 0x68
  USB_OTG_OUTEndpointTypeDef * out_ep = OUT_EP_BASE(rhport);
 8006ae0:	4b9e      	ldr	r3, [pc, #632]	; (8006d5c <dcd_int_handler+0x290>)
 8006ae2:	667b      	str	r3, [r7, #100]	; 0x64
  USB_OTG_INEndpointTypeDef * in_ep = IN_EP_BASE(rhport);
 8006ae4:	4b9e      	ldr	r3, [pc, #632]	; (8006d60 <dcd_int_handler+0x294>)
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60

  uint32_t const int_status = usb_otg->GINTSTS & usb_otg->GINTMSK;
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4013      	ands	r3, r2
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c

  if(int_status & USB_OTG_GINTSTS_USBRST)
 8006af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <dcd_int_handler+0x42>
  {
    // USBRST is start of reset.
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBRST;
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b04:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe fea1 	bl	8005850 <bus_reset>
  }

  if(int_status & USB_OTG_GINTSTS_ENUMDNE)
 8006b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d031      	beq.n	8006b7c <dcd_int_handler+0xb0>
  {
    // ENUMDNE is the end of reset where speed of the link is detected

    usb_otg->GINTSTS = USB_OTG_GINTSTS_ENUMDNE;
 8006b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b1e:	615a      	str	r2, [r3, #20]

    tusb_speed_t const speed = get_speed(rhport);
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe ff8e 	bl	8005a44 <get_speed>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

    set_turnaround(usb_otg, speed);
 8006b2e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006b32:	4619      	mov	r1, r3
 8006b34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b36:	f7fe ff03 	bl	8005940 <set_turnaround>
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8006b40:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006b44:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8006b4e:	f107 0314 	add.w	r3, r7, #20
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	605a      	str	r2, [r3, #4]
 8006b58:	609a      	str	r2, [r3, #8]
 8006b5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006b5e:	753b      	strb	r3, [r7, #20]
 8006b60:	2301      	movs	r3, #1
 8006b62:	757b      	strb	r3, [r7, #21]
  event.bus_reset.speed = speed;
 8006b64:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8006b68:	763b      	strb	r3, [r7, #24]
  dcd_event_handler(&event, in_isr);
 8006b6a:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fd ff93 	bl	8004aa0 <dcd_event_handler>
}
 8006b7a:	bf00      	nop
    dcd_event_bus_reset(rhport, speed, true);
  }

  if(int_status & USB_OTG_GINTSTS_USBSUSP)
 8006b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d023      	beq.n	8006bce <dcd_int_handler+0x102>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_USBSUSP;
 8006b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b8c:	615a      	str	r2, [r3, #20]
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006b94:	2304      	movs	r3, #4
 8006b96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006ba0:	f107 0320 	add.w	r3, r7, #32
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006bb0:	f887 3020 	strb.w	r3, [r7, #32]
 8006bb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dcd_event_handler(&event, in_isr);
 8006bbc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006bc0:	f107 0320 	add.w	r3, r7, #32
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fd ff6a 	bl	8004aa0 <dcd_event_handler>
}
 8006bcc:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if(int_status & USB_OTG_GINTSTS_WKUINT)
 8006bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da23      	bge.n	8006c1c <dcd_int_handler+0x150>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_WKUINT;
 8006bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bda:	615a      	str	r2, [r3, #20]
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8006be2:	2305      	movs	r3, #5
 8006be4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	605a      	str	r2, [r3, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
 8006bfa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006bfe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006c02:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006c06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8006c0a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8006c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c12:	4611      	mov	r1, r2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd ff43 	bl	8004aa0 <dcd_event_handler>
}
 8006c1a:	bf00      	nop
  }

  // TODO check USB_OTG_GINTSTS_DISCINT for disconnect detection
  // if(int_status & USB_OTG_GINTSTS_DISCINT)

  if(int_status & USB_OTG_GINTSTS_OTGINT)
 8006c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d028      	beq.n	8006c78 <dcd_int_handler+0x1ac>
  {
    // OTG INT bit is read-only
    uint32_t const otg_int = usb_otg->GOTGINT;
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	657b      	str	r3, [r7, #84]	; 0x54

    if (otg_int & USB_OTG_GOTGINT_SEDET)
 8006c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01d      	beq.n	8006c72 <dcd_int_handler+0x1a6>
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006c48:	f107 0308 	add.w	r3, r7, #8
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006c58:	723b      	strb	r3, [r7, #8]
 8006c5a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006c5e:	727b      	strb	r3, [r7, #9]
  dcd_event_handler(&event, in_isr);
 8006c60:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006c64:	f107 0308 	add.w	r3, r7, #8
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fd ff18 	bl	8004aa0 <dcd_event_handler>
}
 8006c70:	bf00      	nop
    {
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    usb_otg->GOTGINT = otg_int;
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c76:	605a      	str	r2, [r3, #4]
  }

  if(int_status & USB_OTG_GINTSTS_SOF)
 8006c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d028      	beq.n	8006cd4 <dcd_int_handler+0x208>
  {
    usb_otg->GINTSTS = USB_OTG_GINTSTS_SOF;
 8006c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c84:	2208      	movs	r2, #8
 8006c86:	615a      	str	r2, [r3, #20]

    // Disable SOF interrupt since currently only used for remote wakeup detection
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_SOFM;
 8006c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0208 	bic.w	r2, r3, #8
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	619a      	str	r2, [r3, #24]
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8006ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	605a      	str	r2, [r3, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
 8006cb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cb6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8006cba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006cbe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8006cc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006cc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fd fee7 	bl	8004aa0 <dcd_event_handler>
}
 8006cd2:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if(int_status & USB_OTG_GINTSTS_RXFLVL)
 8006cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d021      	beq.n	8006d22 <dcd_int_handler+0x256>
  {
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    usb_otg->GINTMSK &= ~USB_OTG_GINTMSK_RXFLVLM;
 8006cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f023 0210 	bic.w	r2, r3, #16
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do
    {
      handle_rxflvl_ints(rhport, out_ep);
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fc84 	bl	80065fc <handle_rxflvl_ints>
    } while(usb_otg->GINTSTS & USB_OTG_GINTSTS_RXFLVL);
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f4      	bne.n	8006cea <dcd_int_handler+0x21e>

    // Manage RX FIFO size
    if (_out_ep_closed)
 8006d00:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <dcd_int_handler+0x298>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <dcd_int_handler+0x24a>
    {
      update_grxfsiz(rhport);
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fd6e 	bl	80057ec <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8006d10:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <dcd_int_handler+0x298>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
    }

    usb_otg->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f043 0210 	orr.w	r2, r3, #16
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_OEPINT)
 8006d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <dcd_int_handler+0x26c>
  {
    // OEPINT is read-only
    handle_epout_ints(rhport, dev, out_ep);
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fd08 	bl	8006748 <handle_epout_ints>
  }

  // IN endpoint interrupt handling.
  if(int_status & USB_OTG_GINTSTS_IEPINT)
 8006d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <dcd_int_handler+0x282>
  {
    // IEPINT bit read-only
    handle_epin_ints(rhport, dev, in_ep);
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff fdb7 	bl	80068bc <handle_epin_ints>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & USB_OTG_GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG2("      IISOIXFR!\r\n");
  //  }
}
 8006d4e:	bf00      	nop
 8006d50:	3770      	adds	r7, #112	; 0x70
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	50000800 	.word	0x50000800
 8006d5c:	50000b00 	.word	0x50000b00
 8006d60:	50000900 	.word	0x50000900
 8006d64:	20002e26 	.word	0x20002e26

08006d68 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f7fc fff4 	bl	8003d5c <tud_init>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f083 0301 	eor.w	r3, r3, #1
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <tusb_init+0x2e>
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <tusb_init+0x38>)
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d000      	beq.n	8006d92 <tusb_init+0x2a>
 8006d90:	be00      	bkpt	0x0000
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <tusb_init+0x30>
#if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
 8006d96:	2301      	movs	r3, #1
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	e000edf0 	.word	0xe000edf0

08006da4 <tusb_inited>:

bool tusb_inited(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  bool ret = false;
 8006daa:	2300      	movs	r3, #0
 8006dac:	71fb      	strb	r3, [r7, #7]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <tusb_inited+0x1a>
 8006db4:	f7fc ffc2 	bl	8003d3c <tud_inited>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <tusb_inited+0x1e>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <tusb_inited+0x20>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	71fb      	strb	r3, [r7, #7]
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	71fb      	strb	r3, [r7, #7]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8006dce:	79fb      	ldrb	r3, [r7, #7]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <tu_edpt_claim+0x2a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <tu_edpt_claim+0x2a>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <tu_edpt_claim+0x2c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
  if (available)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <tu_edpt_claim+0x46>
  {
    ep_state->claimed = 1;
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7813      	ldrb	r3, [r2, #0]
 8006e18:	f043 0304 	orr.w	r3, r3, #4
 8006e1c:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d108      	bne.n	8006e56 <tu_edpt_release+0x2a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <tu_edpt_release+0x2a>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <tu_edpt_release+0x2c>
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7813      	ldrb	r3, [r2, #0]
 8006e6c:	f36f 0382 	bfc	r3, #2, #1
 8006e70:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b08b      	sub	sp, #44	; 0x2c
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	889b      	ldrh	r3, [r3, #4]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e9a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8006e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d03e      	beq.n	8006f2a <tu_edpt_validate+0xaa>
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	dc53      	bgt.n	8006f58 <tu_edpt_validate+0xd8>
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d002      	beq.n	8006eba <tu_edpt_validate+0x3a>
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d018      	beq.n	8006eea <tu_edpt_validate+0x6a>
 8006eb8:	e04e      	b.n	8006f58 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d102      	bne.n	8006ec6 <tu_edpt_validate+0x46>
 8006ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec4:	e001      	b.n	8006eca <tu_edpt_validate+0x4a>
 8006ec6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006eca:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8006ecc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ece:	8afb      	ldrh	r3, [r7, #22]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d943      	bls.n	8006f5c <tu_edpt_validate+0xdc>
 8006ed4:	4b27      	ldr	r3, [pc, #156]	; (8006f74 <tu_edpt_validate+0xf4>)
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d000      	beq.n	8006ee6 <tu_edpt_validate+0x66>
 8006ee4:	be00      	bkpt	0x0000
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e03e      	b.n	8006f68 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d10e      	bne.n	8006f0e <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8006ef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef6:	d033      	beq.n	8006f60 <tu_edpt_validate+0xe0>
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <tu_edpt_validate+0xf4>)
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d000      	beq.n	8006f0a <tu_edpt_validate+0x8a>
 8006f08:	be00      	bkpt	0x0000
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e02c      	b.n	8006f68 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8006f0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d925      	bls.n	8006f60 <tu_edpt_validate+0xe0>
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <tu_edpt_validate+0xf4>)
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d000      	beq.n	8006f26 <tu_edpt_validate+0xa6>
 8006f24:	be00      	bkpt	0x0000
 8006f26:	2300      	movs	r3, #0
 8006f28:	e01e      	b.n	8006f68 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d102      	bne.n	8006f36 <tu_edpt_validate+0xb6>
 8006f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f34:	e000      	b.n	8006f38 <tu_edpt_validate+0xb8>
 8006f36:	2340      	movs	r3, #64	; 0x40
 8006f38:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8006f3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d910      	bls.n	8006f64 <tu_edpt_validate+0xe4>
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <tu_edpt_validate+0xf4>)
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d000      	beq.n	8006f54 <tu_edpt_validate+0xd4>
 8006f52:	be00      	bkpt	0x0000
 8006f54:	2300      	movs	r3, #0
 8006f56:	e007      	b.n	8006f68 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e005      	b.n	8006f68 <tu_edpt_validate+0xe8>
    break;
 8006f5c:	bf00      	nop
 8006f5e:	e002      	b.n	8006f66 <tu_edpt_validate+0xe6>
    break;
 8006f60:	bf00      	nop
 8006f62:	e000      	b.n	8006f66 <tu_edpt_validate+0xe6>
    break;
 8006f64:	bf00      	nop
  }

  return true;
 8006f66:	2301      	movs	r3, #1
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	372c      	adds	r7, #44	; 0x2c
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	e000edf0 	.word	0xe000edf0

08006f78 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b08d      	sub	sp, #52	; 0x34
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	80fb      	strh	r3, [r7, #6]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f96:	4413      	add	r3, r2
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8006f9a:	e027      	b.n	8006fec <tu_edpt_bind_driver+0x74>
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d116      	bne.n	8006fd8 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	789b      	ldrb	r3, [r3, #2]
 8006fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006fb8:	7fbb      	ldrb	r3, [r7, #30]
 8006fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbe:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006fca:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006fcc:	7ffa      	ldrb	r2, [r7, #31]
 8006fce:	09d2      	lsrs	r2, r2, #7
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	797a      	ldrb	r2, [r7, #5]
 8006fd6:	545a      	strb	r2, [r3, r1]
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d3d3      	bcc.n	8006f9c <tu_edpt_bind_driver+0x24>
  }
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	3734      	adds	r7, #52	; 0x34
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <HAL_Init+0x3c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <HAL_Init+0x3c>)
 8007014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007018:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800701a:	2003      	movs	r0, #3
 800701c:	f000 f962 	bl	80072e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007020:	2000      	movs	r0, #0
 8007022:	f000 f80f 	bl	8007044 <HAL_InitTick>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	71fb      	strb	r3, [r7, #7]
 8007030:	e001      	b.n	8007036 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007032:	f7fa f95b 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007036:	79fb      	ldrb	r3, [r7, #7]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40022000 	.word	0x40022000

08007044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <HAL_InitTick+0x6c>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d023      	beq.n	80070a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007058:	4b16      	ldr	r3, [pc, #88]	; (80070b4 <HAL_InitTick+0x70>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <HAL_InitTick+0x6c>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	4619      	mov	r1, r3
 8007062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007066:	fbb3 f3f1 	udiv	r3, r3, r1
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f96d 	bl	800734e <HAL_SYSTICK_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d809      	bhi.n	8007094 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007080:	2200      	movs	r2, #0
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	f000 f937 	bl	80072fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_InitTick+0x74>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e007      	b.n	80070a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	e004      	b.n	80070a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	e001      	b.n	80070a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20002040 	.word	0x20002040
 80070b4:	20002004 	.word	0x20002004
 80070b8:	2000203c 	.word	0x2000203c

080070bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_IncTick+0x20>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <HAL_IncTick+0x24>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4413      	add	r3, r2
 80070cc:	4a04      	ldr	r2, [pc, #16]	; (80070e0 <HAL_IncTick+0x24>)
 80070ce:	6013      	str	r3, [r2, #0]
}
 80070d0:	bf00      	nop
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20002040 	.word	0x20002040
 80070e0:	20002e28 	.word	0x20002e28

080070e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return uwTick;
 80070e8:	4b03      	ldr	r3, [pc, #12]	; (80070f8 <HAL_GetTick+0x14>)
 80070ea:	681b      	ldr	r3, [r3, #0]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20002e28 	.word	0x20002e28

080070fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007104:	f7ff ffee 	bl	80070e4 <HAL_GetTick>
 8007108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d005      	beq.n	8007122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <HAL_Delay+0x44>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007122:	bf00      	nop
 8007124:	f7ff ffde 	bl	80070e4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	429a      	cmp	r2, r3
 8007132:	d8f7      	bhi.n	8007124 <HAL_Delay+0x28>
  {
  }
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20002040 	.word	0x20002040

08007144 <__NVIC_SetPriorityGrouping>:
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <__NVIC_SetPriorityGrouping+0x44>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007160:	4013      	ands	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800716c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007176:	4a04      	ldr	r2, [pc, #16]	; (8007188 <__NVIC_SetPriorityGrouping+0x44>)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	60d3      	str	r3, [r2, #12]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <__NVIC_GetPriorityGrouping>:
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007190:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	f003 0307 	and.w	r3, r3, #7
}
 800719a:	4618      	mov	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	e000ed00 	.word	0xe000ed00

080071a8 <__NVIC_EnableIRQ>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	db0b      	blt.n	80071d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	f003 021f 	and.w	r2, r3, #31
 80071c0:	4907      	ldr	r1, [pc, #28]	; (80071e0 <__NVIC_EnableIRQ+0x38>)
 80071c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2001      	movs	r0, #1
 80071ca:	fa00 f202 	lsl.w	r2, r0, r2
 80071ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	e000e100 	.word	0xe000e100

080071e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	db0a      	blt.n	800720e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	490c      	ldr	r1, [pc, #48]	; (8007230 <__NVIC_SetPriority+0x4c>)
 80071fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007202:	0112      	lsls	r2, r2, #4
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	440b      	add	r3, r1
 8007208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800720c:	e00a      	b.n	8007224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <__NVIC_SetPriority+0x50>)
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	3b04      	subs	r3, #4
 800721c:	0112      	lsls	r2, r2, #4
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	440b      	add	r3, r1
 8007222:	761a      	strb	r2, [r3, #24]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000e100 	.word	0xe000e100
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f1c3 0307 	rsb	r3, r3, #7
 8007252:	2b04      	cmp	r3, #4
 8007254:	bf28      	it	cs
 8007256:	2304      	movcs	r3, #4
 8007258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3304      	adds	r3, #4
 800725e:	2b06      	cmp	r3, #6
 8007260:	d902      	bls.n	8007268 <NVIC_EncodePriority+0x30>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3b03      	subs	r3, #3
 8007266:	e000      	b.n	800726a <NVIC_EncodePriority+0x32>
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43da      	mvns	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	401a      	ands	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007280:	f04f 31ff 	mov.w	r1, #4294967295
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	43d9      	mvns	r1, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	4313      	orrs	r3, r2
         );
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	; 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b0:	d301      	bcc.n	80072b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072b2:	2301      	movs	r3, #1
 80072b4:	e00f      	b.n	80072d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072b6:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <SysTick_Config+0x40>)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072be:	210f      	movs	r1, #15
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	f7ff ff8e 	bl	80071e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <SysTick_Config+0x40>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <SysTick_Config+0x40>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000e010 	.word	0xe000e010

080072e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ff29 	bl	8007144 <__NVIC_SetPriorityGrouping>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800730c:	f7ff ff3e 	bl	800718c <__NVIC_GetPriorityGrouping>
 8007310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f7ff ff8e 	bl	8007238 <NVIC_EncodePriority>
 800731c:	4602      	mov	r2, r0
 800731e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff ff5d 	bl	80071e4 <__NVIC_SetPriority>
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800733c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff31 	bl	80071a8 <__NVIC_EnableIRQ>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ffa2 	bl	80072a0 <SysTick_Config>
 800735c:	4603      	mov	r3, r0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007376:	e17f      	b.n	8007678 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2101      	movs	r1, #1
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	fa01 f303 	lsl.w	r3, r1, r3
 8007384:	4013      	ands	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8171 	beq.w	8007672 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d005      	beq.n	80073a8 <HAL_GPIO_Init+0x40>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d130      	bne.n	800740a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	2203      	movs	r2, #3
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	43db      	mvns	r3, r3
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4013      	ands	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073de:	2201      	movs	r2, #1
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	43db      	mvns	r3, r3
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4013      	ands	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	f003 0201 	and.w	r2, r3, #1
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b03      	cmp	r3, #3
 8007414:	d118      	bne.n	8007448 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800741c:	2201      	movs	r2, #1
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	08db      	lsrs	r3, r3, #3
 8007432:	f003 0201 	and.w	r2, r3, #1
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d017      	beq.n	8007484 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	2203      	movs	r2, #3
 8007460:	fa02 f303 	lsl.w	r3, r2, r3
 8007464:	43db      	mvns	r3, r3
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4013      	ands	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d123      	bne.n	80074d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	08da      	lsrs	r2, r3, #3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3208      	adds	r2, #8
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	220f      	movs	r2, #15
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	43db      	mvns	r3, r3
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4013      	ands	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	08da      	lsrs	r2, r3, #3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3208      	adds	r2, #8
 80074d2:	6939      	ldr	r1, [r7, #16]
 80074d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	2203      	movs	r2, #3
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	4013      	ands	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0203 	and.w	r2, r3, #3
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 80ac 	beq.w	8007672 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <HAL_GPIO_Init+0x330>)
 800751c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751e:	4a5e      	ldr	r2, [pc, #376]	; (8007698 <HAL_GPIO_Init+0x330>)
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	6613      	str	r3, [r2, #96]	; 0x60
 8007526:	4b5c      	ldr	r3, [pc, #368]	; (8007698 <HAL_GPIO_Init+0x330>)
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007532:	4a5a      	ldr	r2, [pc, #360]	; (800769c <HAL_GPIO_Init+0x334>)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	089b      	lsrs	r3, r3, #2
 8007538:	3302      	adds	r3, #2
 800753a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800753e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	220f      	movs	r2, #15
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	43db      	mvns	r3, r3
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4013      	ands	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800755c:	d025      	beq.n	80075aa <HAL_GPIO_Init+0x242>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a4f      	ldr	r2, [pc, #316]	; (80076a0 <HAL_GPIO_Init+0x338>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01f      	beq.n	80075a6 <HAL_GPIO_Init+0x23e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a4e      	ldr	r2, [pc, #312]	; (80076a4 <HAL_GPIO_Init+0x33c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d019      	beq.n	80075a2 <HAL_GPIO_Init+0x23a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a4d      	ldr	r2, [pc, #308]	; (80076a8 <HAL_GPIO_Init+0x340>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <HAL_GPIO_Init+0x236>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a4c      	ldr	r2, [pc, #304]	; (80076ac <HAL_GPIO_Init+0x344>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00d      	beq.n	800759a <HAL_GPIO_Init+0x232>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a4b      	ldr	r2, [pc, #300]	; (80076b0 <HAL_GPIO_Init+0x348>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <HAL_GPIO_Init+0x22e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a4a      	ldr	r2, [pc, #296]	; (80076b4 <HAL_GPIO_Init+0x34c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d101      	bne.n	8007592 <HAL_GPIO_Init+0x22a>
 800758e:	2306      	movs	r3, #6
 8007590:	e00c      	b.n	80075ac <HAL_GPIO_Init+0x244>
 8007592:	2307      	movs	r3, #7
 8007594:	e00a      	b.n	80075ac <HAL_GPIO_Init+0x244>
 8007596:	2305      	movs	r3, #5
 8007598:	e008      	b.n	80075ac <HAL_GPIO_Init+0x244>
 800759a:	2304      	movs	r3, #4
 800759c:	e006      	b.n	80075ac <HAL_GPIO_Init+0x244>
 800759e:	2303      	movs	r3, #3
 80075a0:	e004      	b.n	80075ac <HAL_GPIO_Init+0x244>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e002      	b.n	80075ac <HAL_GPIO_Init+0x244>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <HAL_GPIO_Init+0x244>
 80075aa:	2300      	movs	r3, #0
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	f002 0203 	and.w	r2, r2, #3
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	4093      	lsls	r3, r2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80075bc:	4937      	ldr	r1, [pc, #220]	; (800769c <HAL_GPIO_Init+0x334>)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	089b      	lsrs	r3, r3, #2
 80075c2:	3302      	adds	r3, #2
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075ca:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <HAL_GPIO_Init+0x350>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	43db      	mvns	r3, r3
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4013      	ands	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80075ee:	4a32      	ldr	r2, [pc, #200]	; (80076b8 <HAL_GPIO_Init+0x350>)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80075f4:	4b30      	ldr	r3, [pc, #192]	; (80076b8 <HAL_GPIO_Init+0x350>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4013      	ands	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007618:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <HAL_GPIO_Init+0x350>)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800761e:	4b26      	ldr	r3, [pc, #152]	; (80076b8 <HAL_GPIO_Init+0x350>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	43db      	mvns	r3, r3
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4013      	ands	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_GPIO_Init+0x350>)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <HAL_GPIO_Init+0x350>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	43db      	mvns	r3, r3
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4013      	ands	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800766c:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <HAL_GPIO_Init+0x350>)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	3301      	adds	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	fa22 f303 	lsr.w	r3, r2, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	f47f ae78 	bne.w	8007378 <HAL_GPIO_Init+0x10>
  }
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40021000 	.word	0x40021000
 800769c:	40010000 	.word	0x40010000
 80076a0:	48000400 	.word	0x48000400
 80076a4:	48000800 	.word	0x48000800
 80076a8:	48000c00 	.word	0x48000c00
 80076ac:	48001000 	.word	0x48001000
 80076b0:	48001400 	.word	0x48001400
 80076b4:	48001800 	.word	0x48001800
 80076b8:	40010400 	.word	0x40010400

080076bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	807b      	strh	r3, [r7, #2]
 80076c8:	4613      	mov	r3, r2
 80076ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076cc:	787b      	ldrb	r3, [r7, #1]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076d2:	887a      	ldrh	r2, [r7, #2]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80076d8:	e002      	b.n	80076e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076da:	887a      	ldrh	r2, [r7, #2]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e081      	b.n	8007802 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7f9 f8e6 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2224      	movs	r2, #36	; 0x24
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800773c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800774c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	e006      	b.n	8007774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d104      	bne.n	8007786 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691a      	ldr	r2, [r3, #16]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69d9      	ldr	r1, [r3, #28]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1a      	ldr	r2, [r3, #32]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b20      	cmp	r3, #32
 800781e:	d138      	bne.n	8007892 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800782a:	2302      	movs	r3, #2
 800782c:	e032      	b.n	8007894 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2224      	movs	r2, #36	; 0x24
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800785c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0201 	orr.w	r2, r2, #1
 800787c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	e000      	b.n	8007894 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007892:	2302      	movs	r3, #2
  }
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d139      	bne.n	800792a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e033      	b.n	800792c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2224      	movs	r2, #36	; 0x24
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e000      	b.n	800792c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800792a:	2302      	movs	r3, #2
  }
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793a:	b08f      	sub	sp, #60	; 0x3c
 800793c:	af0a      	add	r7, sp, #40	; 0x28
 800793e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e116      	b.n	8007b78 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7f9 fe4f 	bl	8001608 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2203      	movs	r2, #3
 800796e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4618      	mov	r0, r3
 800798a:	f003 fab8 	bl	800aefe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	687e      	ldr	r6, [r7, #4]
 8007996:	466d      	mov	r5, sp
 8007998:	f106 0410 	add.w	r4, r6, #16
 800799c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800799e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80079ac:	1d33      	adds	r3, r6, #4
 80079ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079b0:	6838      	ldr	r0, [r7, #0]
 80079b2:	f003 fa78 	bl	800aea6 <USB_CoreInit>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e0d7      	b.n	8007b78 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2100      	movs	r1, #0
 80079ce:	4618      	mov	r0, r3
 80079d0:	f003 faa6 	bl	800af20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	e04a      	b.n	8007a70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80079da:	7bfa      	ldrb	r2, [r7, #15]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	333d      	adds	r3, #61	; 0x3d
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80079ee:	7bfa      	ldrb	r2, [r7, #15]
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	333c      	adds	r3, #60	; 0x3c
 80079fe:	7bfa      	ldrb	r2, [r7, #15]
 8007a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a02:	7bfa      	ldrb	r2, [r7, #15]
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	b298      	uxth	r0, r3
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	3344      	adds	r3, #68	; 0x44
 8007a16:	4602      	mov	r2, r0
 8007a18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a1a:	7bfa      	ldrb	r2, [r7, #15]
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	440b      	add	r3, r1
 8007a28:	3340      	adds	r3, #64	; 0x40
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a2e:	7bfa      	ldrb	r2, [r7, #15]
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3348      	adds	r3, #72	; 0x48
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a42:	7bfa      	ldrb	r2, [r7, #15]
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	334c      	adds	r3, #76	; 0x4c
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007a56:	7bfa      	ldrb	r2, [r7, #15]
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	3354      	adds	r3, #84	; 0x54
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
 8007a70:	7bfa      	ldrb	r2, [r7, #15]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d3af      	bcc.n	80079da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
 8007a7e:	e044      	b.n	8007b0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007a80:	7bfa      	ldrb	r2, [r7, #15]
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	440b      	add	r3, r1
 8007a8e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a96:	7bfa      	ldrb	r2, [r7, #15]
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007aac:	7bfa      	ldrb	r2, [r7, #15]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ac2:	7bfa      	ldrb	r2, [r7, #15]
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	440b      	add	r3, r1
 8007ad0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ad8:	7bfa      	ldrb	r2, [r7, #15]
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007aee:	7bfa      	ldrb	r2, [r7, #15]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	3301      	adds	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]
 8007b0a:	7bfa      	ldrb	r2, [r7, #15]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d3b5      	bcc.n	8007a80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	603b      	str	r3, [r7, #0]
 8007b1a:	687e      	ldr	r6, [r7, #4]
 8007b1c:	466d      	mov	r5, sp
 8007b1e:	f106 0410 	add.w	r4, r6, #16
 8007b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b32:	1d33      	adds	r3, r6, #4
 8007b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f003 fa3e 	bl	800afb8 <USB_DevInit>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2202      	movs	r2, #2
 8007b46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e014      	b.n	8007b78 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d102      	bne.n	8007b6c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f80a 	bl	8007b80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f003 fbea 	bl	800b34a <USB_DevDisconnect>

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	f043 0303 	orr.w	r3, r3, #3
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd6:	6013      	str	r3, [r2, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40007000 	.word	0x40007000

08007be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40007000 	.word	0x40007000

08007c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c12:	d130      	bne.n	8007c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c14:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c20:	d038      	beq.n	8007c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c22:	4b20      	ldr	r3, [pc, #128]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c32:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2232      	movs	r2, #50	; 0x32
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	4a1b      	ldr	r2, [pc, #108]	; (8007cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c42:	0c9b      	lsrs	r3, r3, #18
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c48:	e002      	b.n	8007c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c50:	4b14      	ldr	r3, [pc, #80]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5c:	d102      	bne.n	8007c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f2      	bne.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c64:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d110      	bne.n	8007c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e00f      	b.n	8007c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c82:	d007      	beq.n	8007c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c84:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c8c:	4a05      	ldr	r2, [pc, #20]	; (8007ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40007000 	.word	0x40007000
 8007ca8:	20002004 	.word	0x20002004
 8007cac:	431bde83 	.word	0x431bde83

08007cb0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <HAL_PWREx_EnableVddUSB+0x1c>)
 8007cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cbe:	6053      	str	r3, [r2, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40007000 	.word	0x40007000

08007cd0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cd8:	f7ff fa04 	bl	80070e4 <HAL_GetTick>
 8007cdc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e063      	b.n	8007db0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7f9 f90f 	bl	8000f20 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d02:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f858 	bl	8007dbc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	021a      	lsls	r2, r3, #8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2120      	movs	r1, #32
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f850 	bl	8007dd8 <QSPI_WaitFlagStateUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d131      	bne.n	8007da6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d4c:	f023 0310 	bic.w	r3, r3, #16
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6852      	ldr	r2, [r2, #4]
 8007d54:	0611      	lsls	r1, r2, #24
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68d2      	ldr	r2, [r2, #12]
 8007d5a:	4311      	orrs	r1, r2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <HAL_QSPI_Init+0xe8>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	6912      	ldr	r2, [r2, #16]
 8007d72:	0411      	lsls	r1, r2, #16
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6952      	ldr	r2, [r2, #20]
 8007d78:	4311      	orrs	r1, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6992      	ldr	r2, [r2, #24]
 8007d7e:	4311      	orrs	r1, r2
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8007dae:	7afb      	ldrb	r3, [r7, #11]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	ffe0f8fe 	.word	0xffe0f8fe

08007dbc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	4613      	mov	r3, r2
 8007de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007de8:	e01a      	b.n	8007e20 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d016      	beq.n	8007e20 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7ff f977 	bl	80070e4 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10b      	bne.n	8007e20 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	f043 0201 	orr.w	r2, r3, #1
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e00e      	b.n	8007e3e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	2300      	moveq	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d1d6      	bne.n	8007dea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e3ca      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e5a:	4b97      	ldr	r3, [pc, #604]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
 8007e62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e64:	4b94      	ldr	r3, [pc, #592]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80e4 	beq.w	8008044 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <HAL_RCC_OscConfig+0x4a>
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	f040 808b 	bne.w	8007fa0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	f040 8087 	bne.w	8007fa0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e92:	4b89      	ldr	r3, [pc, #548]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_RCC_OscConfig+0x62>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e3a2      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	4b82      	ldr	r3, [pc, #520]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x7c>
 8007eba:	4b7f      	ldr	r3, [pc, #508]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ec2:	e005      	b.n	8007ed0 <HAL_RCC_OscConfig+0x88>
 8007ec4:	4b7c      	ldr	r3, [pc, #496]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eca:	091b      	lsrs	r3, r3, #4
 8007ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d223      	bcs.n	8007f1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fd55 	bl	8008988 <RCC_SetFlashLatencyFromMSIRange>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e383      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ee8:	4b73      	ldr	r3, [pc, #460]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a72      	ldr	r2, [pc, #456]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007eee:	f043 0308 	orr.w	r3, r3, #8
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	4b70      	ldr	r3, [pc, #448]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	496d      	ldr	r1, [pc, #436]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f06:	4b6c      	ldr	r3, [pc, #432]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	4968      	ldr	r1, [pc, #416]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	604b      	str	r3, [r1, #4]
 8007f1a:	e025      	b.n	8007f68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f1c:	4b66      	ldr	r3, [pc, #408]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a65      	ldr	r2, [pc, #404]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f22:	f043 0308 	orr.w	r3, r3, #8
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	4b63      	ldr	r3, [pc, #396]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	4960      	ldr	r1, [pc, #384]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f3a:	4b5f      	ldr	r3, [pc, #380]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	495b      	ldr	r1, [pc, #364]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fd15 	bl	8008988 <RCC_SetFlashLatencyFromMSIRange>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e343      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f68:	f000 fc4a 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b52      	ldr	r3, [pc, #328]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	091b      	lsrs	r3, r3, #4
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	4950      	ldr	r1, [pc, #320]	; (80080bc <HAL_RCC_OscConfig+0x274>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	4a4e      	ldr	r2, [pc, #312]	; (80080c0 <HAL_RCC_OscConfig+0x278>)
 8007f86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007f88:	4b4e      	ldr	r3, [pc, #312]	; (80080c4 <HAL_RCC_OscConfig+0x27c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff f859 	bl	8007044 <HAL_InitTick>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d052      	beq.n	8008042 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	e327      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d032      	beq.n	800800e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007fa8:	4b43      	ldr	r3, [pc, #268]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a42      	ldr	r2, [pc, #264]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007fae:	f043 0301 	orr.w	r3, r3, #1
 8007fb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007fb4:	f7ff f896 	bl	80070e4 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fbc:	f7ff f892 	bl	80070e4 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e310      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007fce:	4b3a      	ldr	r3, [pc, #232]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fda:	4b37      	ldr	r3, [pc, #220]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a36      	ldr	r2, [pc, #216]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007fe0:	f043 0308 	orr.w	r3, r3, #8
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	4b34      	ldr	r3, [pc, #208]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	4931      	ldr	r1, [pc, #196]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ff8:	4b2f      	ldr	r3, [pc, #188]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	492c      	ldr	r1, [pc, #176]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008008:	4313      	orrs	r3, r2
 800800a:	604b      	str	r3, [r1, #4]
 800800c:	e01a      	b.n	8008044 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800800e:	4b2a      	ldr	r3, [pc, #168]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a29      	ldr	r2, [pc, #164]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008014:	f023 0301 	bic.w	r3, r3, #1
 8008018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800801a:	f7ff f863 	bl	80070e4 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008022:	f7ff f85f 	bl	80070e4 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e2dd      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008034:	4b20      	ldr	r3, [pc, #128]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f0      	bne.n	8008022 <HAL_RCC_OscConfig+0x1da>
 8008040:	e000      	b.n	8008044 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008042:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d074      	beq.n	800813a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d005      	beq.n	8008062 <HAL_RCC_OscConfig+0x21a>
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d10e      	bne.n	800807a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d10b      	bne.n	800807a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d064      	beq.n	8008138 <HAL_RCC_OscConfig+0x2f0>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d160      	bne.n	8008138 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e2ba      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008082:	d106      	bne.n	8008092 <HAL_RCC_OscConfig+0x24a>
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a0b      	ldr	r2, [pc, #44]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 800808a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e026      	b.n	80080e0 <HAL_RCC_OscConfig+0x298>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800809a:	d115      	bne.n	80080c8 <HAL_RCC_OscConfig+0x280>
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a05      	ldr	r2, [pc, #20]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 80080a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a02      	ldr	r2, [pc, #8]	; (80080b8 <HAL_RCC_OscConfig+0x270>)
 80080ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	e014      	b.n	80080e0 <HAL_RCC_OscConfig+0x298>
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000
 80080bc:	0800b528 	.word	0x0800b528
 80080c0:	20002004 	.word	0x20002004
 80080c4:	2000203c 	.word	0x2000203c
 80080c8:	4ba0      	ldr	r3, [pc, #640]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a9f      	ldr	r2, [pc, #636]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4b9d      	ldr	r3, [pc, #628]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a9c      	ldr	r2, [pc, #624]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80080da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d013      	beq.n	8008110 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e8:	f7fe fffc 	bl	80070e4 <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f0:	f7fe fff8 	bl	80070e4 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b64      	cmp	r3, #100	; 0x64
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e276      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008102:	4b92      	ldr	r3, [pc, #584]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0f0      	beq.n	80080f0 <HAL_RCC_OscConfig+0x2a8>
 800810e:	e014      	b.n	800813a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fe ffe8 	bl	80070e4 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008118:	f7fe ffe4 	bl	80070e4 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e262      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800812a:	4b88      	ldr	r3, [pc, #544]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x2d0>
 8008136:	e000      	b.n	800813a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d060      	beq.n	8008208 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d005      	beq.n	8008158 <HAL_RCC_OscConfig+0x310>
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b0c      	cmp	r3, #12
 8008150:	d119      	bne.n	8008186 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d116      	bne.n	8008186 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008158:	4b7c      	ldr	r3, [pc, #496]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <HAL_RCC_OscConfig+0x328>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e23f      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008170:	4b76      	ldr	r3, [pc, #472]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	061b      	lsls	r3, r3, #24
 800817e:	4973      	ldr	r1, [pc, #460]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008180:	4313      	orrs	r3, r2
 8008182:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008184:	e040      	b.n	8008208 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d023      	beq.n	80081d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800818e:	4b6f      	ldr	r3, [pc, #444]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a6e      	ldr	r2, [pc, #440]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819a:	f7fe ffa3 	bl	80070e4 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081a2:	f7fe ff9f 	bl	80070e4 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e21d      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b4:	4b65      	ldr	r3, [pc, #404]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c0:	4b62      	ldr	r3, [pc, #392]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	495f      	ldr	r1, [pc, #380]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	604b      	str	r3, [r1, #4]
 80081d4:	e018      	b.n	8008208 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081d6:	4b5d      	ldr	r3, [pc, #372]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a5c      	ldr	r2, [pc, #368]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e2:	f7fe ff7f 	bl	80070e4 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ea:	f7fe ff7b 	bl	80070e4 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e1f9      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081fc:	4b53      	ldr	r3, [pc, #332]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f0      	bne.n	80081ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d03c      	beq.n	800828e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01c      	beq.n	8008256 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800821c:	4b4b      	ldr	r3, [pc, #300]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800821e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008222:	4a4a      	ldr	r2, [pc, #296]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822c:	f7fe ff5a 	bl	80070e4 <HAL_GetTick>
 8008230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008234:	f7fe ff56 	bl	80070e4 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e1d4      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008246:	4b41      	ldr	r3, [pc, #260]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0ef      	beq.n	8008234 <HAL_RCC_OscConfig+0x3ec>
 8008254:	e01b      	b.n	800828e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008256:	4b3d      	ldr	r3, [pc, #244]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800825c:	4a3b      	ldr	r2, [pc, #236]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008266:	f7fe ff3d 	bl	80070e4 <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800826e:	f7fe ff39 	bl	80070e4 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e1b7      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008280:	4b32      	ldr	r3, [pc, #200]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ef      	bne.n	800826e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80a6 	beq.w	80083e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800829c:	2300      	movs	r3, #0
 800829e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80082a0:	4b2a      	ldr	r3, [pc, #168]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10d      	bne.n	80082c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ac:	4b27      	ldr	r3, [pc, #156]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80082ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b0:	4a26      	ldr	r2, [pc, #152]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80082b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b6:	6593      	str	r3, [r2, #88]	; 0x58
 80082b8:	4b24      	ldr	r3, [pc, #144]	; (800834c <HAL_RCC_OscConfig+0x504>)
 80082ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c0:	60bb      	str	r3, [r7, #8]
 80082c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082c4:	2301      	movs	r3, #1
 80082c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082c8:	4b21      	ldr	r3, [pc, #132]	; (8008350 <HAL_RCC_OscConfig+0x508>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d118      	bne.n	8008306 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082d4:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <HAL_RCC_OscConfig+0x508>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1d      	ldr	r2, [pc, #116]	; (8008350 <HAL_RCC_OscConfig+0x508>)
 80082da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082e0:	f7fe ff00 	bl	80070e4 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082e8:	f7fe fefc 	bl	80070e4 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e17a      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <HAL_RCC_OscConfig+0x508>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d108      	bne.n	8008320 <HAL_RCC_OscConfig+0x4d8>
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008314:	4a0d      	ldr	r2, [pc, #52]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800831e:	e029      	b.n	8008374 <HAL_RCC_OscConfig+0x52c>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b05      	cmp	r3, #5
 8008326:	d115      	bne.n	8008354 <HAL_RCC_OscConfig+0x50c>
 8008328:	4b08      	ldr	r3, [pc, #32]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	4a07      	ldr	r2, [pc, #28]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008330:	f043 0304 	orr.w	r3, r3, #4
 8008334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <HAL_RCC_OscConfig+0x504>)
 800833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833e:	4a03      	ldr	r2, [pc, #12]	; (800834c <HAL_RCC_OscConfig+0x504>)
 8008340:	f043 0301 	orr.w	r3, r3, #1
 8008344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008348:	e014      	b.n	8008374 <HAL_RCC_OscConfig+0x52c>
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000
 8008350:	40007000 	.word	0x40007000
 8008354:	4b9c      	ldr	r3, [pc, #624]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	4a9b      	ldr	r2, [pc, #620]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800835c:	f023 0301 	bic.w	r3, r3, #1
 8008360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008364:	4b98      	ldr	r3, [pc, #608]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	4a97      	ldr	r2, [pc, #604]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800836c:	f023 0304 	bic.w	r3, r3, #4
 8008370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d016      	beq.n	80083aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800837c:	f7fe feb2 	bl	80070e4 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008382:	e00a      	b.n	800839a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008384:	f7fe feae 	bl	80070e4 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008392:	4293      	cmp	r3, r2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e12a      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800839a:	4b8b      	ldr	r3, [pc, #556]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0ed      	beq.n	8008384 <HAL_RCC_OscConfig+0x53c>
 80083a8:	e015      	b.n	80083d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083aa:	f7fe fe9b 	bl	80070e4 <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083b0:	e00a      	b.n	80083c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b2:	f7fe fe97 	bl	80070e4 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e113      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80083c8:	4b7f      	ldr	r3, [pc, #508]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1ed      	bne.n	80083b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083d6:	7ffb      	ldrb	r3, [r7, #31]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d105      	bne.n	80083e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083dc:	4b7a      	ldr	r3, [pc, #488]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80083de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e0:	4a79      	ldr	r2, [pc, #484]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80083e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80fe 	beq.w	80085ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	f040 80d0 	bne.w	800859c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80083fc:	4b72      	ldr	r3, [pc, #456]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f003 0203 	and.w	r2, r3, #3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	429a      	cmp	r2, r3
 800840e:	d130      	bne.n	8008472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	3b01      	subs	r3, #1
 800841c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800841e:	429a      	cmp	r2, r3
 8008420:	d127      	bne.n	8008472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800842e:	429a      	cmp	r2, r3
 8008430:	d11f      	bne.n	8008472 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800843c:	2a07      	cmp	r2, #7
 800843e:	bf14      	ite	ne
 8008440:	2201      	movne	r2, #1
 8008442:	2200      	moveq	r2, #0
 8008444:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008446:	4293      	cmp	r3, r2
 8008448:	d113      	bne.n	8008472 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	3b01      	subs	r3, #1
 8008458:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800845a:	429a      	cmp	r2, r3
 800845c:	d109      	bne.n	8008472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	085b      	lsrs	r3, r3, #1
 800846a:	3b01      	subs	r3, #1
 800846c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d06e      	beq.n	8008550 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	2b0c      	cmp	r3, #12
 8008476:	d069      	beq.n	800854c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008478:	4b53      	ldr	r3, [pc, #332]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008484:	4b50      	ldr	r3, [pc, #320]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0ad      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008494:	4b4c      	ldr	r3, [pc, #304]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a4b      	ldr	r2, [pc, #300]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800849a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800849e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80084a0:	f7fe fe20 	bl	80070e4 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a8:	f7fe fe1c 	bl	80070e4 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e09a      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084ba:	4b43      	ldr	r3, [pc, #268]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084c6:	4b40      	ldr	r3, [pc, #256]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	4b40      	ldr	r3, [pc, #256]	; (80085cc <HAL_RCC_OscConfig+0x784>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084d6:	3a01      	subs	r2, #1
 80084d8:	0112      	lsls	r2, r2, #4
 80084da:	4311      	orrs	r1, r2
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084e0:	0212      	lsls	r2, r2, #8
 80084e2:	4311      	orrs	r1, r2
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084e8:	0852      	lsrs	r2, r2, #1
 80084ea:	3a01      	subs	r2, #1
 80084ec:	0552      	lsls	r2, r2, #21
 80084ee:	4311      	orrs	r1, r2
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80084f4:	0852      	lsrs	r2, r2, #1
 80084f6:	3a01      	subs	r2, #1
 80084f8:	0652      	lsls	r2, r2, #25
 80084fa:	4311      	orrs	r1, r2
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008500:	0912      	lsrs	r2, r2, #4
 8008502:	0452      	lsls	r2, r2, #17
 8008504:	430a      	orrs	r2, r1
 8008506:	4930      	ldr	r1, [pc, #192]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008508:	4313      	orrs	r3, r2
 800850a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800850c:	4b2e      	ldr	r3, [pc, #184]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a2d      	ldr	r2, [pc, #180]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008516:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008518:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800851e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008524:	f7fe fdde 	bl	80070e4 <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800852c:	f7fe fdda 	bl	80070e4 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e058      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800853e:	4b22      	ldr	r3, [pc, #136]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800854a:	e050      	b.n	80085ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e04f      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008550:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d148      	bne.n	80085ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800855c:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008566:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008568:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	4a16      	ldr	r2, [pc, #88]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 800856e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008574:	f7fe fdb6 	bl	80070e4 <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800857c:	f7fe fdb2 	bl	80070e4 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e030      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0x734>
 800859a:	e028      	b.n	80085ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	2b0c      	cmp	r3, #12
 80085a0:	d023      	beq.n	80085ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <HAL_RCC_OscConfig+0x780>)
 80085a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ae:	f7fe fd99 	bl	80070e4 <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085b4:	e00c      	b.n	80085d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b6:	f7fe fd95 	bl	80070e4 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d905      	bls.n	80085d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e013      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
 80085c8:	40021000 	.word	0x40021000
 80085cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <HAL_RCC_OscConfig+0x7b0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1ec      	bne.n	80085b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <HAL_RCC_OscConfig+0x7b0>)
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	4905      	ldr	r1, [pc, #20]	; (80085f8 <HAL_RCC_OscConfig+0x7b0>)
 80085e2:	4b06      	ldr	r3, [pc, #24]	; (80085fc <HAL_RCC_OscConfig+0x7b4>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	60cb      	str	r3, [r1, #12]
 80085e8:	e001      	b.n	80085ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3720      	adds	r7, #32
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	40021000 	.word	0x40021000
 80085fc:	feeefffc 	.word	0xfeeefffc

08008600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e0e7      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008614:	4b75      	ldr	r3, [pc, #468]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d910      	bls.n	8008644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008622:	4b72      	ldr	r3, [pc, #456]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f023 0207 	bic.w	r2, r3, #7
 800862a:	4970      	ldr	r1, [pc, #448]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	4313      	orrs	r3, r2
 8008630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008632:	4b6e      	ldr	r3, [pc, #440]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d001      	beq.n	8008644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e0cf      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	4b66      	ldr	r3, [pc, #408]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800865c:	429a      	cmp	r2, r3
 800865e:	d908      	bls.n	8008672 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008660:	4b63      	ldr	r3, [pc, #396]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	4960      	ldr	r1, [pc, #384]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 800866e:	4313      	orrs	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d04c      	beq.n	8008718 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d107      	bne.n	8008696 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008686:	4b5a      	ldr	r3, [pc, #360]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d121      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e0a6      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d107      	bne.n	80086ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800869e:	4b54      	ldr	r3, [pc, #336]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d115      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e09a      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d107      	bne.n	80086c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086b6:	4b4e      	ldr	r3, [pc, #312]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e08e      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c6:	4b4a      	ldr	r3, [pc, #296]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e086      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086d6:	4b46      	ldr	r3, [pc, #280]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f023 0203 	bic.w	r2, r3, #3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	4943      	ldr	r1, [pc, #268]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e8:	f7fe fcfc 	bl	80070e4 <HAL_GetTick>
 80086ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ee:	e00a      	b.n	8008706 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086f0:	f7fe fcf8 	bl	80070e4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fe:	4293      	cmp	r3, r2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e06e      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008706:	4b3a      	ldr	r3, [pc, #232]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 020c 	and.w	r2, r3, #12
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	429a      	cmp	r2, r3
 8008716:	d1eb      	bne.n	80086f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008730:	429a      	cmp	r2, r3
 8008732:	d208      	bcs.n	8008746 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008734:	4b2e      	ldr	r3, [pc, #184]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	492b      	ldr	r1, [pc, #172]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008742:	4313      	orrs	r3, r2
 8008744:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008746:	4b29      	ldr	r3, [pc, #164]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d210      	bcs.n	8008776 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008754:	4b25      	ldr	r3, [pc, #148]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f023 0207 	bic.w	r2, r3, #7
 800875c:	4923      	ldr	r1, [pc, #140]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008764:	4b21      	ldr	r3, [pc, #132]	; (80087ec <HAL_RCC_ClockConfig+0x1ec>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d001      	beq.n	8008776 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e036      	b.n	80087e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d008      	beq.n	8008794 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008782:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	4918      	ldr	r1, [pc, #96]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 8008790:	4313      	orrs	r3, r2
 8008792:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087a0:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	4910      	ldr	r1, [pc, #64]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087b4:	f000 f824 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 80087b8:	4602      	mov	r2, r0
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <HAL_RCC_ClockConfig+0x1f0>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	490b      	ldr	r1, [pc, #44]	; (80087f4 <HAL_RCC_ClockConfig+0x1f4>)
 80087c6:	5ccb      	ldrb	r3, [r1, r3]
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
 80087d0:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <HAL_RCC_ClockConfig+0x1f8>)
 80087d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCC_ClockConfig+0x1fc>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fc33 	bl	8007044 <HAL_InitTick>
 80087de:	4603      	mov	r3, r0
 80087e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80087e2:	7afb      	ldrb	r3, [r7, #11]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40022000 	.word	0x40022000
 80087f0:	40021000 	.word	0x40021000
 80087f4:	0800b528 	.word	0x0800b528
 80087f8:	20002004 	.word	0x20002004
 80087fc:	2000203c 	.word	0x2000203c

08008800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008800:	b480      	push	{r7}
 8008802:	b089      	sub	sp, #36	; 0x24
 8008804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800880e:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 030c 	and.w	r3, r3, #12
 8008816:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008818:	4b3b      	ldr	r3, [pc, #236]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <HAL_RCC_GetSysClockFreq+0x34>
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b0c      	cmp	r3, #12
 800882c:	d121      	bne.n	8008872 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d11e      	bne.n	8008872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008834:	4b34      	ldr	r3, [pc, #208]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b00      	cmp	r3, #0
 800883e:	d107      	bne.n	8008850 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008840:	4b31      	ldr	r3, [pc, #196]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 8008842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e005      	b.n	800885c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008850:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	091b      	lsrs	r3, r3, #4
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800885c:	4a2b      	ldr	r2, [pc, #172]	; (800890c <HAL_RCC_GetSysClockFreq+0x10c>)
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008864:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10d      	bne.n	8008888 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008870:	e00a      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b04      	cmp	r3, #4
 8008876:	d102      	bne.n	800887e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <HAL_RCC_GetSysClockFreq+0x110>)
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	e004      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b08      	cmp	r3, #8
 8008882:	d101      	bne.n	8008888 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008884:	4b23      	ldr	r3, [pc, #140]	; (8008914 <HAL_RCC_GetSysClockFreq+0x114>)
 8008886:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2b0c      	cmp	r3, #12
 800888c:	d134      	bne.n	80088f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800888e:	4b1e      	ldr	r3, [pc, #120]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d003      	beq.n	80088a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d003      	beq.n	80088ac <HAL_RCC_GetSysClockFreq+0xac>
 80088a4:	e005      	b.n	80088b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80088a6:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <HAL_RCC_GetSysClockFreq+0x110>)
 80088a8:	617b      	str	r3, [r7, #20]
      break;
 80088aa:	e005      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80088ac:	4b19      	ldr	r3, [pc, #100]	; (8008914 <HAL_RCC_GetSysClockFreq+0x114>)
 80088ae:	617b      	str	r3, [r7, #20]
      break;
 80088b0:	e002      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	617b      	str	r3, [r7, #20]
      break;
 80088b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088b8:	4b13      	ldr	r3, [pc, #76]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	091b      	lsrs	r3, r3, #4
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	3301      	adds	r3, #1
 80088c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	fb03 f202 	mul.w	r2, r3, r2
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <HAL_RCC_GetSysClockFreq+0x108>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	0e5b      	lsrs	r3, r3, #25
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	3301      	adds	r3, #1
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80088f8:	69bb      	ldr	r3, [r7, #24]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3724      	adds	r7, #36	; 0x24
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40021000 	.word	0x40021000
 800890c:	0800b540 	.word	0x0800b540
 8008910:	00f42400 	.word	0x00f42400
 8008914:	007a1200 	.word	0x007a1200

08008918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008918:	b480      	push	{r7}
 800891a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800891c:	4b03      	ldr	r3, [pc, #12]	; (800892c <HAL_RCC_GetHCLKFreq+0x14>)
 800891e:	681b      	ldr	r3, [r3, #0]
}
 8008920:	4618      	mov	r0, r3
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20002004 	.word	0x20002004

08008930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008934:	f7ff fff0 	bl	8008918 <HAL_RCC_GetHCLKFreq>
 8008938:	4602      	mov	r2, r0
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	4904      	ldr	r1, [pc, #16]	; (8008958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008946:	5ccb      	ldrb	r3, [r1, r3]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40021000 	.word	0x40021000
 8008958:	0800b538 	.word	0x0800b538

0800895c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008960:	f7ff ffda 	bl	8008918 <HAL_RCC_GetHCLKFreq>
 8008964:	4602      	mov	r2, r0
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	0adb      	lsrs	r3, r3, #11
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	4904      	ldr	r1, [pc, #16]	; (8008984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008972:	5ccb      	ldrb	r3, [r1, r3]
 8008974:	f003 031f 	and.w	r3, r3, #31
 8008978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800897c:	4618      	mov	r0, r3
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40021000 	.word	0x40021000
 8008984:	0800b538 	.word	0x0800b538

08008988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008990:	2300      	movs	r3, #0
 8008992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008994:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80089a0:	f7ff f922 	bl	8007be8 <HAL_PWREx_GetVoltageRange>
 80089a4:	6178      	str	r0, [r7, #20]
 80089a6:	e014      	b.n	80089d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80089aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ac:	4a24      	ldr	r2, [pc, #144]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80089ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b2:	6593      	str	r3, [r2, #88]	; 0x58
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80089b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80089c0:	f7ff f912 	bl	8007be8 <HAL_PWREx_GetVoltageRange>
 80089c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80089c6:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80089c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ca:	4a1d      	ldr	r2, [pc, #116]	; (8008a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80089cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d8:	d10b      	bne.n	80089f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b80      	cmp	r3, #128	; 0x80
 80089de:	d919      	bls.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2ba0      	cmp	r3, #160	; 0xa0
 80089e4:	d902      	bls.n	80089ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80089e6:	2302      	movs	r3, #2
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	e013      	b.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80089ec:	2301      	movs	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	e010      	b.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d902      	bls.n	80089fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80089f8:	2303      	movs	r3, #3
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	e00a      	b.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d102      	bne.n	8008a0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a04:	2302      	movs	r3, #2
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	e004      	b.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b70      	cmp	r3, #112	; 0x70
 8008a0e:	d101      	bne.n	8008a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008a10:	2301      	movs	r3, #1
 8008a12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008a14:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f023 0207 	bic.w	r2, r3, #7
 8008a1c:	4909      	ldr	r1, [pc, #36]	; (8008a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008a24:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d001      	beq.n	8008a36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40021000 	.word	0x40021000
 8008a44:	40022000 	.word	0x40022000

08008a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a50:	2300      	movs	r3, #0
 8008a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a54:	2300      	movs	r3, #0
 8008a56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d041      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a6c:	d02a      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a72:	d824      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a78:	d008      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a7e:	d81e      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a88:	d010      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a8a:	e018      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008a8c:	4b86      	ldr	r3, [pc, #536]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	4a85      	ldr	r2, [pc, #532]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008a98:	e015      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f839 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008aaa:	e00c      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3320      	adds	r3, #32
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 f924 	bl	8009d00 <RCCEx_PLLSAI2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008abc:	e003      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	74fb      	strb	r3, [r7, #19]
      break;
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ac6:	7cfb      	ldrb	r3, [r7, #19]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008acc:	4b76      	ldr	r3, [pc, #472]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ada:	4973      	ldr	r1, [pc, #460]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008ae2:	e001      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae4:	7cfb      	ldrb	r3, [r7, #19]
 8008ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d041      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008afc:	d02a      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008afe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b02:	d824      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b08:	d008      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0e:	d81e      	bhi.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b18:	d010      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008b1a:	e018      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b1c:	4b62      	ldr	r3, [pc, #392]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	4a61      	ldr	r2, [pc, #388]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008b28:	e015      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fff1 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008b36:	4603      	mov	r3, r0
 8008b38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008b3a:	e00c      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3320      	adds	r3, #32
 8008b40:	2100      	movs	r1, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 f8dc 	bl	8009d00 <RCCEx_PLLSAI2_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008b4c:	e003      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	74fb      	strb	r3, [r7, #19]
      break;
 8008b52:	e000      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b56:	7cfb      	ldrb	r3, [r7, #19]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008b5c:	4b52      	ldr	r3, [pc, #328]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6a:	494f      	ldr	r1, [pc, #316]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008b72:	e001      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b74:	7cfb      	ldrb	r3, [r7, #19]
 8008b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80a0 	beq.w	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b86:	2300      	movs	r3, #0
 8008b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00d      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba0:	4b41      	ldr	r3, [pc, #260]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba4:	4a40      	ldr	r2, [pc, #256]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008baa:	6593      	str	r3, [r2, #88]	; 0x58
 8008bac:	4b3e      	ldr	r3, [pc, #248]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb4:	60bb      	str	r3, [r7, #8]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bbc:	4b3b      	ldr	r3, [pc, #236]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a3a      	ldr	r2, [pc, #232]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bc8:	f7fe fa8c 	bl	80070e4 <HAL_GetTick>
 8008bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008bce:	e009      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd0:	f7fe fa88 	bl	80070e4 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d902      	bls.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	74fb      	strb	r3, [r7, #19]
        break;
 8008be2:	e005      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008be4:	4b31      	ldr	r3, [pc, #196]	; (8008cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0ef      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008bf0:	7cfb      	ldrb	r3, [r7, #19]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d15c      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008bf6:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d01f      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d019      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c20:	4b21      	ldr	r3, [pc, #132]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c26:	4a20      	ldr	r2, [pc, #128]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c36:	4a1c      	ldr	r2, [pc, #112]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c40:	4a19      	ldr	r2, [pc, #100]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d016      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c52:	f7fe fa47 	bl	80070e4 <HAL_GetTick>
 8008c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c58:	e00b      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c5a:	f7fe fa43 	bl	80070e4 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d902      	bls.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8008c70:	e006      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c72:	4b0d      	ldr	r3, [pc, #52]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ec      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008c80:	7cfb      	ldrb	r3, [r7, #19]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10c      	bne.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c86:	4b08      	ldr	r3, [pc, #32]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c96:	4904      	ldr	r1, [pc, #16]	; (8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008c9e:	e009      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ca0:	7cfb      	ldrb	r3, [r7, #19]
 8008ca2:	74bb      	strb	r3, [r7, #18]
 8008ca4:	e006      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008ca6:	bf00      	nop
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb0:	7cfb      	ldrb	r3, [r7, #19]
 8008cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cb4:	7c7b      	ldrb	r3, [r7, #17]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d105      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cba:	4b9e      	ldr	r3, [pc, #632]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	4a9d      	ldr	r2, [pc, #628]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cd2:	4b98      	ldr	r3, [pc, #608]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd8:	f023 0203 	bic.w	r2, r3, #3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	4994      	ldr	r1, [pc, #592]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008cf4:	4b8f      	ldr	r3, [pc, #572]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfa:	f023 020c 	bic.w	r2, r3, #12
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d02:	498c      	ldr	r1, [pc, #560]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d16:	4b87      	ldr	r3, [pc, #540]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d24:	4983      	ldr	r1, [pc, #524]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d38:	4b7e      	ldr	r3, [pc, #504]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d46:	497b      	ldr	r1, [pc, #492]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d5a:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d68:	4972      	ldr	r1, [pc, #456]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d7c:	4b6d      	ldr	r3, [pc, #436]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8a:	496a      	ldr	r1, [pc, #424]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d9e:	4b65      	ldr	r3, [pc, #404]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dac:	4961      	ldr	r1, [pc, #388]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008dc0:	4b5c      	ldr	r3, [pc, #368]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dce:	4959      	ldr	r1, [pc, #356]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008de2:	4b54      	ldr	r3, [pc, #336]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	4950      	ldr	r1, [pc, #320]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e04:	4b4b      	ldr	r3, [pc, #300]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	4948      	ldr	r1, [pc, #288]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e26:	4b43      	ldr	r3, [pc, #268]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e34:	493f      	ldr	r1, [pc, #252]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d028      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e48:	4b3a      	ldr	r3, [pc, #232]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e56:	4937      	ldr	r1, [pc, #220]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e66:	d106      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e68:	4b32      	ldr	r3, [pc, #200]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	4a31      	ldr	r2, [pc, #196]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e72:	60d3      	str	r3, [r2, #12]
 8008e74:	e011      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e7e:	d10c      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	2101      	movs	r1, #1
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fe46 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008e90:	7cfb      	ldrb	r3, [r7, #19]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008e96:	7cfb      	ldrb	r3, [r7, #19]
 8008e98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d028      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ea6:	4b23      	ldr	r3, [pc, #140]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb4:	491f      	ldr	r1, [pc, #124]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ec6:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	4a1a      	ldr	r2, [pc, #104]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed0:	60d3      	str	r3, [r2, #12]
 8008ed2:	e011      	b.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008edc:	d10c      	bne.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fe17 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008eea:	4603      	mov	r3, r0
 8008eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008ef4:	7cfb      	ldrb	r3, [r7, #19]
 8008ef6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02b      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f12:	4908      	ldr	r1, [pc, #32]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f22:	d109      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f24:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a02      	ldr	r2, [pc, #8]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f2e:	60d3      	str	r3, [r2, #12]
 8008f30:	e014      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008f32:	bf00      	nop
 8008f34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f40:	d10c      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3304      	adds	r3, #4
 8008f46:	2101      	movs	r1, #1
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fde5 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008f52:	7cfb      	ldrb	r3, [r7, #19]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008f58:	7cfb      	ldrb	r3, [r7, #19]
 8008f5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d02f      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f68:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f76:	4928      	ldr	r1, [pc, #160]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f86:	d10d      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fdc2 	bl	8009b18 <RCCEx_PLLSAI1_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008f98:	7cfb      	ldrb	r3, [r7, #19]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d014      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008f9e:	7cfb      	ldrb	r3, [r7, #19]
 8008fa0:	74bb      	strb	r3, [r7, #18]
 8008fa2:	e011      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fac:	d10c      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3320      	adds	r3, #32
 8008fb2:	2102      	movs	r1, #2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fea3 	bl	8009d00 <RCCEx_PLLSAI2_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fbe:	7cfb      	ldrb	r3, [r7, #19]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008fc4:	7cfb      	ldrb	r3, [r7, #19]
 8008fc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00a      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe2:	490d      	ldr	r1, [pc, #52]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ff6:	4b08      	ldr	r3, [pc, #32]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009006:	4904      	ldr	r1, [pc, #16]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800900e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	40021000 	.word	0x40021000

0800901c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800902e:	d13e      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009030:	4bb2      	ldr	r3, [pc, #712]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009042:	d028      	beq.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800904a:	f200 8542 	bhi.w	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009054:	d005      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905c:	d00e      	beq.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800905e:	f000 bd38 	b.w	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009062:	4ba6      	ldr	r3, [pc, #664]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b02      	cmp	r3, #2
 800906e:	f040 8532 	bne.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8009072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009076:	61fb      	str	r3, [r7, #28]
      break;
 8009078:	f000 bd2d 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800907c:	4b9f      	ldr	r3, [pc, #636]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800907e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b02      	cmp	r3, #2
 8009088:	f040 8527 	bne.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800908c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009090:	61fb      	str	r3, [r7, #28]
      break;
 8009092:	f000 bd22 	b.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009096:	4b99      	ldr	r3, [pc, #612]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a2:	f040 851c 	bne.w	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80090a6:	4b96      	ldr	r3, [pc, #600]	; (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80090a8:	61fb      	str	r3, [r7, #28]
      break;
 80090aa:	f000 bd18 	b.w	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090ae:	4b93      	ldr	r3, [pc, #588]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d036      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d840      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d003      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d020      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80090d0:	e039      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80090d2:	4b8a      	ldr	r3, [pc, #552]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d116      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80090de:	4b87      	ldr	r3, [pc, #540]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80090ea:	4b84      	ldr	r3, [pc, #528]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	091b      	lsrs	r3, r3, #4
 80090f0:	f003 030f 	and.w	r3, r3, #15
 80090f4:	e005      	b.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80090f6:	4b81      	ldr	r3, [pc, #516]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80090f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090fc:	0a1b      	lsrs	r3, r3, #8
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	4a80      	ldr	r2, [pc, #512]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8009104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009108:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800910a:	e01f      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]
      break;
 8009110:	e01c      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009112:	4b7a      	ldr	r3, [pc, #488]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800911a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911e:	d102      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8009120:	4b79      	ldr	r3, [pc, #484]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8009122:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009124:	e012      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	61bb      	str	r3, [r7, #24]
      break;
 800912a:	e00f      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800912c:	4b73      	ldr	r3, [pc, #460]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009138:	d102      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800913a:	4b74      	ldr	r3, [pc, #464]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800913c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800913e:	e005      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	61bb      	str	r3, [r7, #24]
      break;
 8009144:	e002      	b.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	61bb      	str	r3, [r7, #24]
      break;
 800914a:	bf00      	nop
    }

    switch(PeriphClk)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009152:	f000 80dd 	beq.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800915c:	f200 84c1 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009166:	f000 80d3 	beq.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009170:	f200 84b7 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800917a:	f000 835f 	beq.w	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009184:	f200 84ad 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918e:	f000 847e 	beq.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009198:	f200 84a3 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a2:	f000 82cd 	beq.w	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091ac:	f200 8499 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b6:	f000 80ab 	beq.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c0:	f200 848f 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	f000 8090 	beq.w	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	f200 8485 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091de:	d07f      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e6:	f200 847c 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f0:	f000 8403 	beq.w	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091fa:	f200 8472 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009204:	f000 83af 	beq.w	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800920e:	f200 8468 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009218:	f000 8379 	beq.w	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009222:	f200 845e 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	f000 8344 	beq.w	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b80      	cmp	r3, #128	; 0x80
 8009232:	f200 8456 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b20      	cmp	r3, #32
 800923a:	d84b      	bhi.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 844f 	beq.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	3b01      	subs	r3, #1
 8009248:	2b1f      	cmp	r3, #31
 800924a:	f200 844a 	bhi.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	0800943d 	.word	0x0800943d
 8009258:	080094ab 	.word	0x080094ab
 800925c:	08009ae3 	.word	0x08009ae3
 8009260:	0800953f 	.word	0x0800953f
 8009264:	08009ae3 	.word	0x08009ae3
 8009268:	08009ae3 	.word	0x08009ae3
 800926c:	08009ae3 	.word	0x08009ae3
 8009270:	080095c5 	.word	0x080095c5
 8009274:	08009ae3 	.word	0x08009ae3
 8009278:	08009ae3 	.word	0x08009ae3
 800927c:	08009ae3 	.word	0x08009ae3
 8009280:	08009ae3 	.word	0x08009ae3
 8009284:	08009ae3 	.word	0x08009ae3
 8009288:	08009ae3 	.word	0x08009ae3
 800928c:	08009ae3 	.word	0x08009ae3
 8009290:	0800963d 	.word	0x0800963d
 8009294:	08009ae3 	.word	0x08009ae3
 8009298:	08009ae3 	.word	0x08009ae3
 800929c:	08009ae3 	.word	0x08009ae3
 80092a0:	08009ae3 	.word	0x08009ae3
 80092a4:	08009ae3 	.word	0x08009ae3
 80092a8:	08009ae3 	.word	0x08009ae3
 80092ac:	08009ae3 	.word	0x08009ae3
 80092b0:	08009ae3 	.word	0x08009ae3
 80092b4:	08009ae3 	.word	0x08009ae3
 80092b8:	08009ae3 	.word	0x08009ae3
 80092bc:	08009ae3 	.word	0x08009ae3
 80092c0:	08009ae3 	.word	0x08009ae3
 80092c4:	08009ae3 	.word	0x08009ae3
 80092c8:	08009ae3 	.word	0x08009ae3
 80092cc:	08009ae3 	.word	0x08009ae3
 80092d0:	080096bf 	.word	0x080096bf
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	f000 82c1 	beq.w	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80092dc:	f000 bc01 	b.w	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80092e0:	69b9      	ldr	r1, [r7, #24]
 80092e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80092e6:	f000 fde9 	bl	8009ebc <RCCEx_GetSAIxPeriphCLKFreq>
 80092ea:	61f8      	str	r0, [r7, #28]
      break;
 80092ec:	e3fa      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80092f4:	f000 fde2 	bl	8009ebc <RCCEx_GetSAIxPeriphCLKFreq>
 80092f8:	61f8      	str	r0, [r7, #28]
      break;
 80092fa:	e3f3      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80092fc:	40021000 	.word	0x40021000
 8009300:	0003d090 	.word	0x0003d090
 8009304:	0800b540 	.word	0x0800b540
 8009308:	00f42400 	.word	0x00f42400
 800930c:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009310:	4ba9      	ldr	r3, [pc, #676]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009316:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009322:	d00c      	beq.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800932a:	d87f      	bhi.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009332:	d04e      	beq.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800933a:	d01d      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800933c:	e076      	b.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800933e:	4b9e      	ldr	r3, [pc, #632]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b02      	cmp	r3, #2
 8009348:	d172      	bne.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800934a:	4b9b      	ldr	r3, [pc, #620]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8009356:	4b98      	ldr	r3, [pc, #608]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	e005      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8009362:	4b95      	ldr	r3, [pc, #596]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	4a93      	ldr	r2, [pc, #588]	; (80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009374:	61fb      	str	r3, [r7, #28]
          break;
 8009376:	e05b      	b.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009378:	4b8f      	ldr	r3, [pc, #572]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009384:	d156      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009386:	4b8c      	ldr	r3, [pc, #560]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800938e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009392:	d14f      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009394:	4b88      	ldr	r3, [pc, #544]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	0a1b      	lsrs	r3, r3, #8
 800939a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800939e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	fb03 f202 	mul.w	r2, r3, r2
 80093a8:	4b83      	ldr	r3, [pc, #524]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	091b      	lsrs	r3, r3, #4
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	3301      	adds	r3, #1
 80093b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80093ba:	4b7f      	ldr	r3, [pc, #508]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	0d5b      	lsrs	r3, r3, #21
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	3301      	adds	r3, #1
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	61fb      	str	r3, [r7, #28]
          break;
 80093d0:	e030      	b.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80093d2:	4b79      	ldr	r3, [pc, #484]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093de:	d12b      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80093e0:	4b75      	ldr	r3, [pc, #468]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093ec:	d124      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80093ee:	4b72      	ldr	r3, [pc, #456]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	fb03 f202 	mul.w	r2, r3, r2
 8009402:	4b6d      	ldr	r3, [pc, #436]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	091b      	lsrs	r3, r3, #4
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	3301      	adds	r3, #1
 800940e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009412:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8009414:	4b68      	ldr	r3, [pc, #416]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	0d5b      	lsrs	r3, r3, #21
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	3301      	adds	r3, #1
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	61fb      	str	r3, [r7, #28]
          break;
 800942a:	e005      	b.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800942c:	bf00      	nop
 800942e:	e359      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009430:	bf00      	nop
 8009432:	e357      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009434:	bf00      	nop
 8009436:	e355      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009438:	bf00      	nop
        break;
 800943a:	e353      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800943c:	4b5e      	ldr	r3, [pc, #376]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800943e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2b03      	cmp	r3, #3
 800944c:	d827      	bhi.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009465 	.word	0x08009465
 8009458:	0800946d 	.word	0x0800946d
 800945c:	08009475 	.word	0x08009475
 8009460:	08009489 	.word	0x08009489
          frequency = HAL_RCC_GetPCLK2Freq();
 8009464:	f7ff fa7a 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 8009468:	61f8      	str	r0, [r7, #28]
          break;
 800946a:	e01d      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800946c:	f7ff f9c8 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009470:	61f8      	str	r0, [r7, #28]
          break;
 8009472:	e019      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009474:	4b50      	ldr	r3, [pc, #320]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800947c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009480:	d10f      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8009482:	4b4f      	ldr	r3, [pc, #316]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009484:	61fb      	str	r3, [r7, #28]
          break;
 8009486:	e00c      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009488:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800948a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b02      	cmp	r3, #2
 8009494:	d107      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8009496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800949a:	61fb      	str	r3, [r7, #28]
          break;
 800949c:	e003      	b.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800949e:	bf00      	nop
 80094a0:	e320      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094a2:	bf00      	nop
 80094a4:	e31e      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80094a6:	bf00      	nop
        break;
 80094a8:	e31c      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80094aa:	4b43      	ldr	r3, [pc, #268]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80094ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b0:	f003 030c 	and.w	r3, r3, #12
 80094b4:	613b      	str	r3, [r7, #16]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2b0c      	cmp	r3, #12
 80094ba:	d83a      	bhi.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094f9 	.word	0x080094f9
 80094c8:	08009533 	.word	0x08009533
 80094cc:	08009533 	.word	0x08009533
 80094d0:	08009533 	.word	0x08009533
 80094d4:	08009501 	.word	0x08009501
 80094d8:	08009533 	.word	0x08009533
 80094dc:	08009533 	.word	0x08009533
 80094e0:	08009533 	.word	0x08009533
 80094e4:	08009509 	.word	0x08009509
 80094e8:	08009533 	.word	0x08009533
 80094ec:	08009533 	.word	0x08009533
 80094f0:	08009533 	.word	0x08009533
 80094f4:	0800951d 	.word	0x0800951d
          frequency = HAL_RCC_GetPCLK1Freq();
 80094f8:	f7ff fa1a 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 80094fc:	61f8      	str	r0, [r7, #28]
          break;
 80094fe:	e01d      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8009500:	f7ff f97e 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009504:	61f8      	str	r0, [r7, #28]
          break;
 8009506:	e019      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009508:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009514:	d10f      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8009516:	4b2a      	ldr	r3, [pc, #168]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009518:	61fb      	str	r3, [r7, #28]
          break;
 800951a:	e00c      	b.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800951c:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b02      	cmp	r3, #2
 8009528:	d107      	bne.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800952a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800952e:	61fb      	str	r3, [r7, #28]
          break;
 8009530:	e003      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8009532:	bf00      	nop
 8009534:	e2d6      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009536:	bf00      	nop
 8009538:	e2d4      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800953a:	bf00      	nop
        break;
 800953c:	e2d2      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800953e:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009548:	613b      	str	r3, [r7, #16]
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b30      	cmp	r3, #48	; 0x30
 800954e:	d021      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2b30      	cmp	r3, #48	; 0x30
 8009554:	d829      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b20      	cmp	r3, #32
 800955a:	d011      	beq.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	2b20      	cmp	r3, #32
 8009560:	d823      	bhi.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b10      	cmp	r3, #16
 800956c:	d004      	beq.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800956e:	e01c      	b.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009570:	f7ff f9de 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 8009574:	61f8      	str	r0, [r7, #28]
          break;
 8009576:	e01d      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8009578:	f7ff f942 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800957c:	61f8      	str	r0, [r7, #28]
          break;
 800957e:	e019      	b.n	80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958c:	d10f      	bne.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800958e:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009590:	61fb      	str	r3, [r7, #28]
          break;
 8009592:	e00c      	b.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009594:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d107      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80095a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a6:	61fb      	str	r3, [r7, #28]
          break;
 80095a8:	e003      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80095aa:	bf00      	nop
 80095ac:	e29a      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80095ae:	bf00      	nop
 80095b0:	e298      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80095b2:	bf00      	nop
        break;
 80095b4:	e296      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80095b6:	bf00      	nop
 80095b8:	40021000 	.word	0x40021000
 80095bc:	0800b540 	.word	0x0800b540
 80095c0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80095c4:	4b9b      	ldr	r3, [pc, #620]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80095c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2bc0      	cmp	r3, #192	; 0xc0
 80095d4:	d021      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2bc0      	cmp	r3, #192	; 0xc0
 80095da:	d829      	bhi.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	2b80      	cmp	r3, #128	; 0x80
 80095e0:	d011      	beq.n	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d823      	bhi.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b40      	cmp	r3, #64	; 0x40
 80095f2:	d004      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80095f4:	e01c      	b.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80095f6:	f7ff f99b 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 80095fa:	61f8      	str	r0, [r7, #28]
          break;
 80095fc:	e01d      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80095fe:	f7ff f8ff 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009602:	61f8      	str	r0, [r7, #28]
          break;
 8009604:	e019      	b.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009606:	4b8b      	ldr	r3, [pc, #556]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800960e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009612:	d10f      	bne.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8009614:	4b88      	ldr	r3, [pc, #544]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8009616:	61fb      	str	r3, [r7, #28]
          break;
 8009618:	e00c      	b.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800961a:	4b86      	ldr	r3, [pc, #536]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b02      	cmp	r3, #2
 8009626:	d107      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8009628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962c:	61fb      	str	r3, [r7, #28]
          break;
 800962e:	e003      	b.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8009630:	bf00      	nop
 8009632:	e257      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009634:	bf00      	nop
 8009636:	e255      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009638:	bf00      	nop
        break;
 800963a:	e253      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800963c:	4b7d      	ldr	r3, [pc, #500]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800963e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800964e:	d025      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009656:	d82c      	bhi.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965e:	d013      	beq.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009666:	d824      	bhi.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d004      	beq.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009674:	d004      	beq.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8009676:	e01c      	b.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009678:	f7ff f95a 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800967c:	61f8      	str	r0, [r7, #28]
          break;
 800967e:	e01d      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8009680:	f7ff f8be 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009684:	61f8      	str	r0, [r7, #28]
          break;
 8009686:	e019      	b.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009688:	4b6a      	ldr	r3, [pc, #424]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009694:	d10f      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8009696:	4b68      	ldr	r3, [pc, #416]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8009698:	61fb      	str	r3, [r7, #28]
          break;
 800969a:	e00c      	b.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800969c:	4b65      	ldr	r3, [pc, #404]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800969e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d107      	bne.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80096aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ae:	61fb      	str	r3, [r7, #28]
          break;
 80096b0:	e003      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80096b2:	bf00      	nop
 80096b4:	e216      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096b6:	bf00      	nop
 80096b8:	e214      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80096ba:	bf00      	nop
        break;
 80096bc:	e212      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80096be:	4b5d      	ldr	r3, [pc, #372]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80096c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096d0:	d025      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096d8:	d82c      	bhi.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096e0:	d013      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096e8:	d824      	bhi.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d004      	beq.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f6:	d004      	beq.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80096f8:	e01c      	b.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80096fa:	f7ff f919 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 80096fe:	61f8      	str	r0, [r7, #28]
          break;
 8009700:	e01d      	b.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8009702:	f7ff f87d 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009706:	61f8      	str	r0, [r7, #28]
          break;
 8009708:	e019      	b.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800970a:	4b4a      	ldr	r3, [pc, #296]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009716:	d10f      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8009718:	4b47      	ldr	r3, [pc, #284]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800971a:	61fb      	str	r3, [r7, #28]
          break;
 800971c:	e00c      	b.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800971e:	4b45      	ldr	r3, [pc, #276]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b02      	cmp	r3, #2
 800972a:	d107      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800972c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009730:	61fb      	str	r3, [r7, #28]
          break;
 8009732:	e003      	b.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8009734:	bf00      	nop
 8009736:	e1d5      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009738:	bf00      	nop
 800973a:	e1d3      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800973c:	bf00      	nop
        break;
 800973e:	e1d1      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009740:	4b3c      	ldr	r3, [pc, #240]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800974a:	613b      	str	r3, [r7, #16]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009752:	d00c      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800975a:	d864      	bhi.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009762:	d008      	beq.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800976a:	d030      	beq.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800976c:	e05b      	b.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800976e:	f7ff f847 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009772:	61f8      	str	r0, [r7, #28]
          break;
 8009774:	e05c      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800977e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009782:	d152      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8009784:	4b2b      	ldr	r3, [pc, #172]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d04c      	beq.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009790:	4b28      	ldr	r3, [pc, #160]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	0a1b      	lsrs	r3, r3, #8
 8009796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800979a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	fb03 f202 	mul.w	r2, r3, r2
 80097a4:	4b23      	ldr	r3, [pc, #140]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	091b      	lsrs	r3, r3, #4
 80097aa:	f003 0307 	and.w	r3, r3, #7
 80097ae:	3301      	adds	r3, #1
 80097b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80097b6:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	0e5b      	lsrs	r3, r3, #25
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	3301      	adds	r3, #1
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ca:	61fb      	str	r3, [r7, #28]
          break;
 80097cc:	e02d      	b.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80097ce:	4b19      	ldr	r3, [pc, #100]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097da:	d128      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80097dc:	4b15      	ldr	r3, [pc, #84]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d022      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80097e8:	4b12      	ldr	r3, [pc, #72]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	0a1b      	lsrs	r3, r3, #8
 80097ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	fb03 f202 	mul.w	r2, r3, r2
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	091b      	lsrs	r3, r3, #4
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	3301      	adds	r3, #1
 8009808:	fbb2 f3f3 	udiv	r3, r2, r3
 800980c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	0e5b      	lsrs	r3, r3, #25
 8009814:	f003 0303 	and.w	r3, r3, #3
 8009818:	3301      	adds	r3, #1
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009822:	61fb      	str	r3, [r7, #28]
          break;
 8009824:	e003      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8009826:	bf00      	nop
 8009828:	e15c      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800982a:	bf00      	nop
 800982c:	e15a      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800982e:	bf00      	nop
        break;
 8009830:	e158      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8009832:	bf00      	nop
 8009834:	40021000 	.word	0x40021000
 8009838:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800983c:	4b9d      	ldr	r3, [pc, #628]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009846:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d103      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800984e:	f7ff f885 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 8009852:	61f8      	str	r0, [r7, #28]
        break;
 8009854:	e146      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8009856:	f7fe ffd3 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800985a:	61f8      	str	r0, [r7, #28]
        break;
 800985c:	e142      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800985e:	4b95      	ldr	r3, [pc, #596]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009868:	613b      	str	r3, [r7, #16]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009870:	d013      	beq.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009878:	d819      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d004      	beq.n	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009886:	d004      	beq.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8009888:	e011      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800988a:	f7ff f851 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800988e:	61f8      	str	r0, [r7, #28]
          break;
 8009890:	e010      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8009892:	f7fe ffb5 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009896:	61f8      	str	r0, [r7, #28]
          break;
 8009898:	e00c      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800989a:	4b86      	ldr	r3, [pc, #536]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a6:	d104      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80098a8:	4b83      	ldr	r3, [pc, #524]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80098aa:	61fb      	str	r3, [r7, #28]
          break;
 80098ac:	e001      	b.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80098ae:	bf00      	nop
 80098b0:	e118      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80098b2:	bf00      	nop
        break;
 80098b4:	e116      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80098b6:	4b7f      	ldr	r3, [pc, #508]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80098b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098c8:	d013      	beq.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d0:	d819      	bhi.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d004      	beq.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098de:	d004      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80098e0:	e011      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80098e2:	f7ff f825 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 80098e6:	61f8      	str	r0, [r7, #28]
          break;
 80098e8:	e010      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80098ea:	f7fe ff89 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 80098ee:	61f8      	str	r0, [r7, #28]
          break;
 80098f0:	e00c      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098f2:	4b70      	ldr	r3, [pc, #448]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098fe:	d104      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8009900:	4b6d      	ldr	r3, [pc, #436]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009902:	61fb      	str	r3, [r7, #28]
          break;
 8009904:	e001      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8009906:	bf00      	nop
 8009908:	e0ec      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800990a:	bf00      	nop
        break;
 800990c:	e0ea      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800990e:	4b69      	ldr	r3, [pc, #420]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009918:	613b      	str	r3, [r7, #16]
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009920:	d013      	beq.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009928:	d819      	bhi.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009936:	d004      	beq.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8009938:	e011      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800993a:	f7fe fff9 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800993e:	61f8      	str	r0, [r7, #28]
          break;
 8009940:	e010      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8009942:	f7fe ff5d 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 8009946:	61f8      	str	r0, [r7, #28]
          break;
 8009948:	e00c      	b.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800994a:	4b5a      	ldr	r3, [pc, #360]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009956:	d104      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8009958:	4b57      	ldr	r3, [pc, #348]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800995a:	61fb      	str	r3, [r7, #28]
          break;
 800995c:	e001      	b.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800995e:	bf00      	nop
 8009960:	e0c0      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009962:	bf00      	nop
        break;
 8009964:	e0be      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009966:	4b53      	ldr	r3, [pc, #332]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009978:	d02c      	beq.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009980:	d833      	bhi.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009988:	d01a      	beq.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009990:	d82b      	bhi.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d004      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800999e:	d004      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80099a0:	e023      	b.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80099a2:	f7fe ffc5 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 80099a6:	61f8      	str	r0, [r7, #28]
          break;
 80099a8:	e026      	b.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80099aa:	4b42      	ldr	r3, [pc, #264]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80099ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d11a      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80099b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80099bc:	61fb      	str	r3, [r7, #28]
          break;
 80099be:	e016      	b.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099c0:	4b3c      	ldr	r3, [pc, #240]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099cc:	d111      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80099ce:	4b3a      	ldr	r3, [pc, #232]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80099d0:	61fb      	str	r3, [r7, #28]
          break;
 80099d2:	e00e      	b.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099d4:	4b37      	ldr	r3, [pc, #220]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d109      	bne.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80099e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099e6:	61fb      	str	r3, [r7, #28]
          break;
 80099e8:	e005      	b.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80099ea:	bf00      	nop
 80099ec:	e07a      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80099ee:	bf00      	nop
 80099f0:	e078      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80099f2:	bf00      	nop
 80099f4:	e076      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80099f6:	bf00      	nop
        break;
 80099f8:	e074      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80099fa:	4b2e      	ldr	r3, [pc, #184]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80099fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009a04:	613b      	str	r3, [r7, #16]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a0c:	d02c      	beq.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a14:	d833      	bhi.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a1c:	d01a      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a24:	d82b      	bhi.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d004      	beq.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a32:	d004      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8009a34:	e023      	b.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a36:	f7fe ff7b 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 8009a3a:	61f8      	str	r0, [r7, #28]
          break;
 8009a3c:	e026      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d11a      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8009a4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009a50:	61fb      	str	r3, [r7, #28]
          break;
 8009a52:	e016      	b.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a54:	4b17      	ldr	r3, [pc, #92]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a60:	d111      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8009a64:	61fb      	str	r3, [r7, #28]
          break;
 8009a66:	e00e      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009a68:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d109      	bne.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8009a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a7a:	61fb      	str	r3, [r7, #28]
          break;
 8009a7c:	e005      	b.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8009a7e:	bf00      	nop
 8009a80:	e030      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009a82:	bf00      	nop
 8009a84:	e02e      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009a86:	bf00      	nop
 8009a88:	e02c      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8009a8a:	bf00      	nop
        break;
 8009a8c:	e02a      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a98:	613b      	str	r3, [r7, #16]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d004      	beq.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa6:	d009      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8009aa8:	e012      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009aaa:	f7fe ff41 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 8009aae:	61f8      	str	r0, [r7, #28]
          break;
 8009ab0:	e00e      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8009ab2:	bf00      	nop
 8009ab4:	40021000 	.word	0x40021000
 8009ab8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009abc:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ac8:	d101      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8009aca:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8009acc:	61fb      	str	r3, [r7, #28]
          break;
 8009ace:	bf00      	nop
        break;
 8009ad0:	e008      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009ad2:	bf00      	nop
 8009ad4:	e006      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009ad6:	bf00      	nop
 8009ad8:	e004      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8009ae2:	bf00      	nop
    }
  }

  return(frequency);
 8009ae4:	69fb      	ldr	r3, [r7, #28]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	40021000 	.word	0x40021000
 8009af4:	00f42400 	.word	0x00f42400

08009af8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009b02:	f043 0304 	orr.w	r3, r3, #4
 8009b06:	6013      	str	r3, [r2, #0]
}
 8009b08:	bf00      	nop
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40021000 	.word	0x40021000

08009b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009b26:	4b75      	ldr	r3, [pc, #468]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d018      	beq.n	8009b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009b32:	4b72      	ldr	r3, [pc, #456]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f003 0203 	and.w	r2, r3, #3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d10d      	bne.n	8009b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
       ||
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d009      	beq.n	8009b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009b4a:	4b6c      	ldr	r3, [pc, #432]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
       ||
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d047      	beq.n	8009bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	73fb      	strb	r3, [r7, #15]
 8009b62:	e044      	b.n	8009bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d018      	beq.n	8009b9e <RCCEx_PLLSAI1_Config+0x86>
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d825      	bhi.n	8009bbc <RCCEx_PLLSAI1_Config+0xa4>
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d002      	beq.n	8009b7a <RCCEx_PLLSAI1_Config+0x62>
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d009      	beq.n	8009b8c <RCCEx_PLLSAI1_Config+0x74>
 8009b78:	e020      	b.n	8009bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009b7a:	4b60      	ldr	r3, [pc, #384]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d11d      	bne.n	8009bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b8a:	e01a      	b.n	8009bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009b8c:	4b5b      	ldr	r3, [pc, #364]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d116      	bne.n	8009bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b9c:	e013      	b.n	8009bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009b9e:	4b57      	ldr	r3, [pc, #348]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10f      	bne.n	8009bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009baa:	4b54      	ldr	r3, [pc, #336]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d109      	bne.n	8009bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009bba:	e006      	b.n	8009bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009bc0:	e004      	b.n	8009bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e002      	b.n	8009bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009bc6:	bf00      	nop
 8009bc8:	e000      	b.n	8009bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10d      	bne.n	8009bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009bd2:	4b4a      	ldr	r3, [pc, #296]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6819      	ldr	r1, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	011b      	lsls	r3, r3, #4
 8009be6:	430b      	orrs	r3, r1
 8009be8:	4944      	ldr	r1, [pc, #272]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d17d      	bne.n	8009cf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009bf4:	4b41      	ldr	r3, [pc, #260]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a40      	ldr	r2, [pc, #256]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c00:	f7fd fa70 	bl	80070e4 <HAL_GetTick>
 8009c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009c06:	e009      	b.n	8009c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c08:	f7fd fa6c 	bl	80070e4 <HAL_GetTick>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d902      	bls.n	8009c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
        break;
 8009c1a:	e005      	b.n	8009c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009c1c:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1ef      	bne.n	8009c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d160      	bne.n	8009cf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d111      	bne.n	8009c58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c34:	4b31      	ldr	r3, [pc, #196]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	6892      	ldr	r2, [r2, #8]
 8009c44:	0211      	lsls	r1, r2, #8
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68d2      	ldr	r2, [r2, #12]
 8009c4a:	0912      	lsrs	r2, r2, #4
 8009c4c:	0452      	lsls	r2, r2, #17
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	492a      	ldr	r1, [pc, #168]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	610b      	str	r3, [r1, #16]
 8009c56:	e027      	b.n	8009ca8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d112      	bne.n	8009c84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c5e:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	6892      	ldr	r2, [r2, #8]
 8009c6e:	0211      	lsls	r1, r2, #8
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6912      	ldr	r2, [r2, #16]
 8009c74:	0852      	lsrs	r2, r2, #1
 8009c76:	3a01      	subs	r2, #1
 8009c78:	0552      	lsls	r2, r2, #21
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	491f      	ldr	r1, [pc, #124]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	610b      	str	r3, [r1, #16]
 8009c82:	e011      	b.n	8009ca8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c84:	4b1d      	ldr	r3, [pc, #116]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6892      	ldr	r2, [r2, #8]
 8009c94:	0211      	lsls	r1, r2, #8
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	6952      	ldr	r2, [r2, #20]
 8009c9a:	0852      	lsrs	r2, r2, #1
 8009c9c:	3a01      	subs	r2, #1
 8009c9e:	0652      	lsls	r2, r2, #25
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	4916      	ldr	r1, [pc, #88]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009ca8:	4b14      	ldr	r3, [pc, #80]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a13      	ldr	r2, [pc, #76]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb4:	f7fd fa16 	bl	80070e4 <HAL_GetTick>
 8009cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009cba:	e009      	b.n	8009cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009cbc:	f7fd fa12 	bl	80070e4 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d902      	bls.n	8009cd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8009cce:	e005      	b.n	8009cdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0ef      	beq.n	8009cbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d106      	bne.n	8009cf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009ce2:	4b06      	ldr	r3, [pc, #24]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	4904      	ldr	r1, [pc, #16]	; (8009cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40021000 	.word	0x40021000

08009d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d018      	beq.n	8009d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009d1a:	4b67      	ldr	r3, [pc, #412]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f003 0203 	and.w	r2, r3, #3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d10d      	bne.n	8009d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009d32:	4b61      	ldr	r3, [pc, #388]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	091b      	lsrs	r3, r3, #4
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
       ||
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d047      	beq.n	8009dd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	73fb      	strb	r3, [r7, #15]
 8009d4a:	e044      	b.n	8009dd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d018      	beq.n	8009d86 <RCCEx_PLLSAI2_Config+0x86>
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d825      	bhi.n	8009da4 <RCCEx_PLLSAI2_Config+0xa4>
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d002      	beq.n	8009d62 <RCCEx_PLLSAI2_Config+0x62>
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d009      	beq.n	8009d74 <RCCEx_PLLSAI2_Config+0x74>
 8009d60:	e020      	b.n	8009da4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d62:	4b55      	ldr	r3, [pc, #340]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d11d      	bne.n	8009daa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d72:	e01a      	b.n	8009daa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d74:	4b50      	ldr	r3, [pc, #320]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d116      	bne.n	8009dae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d84:	e013      	b.n	8009dae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d86:	4b4c      	ldr	r3, [pc, #304]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10f      	bne.n	8009db2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d92:	4b49      	ldr	r3, [pc, #292]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009da2:	e006      	b.n	8009db2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
      break;
 8009da8:	e004      	b.n	8009db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009daa:	bf00      	nop
 8009dac:	e002      	b.n	8009db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10d      	bne.n	8009dd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009dba:	4b3f      	ldr	r3, [pc, #252]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6819      	ldr	r1, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	011b      	lsls	r3, r3, #4
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	4939      	ldr	r1, [pc, #228]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d167      	bne.n	8009eac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009ddc:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a35      	ldr	r2, [pc, #212]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009de8:	f7fd f97c 	bl	80070e4 <HAL_GetTick>
 8009dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009dee:	e009      	b.n	8009e04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009df0:	f7fd f978 	bl	80070e4 <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d902      	bls.n	8009e04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	73fb      	strb	r3, [r7, #15]
        break;
 8009e02:	e005      	b.n	8009e10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009e04:	4b2c      	ldr	r3, [pc, #176]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1ef      	bne.n	8009df0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d14a      	bne.n	8009eac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d111      	bne.n	8009e40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009e1c:	4b26      	ldr	r3, [pc, #152]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6892      	ldr	r2, [r2, #8]
 8009e2c:	0211      	lsls	r1, r2, #8
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	68d2      	ldr	r2, [r2, #12]
 8009e32:	0912      	lsrs	r2, r2, #4
 8009e34:	0452      	lsls	r2, r2, #17
 8009e36:	430a      	orrs	r2, r1
 8009e38:	491f      	ldr	r1, [pc, #124]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	614b      	str	r3, [r1, #20]
 8009e3e:	e011      	b.n	8009e64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009e40:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6892      	ldr	r2, [r2, #8]
 8009e50:	0211      	lsls	r1, r2, #8
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6912      	ldr	r2, [r2, #16]
 8009e56:	0852      	lsrs	r2, r2, #1
 8009e58:	3a01      	subs	r2, #1
 8009e5a:	0652      	lsls	r2, r2, #25
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	4916      	ldr	r1, [pc, #88]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009e64:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a13      	ldr	r2, [pc, #76]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e70:	f7fd f938 	bl	80070e4 <HAL_GetTick>
 8009e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009e76:	e009      	b.n	8009e8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009e78:	f7fd f934 	bl	80070e4 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d902      	bls.n	8009e8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	73fb      	strb	r3, [r7, #15]
          break;
 8009e8a:	e005      	b.n	8009e98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0ef      	beq.n	8009e78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009e9e:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ea0:	695a      	ldr	r2, [r3, #20]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	4904      	ldr	r1, [pc, #16]	; (8009eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40021000 	.word	0x40021000

08009ebc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b089      	sub	sp, #36	; 0x24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ed8:	d10c      	bne.n	8009ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009eda:	4b6e      	ldr	r3, [pc, #440]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009ee4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009eec:	d112      	bne.n	8009f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009eee:	4b6a      	ldr	r3, [pc, #424]	; (800a098 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e00f      	b.n	8009f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efa:	d10b      	bne.n	8009f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009efc:	4b65      	ldr	r3, [pc, #404]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f02:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009f06:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009f0e:	d101      	bne.n	8009f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009f10:	4b61      	ldr	r3, [pc, #388]	; (800a098 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8009f12:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f040 80b4 	bne.w	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f26:	d003      	beq.n	8009f30 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f2e:	d135      	bne.n	8009f9c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009f30:	4b58      	ldr	r3, [pc, #352]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f3c:	f040 80a1 	bne.w	800a082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8009f40:	4b54      	ldr	r3, [pc, #336]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 809a 	beq.w	800a082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009f4e:	4b51      	ldr	r3, [pc, #324]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	091b      	lsrs	r3, r3, #4
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	3301      	adds	r3, #1
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f60:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009f62:	4b4c      	ldr	r3, [pc, #304]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009f74:	4b47      	ldr	r3, [pc, #284]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8009f80:	2311      	movs	r3, #17
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e001      	b.n	8009f8a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8009f86:	2307      	movs	r3, #7
 8009f88:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	fb03 f202 	mul.w	r2, r3, r2
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f98:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009f9a:	e072      	b.n	800a082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d133      	bne.n	800a00a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009fa2:	4b3c      	ldr	r3, [pc, #240]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fae:	d169      	bne.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8009fb0:	4b38      	ldr	r3, [pc, #224]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d063      	beq.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009fbc:	4b35      	ldr	r3, [pc, #212]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	091b      	lsrs	r3, r3, #4
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	0a1b      	lsrs	r3, r3, #8
 8009fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fda:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10a      	bne.n	8009ff8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009fe2:	4b2c      	ldr	r3, [pc, #176]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8009fee:	2311      	movs	r3, #17
 8009ff0:	617b      	str	r3, [r7, #20]
 8009ff2:	e001      	b.n	8009ff8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8009ff4:	2307      	movs	r3, #7
 8009ff6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	fb03 f202 	mul.w	r2, r3, r2
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	fbb2 f3f3 	udiv	r3, r2, r3
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	e03c      	b.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a010:	d003      	beq.n	800a01a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a018:	d134      	bne.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a01a:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a026:	d12d      	bne.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800a028:	4b1a      	ldr	r3, [pc, #104]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d027      	beq.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a034:	4b17      	ldr	r3, [pc, #92]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	091b      	lsrs	r3, r3, #4
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	3301      	adds	r3, #1
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	fbb2 f3f3 	udiv	r3, r2, r3
 800a046:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a048:	4b12      	ldr	r3, [pc, #72]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	0a1b      	lsrs	r3, r3, #8
 800a04e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a052:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800a066:	2311      	movs	r3, #17
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e001      	b.n	800a070 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800a06c:	2307      	movs	r3, #7
 800a06e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	fb03 f202 	mul.w	r2, r3, r2
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e000      	b.n	800a084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a082:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a084:	69fb      	ldr	r3, [r7, #28]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3724      	adds	r7, #36	; 0x24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40021000 	.word	0x40021000
 800a098:	001fff68 	.word	0x001fff68

0800a09c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e155      	b.n	800a35a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f7 f818 	bl	80010f8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f959 	bl	800a380 <SAI_Disable>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e140      	b.n	800a35a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d00c      	beq.n	800a102 <HAL_SAI_Init+0x66>
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d80d      	bhi.n	800a108 <HAL_SAI_Init+0x6c>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SAI_Init+0x5a>
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d003      	beq.n	800a0fc <HAL_SAI_Init+0x60>
 800a0f4:	e008      	b.n	800a108 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61fb      	str	r3, [r7, #28]
      break;
 800a0fa:	e008      	b.n	800a10e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	61fb      	str	r3, [r7, #28]
      break;
 800a100:	e005      	b.n	800a10e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a102:	2320      	movs	r3, #32
 800a104:	61fb      	str	r3, [r7, #28]
      break;
 800a106:	e002      	b.n	800a10e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 800a108:	2300      	movs	r3, #0
 800a10a:	61fb      	str	r3, [r7, #28]
      break;
 800a10c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	2b03      	cmp	r3, #3
 800a114:	d81d      	bhi.n	800a152 <HAL_SAI_Init+0xb6>
 800a116:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <HAL_SAI_Init+0x80>)
 800a118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11c:	0800a12d 	.word	0x0800a12d
 800a120:	0800a133 	.word	0x0800a133
 800a124:	0800a13b 	.word	0x0800a13b
 800a128:	0800a143 	.word	0x0800a143
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
      break;
 800a130:	e012      	b.n	800a158 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a136:	617b      	str	r3, [r7, #20]
      break;
 800a138:	e00e      	b.n	800a158 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a13a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a13e:	617b      	str	r3, [r7, #20]
      break;
 800a140:	e00a      	b.n	800a158 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a146:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	61fb      	str	r3, [r7, #28]
      break;
 800a150:	e002      	b.n	800a158 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	617b      	str	r3, [r7, #20]
      break;
 800a156:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a81      	ldr	r2, [pc, #516]	; (800a364 <HAL_SAI_Init+0x2c8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_SAI_Init+0xd0>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a80      	ldr	r2, [pc, #512]	; (800a368 <HAL_SAI_Init+0x2cc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d103      	bne.n	800a174 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800a16c:	4a7f      	ldr	r2, [pc, #508]	; (800a36c <HAL_SAI_Init+0x2d0>)
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	e002      	b.n	800a17a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a174:	4a7e      	ldr	r2, [pc, #504]	; (800a370 <HAL_SAI_Init+0x2d4>)
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d041      	beq.n	800a206 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a77      	ldr	r2, [pc, #476]	; (800a364 <HAL_SAI_Init+0x2c8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d004      	beq.n	800a196 <HAL_SAI_Init+0xfa>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a75      	ldr	r2, [pc, #468]	; (800a368 <HAL_SAI_Init+0x2cc>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d105      	bne.n	800a1a2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a196:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a19a:	f7fe ff3f 	bl	800901c <HAL_RCCEx_GetPeriphCLKFreq>
 800a19e:	6138      	str	r0, [r7, #16]
 800a1a0:	e004      	b.n	800a1ac <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a1a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a1a6:	f7fe ff39 	bl	800901c <HAL_RCCEx_GetPeriphCLKFreq>
 800a1aa:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	025b      	lsls	r3, r3, #9
 800a1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4a6b      	ldr	r2, [pc, #428]	; (800a374 <HAL_SAI_Init+0x2d8>)
 800a1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1cc:	08da      	lsrs	r2, r3, #3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	4b67      	ldr	r3, [pc, #412]	; (800a374 <HAL_SAI_Init+0x2d8>)
 800a1d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1da:	08da      	lsrs	r2, r3, #3
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	1aca      	subs	r2, r1, r3
 800a1e6:	2a08      	cmp	r2, #8
 800a1e8:	d904      	bls.n	800a1f4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d104      	bne.n	800a206 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	085a      	lsrs	r2, r3, #1
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <HAL_SAI_Init+0x17a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d109      	bne.n	800a22a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_SAI_Init+0x186>
 800a21e:	2300      	movs	r3, #0
 800a220:	e001      	b.n	800a226 <HAL_SAI_Init+0x18a>
 800a222:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a226:	61bb      	str	r3, [r7, #24]
 800a228:	e008      	b.n	800a23c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d102      	bne.n	800a238 <HAL_SAI_Init+0x19c>
 800a232:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a236:	e000      	b.n	800a23a <HAL_SAI_Init+0x19e>
 800a238:	2300      	movs	r3, #0
 800a23a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6819      	ldr	r1, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b4c      	ldr	r3, [pc, #304]	; (800a378 <HAL_SAI_Init+0x2dc>)
 800a248:	400b      	ands	r3, r1
 800a24a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6819      	ldr	r1, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a260:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	431a      	orrs	r2, r3
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 800a274:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a280:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	051b      	lsls	r3, r3, #20
 800a288:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	6812      	ldr	r2, [r2, #0]
 800a29c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a2a0:	f023 030f 	bic.w	r3, r3, #15
 800a2a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6859      	ldr	r1, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	699a      	ldr	r2, [r3, #24]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6899      	ldr	r1, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b2b      	ldr	r3, [pc, #172]	; (800a37c <HAL_SAI_Init+0x2e0>)
 800a2d0:	400b      	ands	r3, r1
 800a2d2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6899      	ldr	r1, [r3, #8]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a2e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800a2ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800a2f0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a2fa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68d9      	ldr	r1, [r3, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a312:	400b      	ands	r3, r1
 800a314:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68d9      	ldr	r1, [r3, #12]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a324:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a32c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a332:	3b01      	subs	r3, #1
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	430a      	orrs	r2, r1
 800a33e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	40015404 	.word	0x40015404
 800a368:	40015424 	.word	0x40015424
 800a36c:	40015400 	.word	0x40015400
 800a370:	40015800 	.word	0x40015800
 800a374:	cccccccd 	.word	0xcccccccd
 800a378:	ff05c010 	.word	0xff05c010
 800a37c:	fff88000 	.word	0xfff88000

0800a380 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a388:	4b18      	ldr	r3, [pc, #96]	; (800a3ec <SAI_Disable+0x6c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <SAI_Disable+0x70>)
 800a38e:	fba2 2303 	umull	r2, r3, r2, r3
 800a392:	0b1b      	lsrs	r3, r3, #12
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a3aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c6:	e009      	b.n	800a3dc <SAI_Disable+0x5c>
    }
    count--;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e7      	bne.n	800a3ac <SAI_Disable+0x2c>

  return status;
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	20002004 	.word	0x20002004
 800a3f0:	95cbec1b 	.word	0x95cbec1b

0800a3f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e095      	b.n	800a532 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d108      	bne.n	800a420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a416:	d009      	beq.n	800a42c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	61da      	str	r2, [r3, #28]
 800a41e:	e005      	b.n	800a42c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d106      	bne.n	800a44c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7f6 ff0c 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a46c:	d902      	bls.n	800a474 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e002      	b.n	800a47a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a478:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a482:	d007      	beq.n	800a494 <HAL_SPI_Init+0xa0>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a48c:	d002      	beq.n	800a494 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d6:	ea42 0103 	orr.w	r1, r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	f003 0204 	and.w	r2, r3, #4
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	f003 0310 	and.w	r3, r3, #16
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a510:	ea42 0103 	orr.w	r1, r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e040      	b.n	800a5ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7f6 ff5d 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2224      	movs	r2, #36	; 0x24
 800a566:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f022 0201 	bic.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f82d 	bl	800a5d8 <UART_SetConfig>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e022      	b.n	800a5ce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fad9 	bl	800ab48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f042 0201 	orr.w	r2, r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fb60 	bl	800ac8c <UART_CheckIdleState>
 800a5cc:	4603      	mov	r3, r0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5dc:	b08a      	sub	sp, #40	; 0x28
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4ba4      	ldr	r3, [pc, #656]	; (800a898 <UART_SetConfig+0x2c0>)
 800a608:	4013      	ands	r3, r2
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a610:	430b      	orrs	r3, r1
 800a612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	68da      	ldr	r2, [r3, #12]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a99      	ldr	r2, [pc, #612]	; (800a89c <UART_SetConfig+0x2c4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a640:	4313      	orrs	r3, r2
 800a642:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a654:	430a      	orrs	r2, r1
 800a656:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a90      	ldr	r2, [pc, #576]	; (800a8a0 <UART_SetConfig+0x2c8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d126      	bne.n	800a6b0 <UART_SetConfig+0xd8>
 800a662:	4b90      	ldr	r3, [pc, #576]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d81b      	bhi.n	800a6a8 <UART_SetConfig+0xd0>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0xa0>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a699 	.word	0x0800a699
 800a680:	0800a691 	.word	0x0800a691
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	2301      	movs	r3, #1
 800a68a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a68e:	e116      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a690:	2302      	movs	r3, #2
 800a692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a696:	e112      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a698:	2304      	movs	r3, #4
 800a69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a69e:	e10e      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6a6:	e10a      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a6a8:	2310      	movs	r3, #16
 800a6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6ae:	e106      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a7c      	ldr	r2, [pc, #496]	; (800a8a8 <UART_SetConfig+0x2d0>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d138      	bne.n	800a72c <UART_SetConfig+0x154>
 800a6ba:	4b7a      	ldr	r3, [pc, #488]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	f003 030c 	and.w	r3, r3, #12
 800a6c4:	2b0c      	cmp	r3, #12
 800a6c6:	d82d      	bhi.n	800a724 <UART_SetConfig+0x14c>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <UART_SetConfig+0xf8>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a705 	.word	0x0800a705
 800a6d4:	0800a725 	.word	0x0800a725
 800a6d8:	0800a725 	.word	0x0800a725
 800a6dc:	0800a725 	.word	0x0800a725
 800a6e0:	0800a715 	.word	0x0800a715
 800a6e4:	0800a725 	.word	0x0800a725
 800a6e8:	0800a725 	.word	0x0800a725
 800a6ec:	0800a725 	.word	0x0800a725
 800a6f0:	0800a70d 	.word	0x0800a70d
 800a6f4:	0800a725 	.word	0x0800a725
 800a6f8:	0800a725 	.word	0x0800a725
 800a6fc:	0800a725 	.word	0x0800a725
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	2300      	movs	r3, #0
 800a706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a70a:	e0d8      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a70c:	2302      	movs	r3, #2
 800a70e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a712:	e0d4      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a714:	2304      	movs	r3, #4
 800a716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a71a:	e0d0      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a71c:	2308      	movs	r3, #8
 800a71e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a722:	e0cc      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a724:	2310      	movs	r3, #16
 800a726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a72a:	e0c8      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a5e      	ldr	r2, [pc, #376]	; (800a8ac <UART_SetConfig+0x2d4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d125      	bne.n	800a782 <UART_SetConfig+0x1aa>
 800a736:	4b5b      	ldr	r3, [pc, #364]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a740:	2b30      	cmp	r3, #48	; 0x30
 800a742:	d016      	beq.n	800a772 <UART_SetConfig+0x19a>
 800a744:	2b30      	cmp	r3, #48	; 0x30
 800a746:	d818      	bhi.n	800a77a <UART_SetConfig+0x1a2>
 800a748:	2b20      	cmp	r3, #32
 800a74a:	d00a      	beq.n	800a762 <UART_SetConfig+0x18a>
 800a74c:	2b20      	cmp	r3, #32
 800a74e:	d814      	bhi.n	800a77a <UART_SetConfig+0x1a2>
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <UART_SetConfig+0x182>
 800a754:	2b10      	cmp	r3, #16
 800a756:	d008      	beq.n	800a76a <UART_SetConfig+0x192>
 800a758:	e00f      	b.n	800a77a <UART_SetConfig+0x1a2>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a760:	e0ad      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a762:	2302      	movs	r3, #2
 800a764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a768:	e0a9      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a76a:	2304      	movs	r3, #4
 800a76c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a770:	e0a5      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a772:	2308      	movs	r3, #8
 800a774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a778:	e0a1      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a77a:	2310      	movs	r3, #16
 800a77c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a780:	e09d      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a4a      	ldr	r2, [pc, #296]	; (800a8b0 <UART_SetConfig+0x2d8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d125      	bne.n	800a7d8 <UART_SetConfig+0x200>
 800a78c:	4b45      	ldr	r3, [pc, #276]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a792:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a796:	2bc0      	cmp	r3, #192	; 0xc0
 800a798:	d016      	beq.n	800a7c8 <UART_SetConfig+0x1f0>
 800a79a:	2bc0      	cmp	r3, #192	; 0xc0
 800a79c:	d818      	bhi.n	800a7d0 <UART_SetConfig+0x1f8>
 800a79e:	2b80      	cmp	r3, #128	; 0x80
 800a7a0:	d00a      	beq.n	800a7b8 <UART_SetConfig+0x1e0>
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d814      	bhi.n	800a7d0 <UART_SetConfig+0x1f8>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <UART_SetConfig+0x1d8>
 800a7aa:	2b40      	cmp	r3, #64	; 0x40
 800a7ac:	d008      	beq.n	800a7c0 <UART_SetConfig+0x1e8>
 800a7ae:	e00f      	b.n	800a7d0 <UART_SetConfig+0x1f8>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7b6:	e082      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7be:	e07e      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a7c0:	2304      	movs	r3, #4
 800a7c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7c6:	e07a      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7ce:	e076      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7d6:	e072      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a35      	ldr	r2, [pc, #212]	; (800a8b4 <UART_SetConfig+0x2dc>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d12a      	bne.n	800a838 <UART_SetConfig+0x260>
 800a7e2:	4b30      	ldr	r3, [pc, #192]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7f0:	d01a      	beq.n	800a828 <UART_SetConfig+0x250>
 800a7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7f6:	d81b      	bhi.n	800a830 <UART_SetConfig+0x258>
 800a7f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7fc:	d00c      	beq.n	800a818 <UART_SetConfig+0x240>
 800a7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a802:	d815      	bhi.n	800a830 <UART_SetConfig+0x258>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d003      	beq.n	800a810 <UART_SetConfig+0x238>
 800a808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80c:	d008      	beq.n	800a820 <UART_SetConfig+0x248>
 800a80e:	e00f      	b.n	800a830 <UART_SetConfig+0x258>
 800a810:	2300      	movs	r3, #0
 800a812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a816:	e052      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a818:	2302      	movs	r3, #2
 800a81a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a81e:	e04e      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a820:	2304      	movs	r3, #4
 800a822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a826:	e04a      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a828:	2308      	movs	r3, #8
 800a82a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a82e:	e046      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a830:	2310      	movs	r3, #16
 800a832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a836:	e042      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a17      	ldr	r2, [pc, #92]	; (800a89c <UART_SetConfig+0x2c4>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d13a      	bne.n	800a8b8 <UART_SetConfig+0x2e0>
 800a842:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <UART_SetConfig+0x2cc>)
 800a844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a84c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a850:	d01a      	beq.n	800a888 <UART_SetConfig+0x2b0>
 800a852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a856:	d81b      	bhi.n	800a890 <UART_SetConfig+0x2b8>
 800a858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a85c:	d00c      	beq.n	800a878 <UART_SetConfig+0x2a0>
 800a85e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a862:	d815      	bhi.n	800a890 <UART_SetConfig+0x2b8>
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <UART_SetConfig+0x298>
 800a868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86c:	d008      	beq.n	800a880 <UART_SetConfig+0x2a8>
 800a86e:	e00f      	b.n	800a890 <UART_SetConfig+0x2b8>
 800a870:	2300      	movs	r3, #0
 800a872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a876:	e022      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a878:	2302      	movs	r3, #2
 800a87a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a87e:	e01e      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a880:	2304      	movs	r3, #4
 800a882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a886:	e01a      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a888:	2308      	movs	r3, #8
 800a88a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a88e:	e016      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a890:	2310      	movs	r3, #16
 800a892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a896:	e012      	b.n	800a8be <UART_SetConfig+0x2e6>
 800a898:	efff69f3 	.word	0xefff69f3
 800a89c:	40008000 	.word	0x40008000
 800a8a0:	40013800 	.word	0x40013800
 800a8a4:	40021000 	.word	0x40021000
 800a8a8:	40004400 	.word	0x40004400
 800a8ac:	40004800 	.word	0x40004800
 800a8b0:	40004c00 	.word	0x40004c00
 800a8b4:	40005000 	.word	0x40005000
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a9f      	ldr	r2, [pc, #636]	; (800ab40 <UART_SetConfig+0x568>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d17a      	bne.n	800a9be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d824      	bhi.n	800a91a <UART_SetConfig+0x342>
 800a8d0:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <UART_SetConfig+0x300>)
 800a8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d6:	bf00      	nop
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a91b 	.word	0x0800a91b
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a91b 	.word	0x0800a91b
 800a8e8:	0800a90b 	.word	0x0800a90b
 800a8ec:	0800a91b 	.word	0x0800a91b
 800a8f0:	0800a91b 	.word	0x0800a91b
 800a8f4:	0800a91b 	.word	0x0800a91b
 800a8f8:	0800a913 	.word	0x0800a913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8fc:	f7fe f818 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800a900:	61f8      	str	r0, [r7, #28]
        break;
 800a902:	e010      	b.n	800a926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a904:	4b8f      	ldr	r3, [pc, #572]	; (800ab44 <UART_SetConfig+0x56c>)
 800a906:	61fb      	str	r3, [r7, #28]
        break;
 800a908:	e00d      	b.n	800a926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a90a:	f7fd ff79 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800a90e:	61f8      	str	r0, [r7, #28]
        break;
 800a910:	e009      	b.n	800a926 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a916:	61fb      	str	r3, [r7, #28]
        break;
 800a918:	e005      	b.n	800a926 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80fb 	beq.w	800ab24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	4613      	mov	r3, r2
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4413      	add	r3, r2
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d305      	bcc.n	800a94a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	429a      	cmp	r2, r3
 800a948:	d903      	bls.n	800a952 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a950:	e0e8      	b.n	800ab24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	2200      	movs	r2, #0
 800a956:	461c      	mov	r4, r3
 800a958:	4615      	mov	r5, r2
 800a95a:	f04f 0200 	mov.w	r2, #0
 800a95e:	f04f 0300 	mov.w	r3, #0
 800a962:	022b      	lsls	r3, r5, #8
 800a964:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a968:	0222      	lsls	r2, r4, #8
 800a96a:	68f9      	ldr	r1, [r7, #12]
 800a96c:	6849      	ldr	r1, [r1, #4]
 800a96e:	0849      	lsrs	r1, r1, #1
 800a970:	2000      	movs	r0, #0
 800a972:	4688      	mov	r8, r1
 800a974:	4681      	mov	r9, r0
 800a976:	eb12 0a08 	adds.w	sl, r2, r8
 800a97a:	eb43 0b09 	adc.w	fp, r3, r9
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	603b      	str	r3, [r7, #0]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a98c:	4650      	mov	r0, sl
 800a98e:	4659      	mov	r1, fp
 800a990:	f7f5 fc22 	bl	80001d8 <__aeabi_uldivmod>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4613      	mov	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a2:	d308      	bcc.n	800a9b6 <UART_SetConfig+0x3de>
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9aa:	d204      	bcs.n	800a9b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	60da      	str	r2, [r3, #12]
 800a9b4:	e0b6      	b.n	800ab24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a9bc:	e0b2      	b.n	800ab24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	69db      	ldr	r3, [r3, #28]
 800a9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9c6:	d15e      	bne.n	800aa86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a9c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d828      	bhi.n	800aa22 <UART_SetConfig+0x44a>
 800a9d0:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <UART_SetConfig+0x400>)
 800a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d6:	bf00      	nop
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa0d 	.word	0x0800aa0d
 800a9e4:	0800aa23 	.word	0x0800aa23
 800a9e8:	0800aa13 	.word	0x0800aa13
 800a9ec:	0800aa23 	.word	0x0800aa23
 800a9f0:	0800aa23 	.word	0x0800aa23
 800a9f4:	0800aa23 	.word	0x0800aa23
 800a9f8:	0800aa1b 	.word	0x0800aa1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9fc:	f7fd ff98 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800aa00:	61f8      	str	r0, [r7, #28]
        break;
 800aa02:	e014      	b.n	800aa2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa04:	f7fd ffaa 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 800aa08:	61f8      	str	r0, [r7, #28]
        break;
 800aa0a:	e010      	b.n	800aa2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa0c:	4b4d      	ldr	r3, [pc, #308]	; (800ab44 <UART_SetConfig+0x56c>)
 800aa0e:	61fb      	str	r3, [r7, #28]
        break;
 800aa10:	e00d      	b.n	800aa2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa12:	f7fd fef5 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800aa16:	61f8      	str	r0, [r7, #28]
        break;
 800aa18:	e009      	b.n	800aa2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa1e:	61fb      	str	r3, [r7, #28]
        break;
 800aa20:	e005      	b.n	800aa2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aa2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d077      	beq.n	800ab24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	005a      	lsls	r2, r3, #1
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	085b      	lsrs	r3, r3, #1
 800aa3e:	441a      	add	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b0f      	cmp	r3, #15
 800aa4e:	d916      	bls.n	800aa7e <UART_SetConfig+0x4a6>
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa56:	d212      	bcs.n	800aa7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	f023 030f 	bic.w	r3, r3, #15
 800aa60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	8afb      	ldrh	r3, [r7, #22]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	8afa      	ldrh	r2, [r7, #22]
 800aa7a:	60da      	str	r2, [r3, #12]
 800aa7c:	e052      	b.n	800ab24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800aa84:	e04e      	b.n	800ab24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa8a:	2b08      	cmp	r3, #8
 800aa8c:	d827      	bhi.n	800aade <UART_SetConfig+0x506>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <UART_SetConfig+0x4bc>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aab9 	.word	0x0800aab9
 800aa98:	0800aac1 	.word	0x0800aac1
 800aa9c:	0800aac9 	.word	0x0800aac9
 800aaa0:	0800aadf 	.word	0x0800aadf
 800aaa4:	0800aacf 	.word	0x0800aacf
 800aaa8:	0800aadf 	.word	0x0800aadf
 800aaac:	0800aadf 	.word	0x0800aadf
 800aab0:	0800aadf 	.word	0x0800aadf
 800aab4:	0800aad7 	.word	0x0800aad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aab8:	f7fd ff3a 	bl	8008930 <HAL_RCC_GetPCLK1Freq>
 800aabc:	61f8      	str	r0, [r7, #28]
        break;
 800aabe:	e014      	b.n	800aaea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aac0:	f7fd ff4c 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 800aac4:	61f8      	str	r0, [r7, #28]
        break;
 800aac6:	e010      	b.n	800aaea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aac8:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <UART_SetConfig+0x56c>)
 800aaca:	61fb      	str	r3, [r7, #28]
        break;
 800aacc:	e00d      	b.n	800aaea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aace:	f7fd fe97 	bl	8008800 <HAL_RCC_GetSysClockFreq>
 800aad2:	61f8      	str	r0, [r7, #28]
        break;
 800aad4:	e009      	b.n	800aaea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aada:	61fb      	str	r3, [r7, #28]
        break;
 800aadc:	e005      	b.n	800aaea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aae8:	bf00      	nop
    }

    if (pclk != 0U)
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d019      	beq.n	800ab24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	085a      	lsrs	r2, r3, #1
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	441a      	add	r2, r3
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d909      	bls.n	800ab1e <UART_SetConfig+0x546>
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab10:	d205      	bcs.n	800ab1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	60da      	str	r2, [r3, #12]
 800ab1c:	e002      	b.n	800ab24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ab30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3728      	adds	r7, #40	; 0x28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab3e:	bf00      	nop
 800ab40:	40008000 	.word	0x40008000
 800ab44:	00f42400 	.word	0x00f42400

0800ab48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00a      	beq.n	800ab72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	430a      	orrs	r2, r1
 800ab92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	f003 0304 	and.w	r3, r3, #4
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00a      	beq.n	800abb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	f003 0308 	and.w	r3, r3, #8
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	430a      	orrs	r2, r1
 800abd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	f003 0310 	and.w	r3, r3, #16
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00a      	beq.n	800abfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00a      	beq.n	800ac1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	430a      	orrs	r2, r1
 800ac1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01a      	beq.n	800ac5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac46:	d10a      	bne.n	800ac5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	605a      	str	r2, [r3, #4]
  }
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af02      	add	r7, sp, #8
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac9c:	f7fc fa22 	bl	80070e4 <HAL_GetTick>
 800aca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b08      	cmp	r3, #8
 800acae:	d10e      	bne.n	800acce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f82d 	bl	800ad1e <UART_WaitOnFlagUntilTimeout>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e023      	b.n	800ad16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d10e      	bne.n	800acfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f817 	bl	800ad1e <UART_WaitOnFlagUntilTimeout>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e00d      	b.n	800ad16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2220      	movs	r2, #32
 800acfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b09c      	sub	sp, #112	; 0x70
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	603b      	str	r3, [r7, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2e:	e0a5      	b.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad36:	f000 80a1 	beq.w	800ae7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3a:	f7fc f9d3 	bl	80070e4 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d302      	bcc.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d13e      	bne.n	800adce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad64:	667b      	str	r3, [r7, #100]	; 0x64
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e6      	bne.n	800ad50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3308      	adds	r3, #8
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	f023 0301 	bic.w	r3, r3, #1
 800ad98:	663b      	str	r3, [r7, #96]	; 0x60
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ada2:	64ba      	str	r2, [r7, #72]	; 0x48
 800ada4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ada8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800adb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e5      	bne.n	800ad82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e067      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d04f      	beq.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ade6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adea:	d147      	bne.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae14:	637b      	str	r3, [r7, #52]	; 0x34
 800ae16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e6      	bne.n	800adf6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	613b      	str	r3, [r7, #16]
   return(result);
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f023 0301 	bic.w	r3, r3, #1
 800ae3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3308      	adds	r3, #8
 800ae46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae48:	623a      	str	r2, [r7, #32]
 800ae4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	69f9      	ldr	r1, [r7, #28]
 800ae4e:	6a3a      	ldr	r2, [r7, #32]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e010      	b.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	69da      	ldr	r2, [r3, #28]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	4013      	ands	r3, r2
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	bf0c      	ite	eq
 800ae8c:	2301      	moveq	r3, #1
 800ae8e:	2300      	movne	r3, #0
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	f43f af4a 	beq.w	800ad30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3770      	adds	r7, #112	; 0x70
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aea6:	b084      	sub	sp, #16
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	f107 001c 	add.w	r0, r7, #28
 800aeb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fa6f 	bl	800b3a8 <USB_CoreReset>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d106      	bne.n	800aee2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	639a      	str	r2, [r3, #56]	; 0x38
 800aee0:	e005      	b.n	800aeee <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aefa:	b004      	add	sp, #16
 800aefc:	4770      	bx	lr

0800aefe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f023 0201 	bic.w	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d115      	bne.n	800af6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af4e:	2001      	movs	r0, #1
 800af50:	f7fc f8d4 	bl	80070fc <HAL_Delay>
      ms++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fa16 	bl	800b38c <USB_GetMode>
 800af60:	4603      	mov	r3, r0
 800af62:	2b01      	cmp	r3, #1
 800af64:	d01e      	beq.n	800afa4 <USB_SetCurrentMode+0x84>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b31      	cmp	r3, #49	; 0x31
 800af6a:	d9f0      	bls.n	800af4e <USB_SetCurrentMode+0x2e>
 800af6c:	e01a      	b.n	800afa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d115      	bne.n	800afa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af80:	2001      	movs	r0, #1
 800af82:	f7fc f8bb 	bl	80070fc <HAL_Delay>
      ms++;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f9fd 	bl	800b38c <USB_GetMode>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <USB_SetCurrentMode+0x84>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b31      	cmp	r3, #49	; 0x31
 800af9c:	d9f0      	bls.n	800af80 <USB_SetCurrentMode+0x60>
 800af9e:	e001      	b.n	800afa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e005      	b.n	800afb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b32      	cmp	r3, #50	; 0x32
 800afa8:	d101      	bne.n	800afae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afb8:	b084      	sub	sp, #16
 800afba:	b580      	push	{r7, lr}
 800afbc:	b086      	sub	sp, #24
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800afc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800afd2:	2300      	movs	r3, #0
 800afd4:	613b      	str	r3, [r7, #16]
 800afd6:	e009      	b.n	800afec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	3340      	adds	r3, #64	; 0x40
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	2200      	movs	r2, #0
 800afe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	3301      	adds	r3, #1
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2b0e      	cmp	r3, #14
 800aff0:	d9f2      	bls.n	800afd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11c      	bne.n	800b032 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b006:	f043 0302 	orr.w	r3, r3, #2
 800b00a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e005      	b.n	800b03e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b044:	461a      	mov	r2, r3
 800b046:	2300      	movs	r3, #0
 800b048:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b050:	4619      	mov	r1, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b058:	461a      	mov	r2, r3
 800b05a:	680b      	ldr	r3, [r1, #0]
 800b05c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b05e:	2103      	movs	r1, #3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f959 	bl	800b318 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b066:	2110      	movs	r1, #16
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f8f1 	bl	800b250 <USB_FlushTxFifo>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f91d 	bl	800b2b8 <USB_FlushRxFifo>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08e:	461a      	mov	r2, r3
 800b090:	2300      	movs	r3, #0
 800b092:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b09a:	461a      	mov	r2, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	613b      	str	r3, [r7, #16]
 800b0b0:	e043      	b.n	800b13a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0c8:	d118      	bne.n	800b0fc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0dc:	461a      	mov	r2, r3
 800b0de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	e013      	b.n	800b10e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	e008      	b.n	800b10e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	015a      	lsls	r2, r3, #5
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4413      	add	r3, r2
 800b104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b108:	461a      	mov	r2, r3
 800b10a:	2300      	movs	r3, #0
 800b10c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11a:	461a      	mov	r2, r3
 800b11c:	2300      	movs	r3, #0
 800b11e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	461a      	mov	r2, r3
 800b12e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b132:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	3301      	adds	r3, #1
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d3b7      	bcc.n	800b0b2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b142:	2300      	movs	r3, #0
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	e043      	b.n	800b1d0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b15a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b15e:	d118      	bne.n	800b192 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b172:	461a      	mov	r2, r3
 800b174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e013      	b.n	800b1a4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	461a      	mov	r2, r3
 800b18a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	e008      	b.n	800b1a4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19e:	461a      	mov	r2, r3
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d3b7      	bcc.n	800b148 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	f043 0210 	orr.w	r2, r3, #16
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	699a      	ldr	r2, [r3, #24]
 800b20a:	4b10      	ldr	r3, [pc, #64]	; (800b24c <USB_DevInit+0x294>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	f043 0208 	orr.w	r2, r3, #8
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d107      	bne.n	800b23a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b232:	f043 0304 	orr.w	r3, r3, #4
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b246:	b004      	add	sp, #16
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	803c3800 	.word	0x803c3800

0800b250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3301      	adds	r3, #1
 800b262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4a13      	ldr	r2, [pc, #76]	; (800b2b4 <USB_FlushTxFifo+0x64>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d901      	bls.n	800b270 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e01b      	b.n	800b2a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	daf2      	bge.n	800b25e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	019b      	lsls	r3, r3, #6
 800b280:	f043 0220 	orr.w	r2, r3, #32
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3301      	adds	r3, #1
 800b28c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4a08      	ldr	r2, [pc, #32]	; (800b2b4 <USB_FlushTxFifo+0x64>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d901      	bls.n	800b29a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e006      	b.n	800b2a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b20      	cmp	r3, #32
 800b2a4:	d0f0      	beq.n	800b288 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	00030d40 	.word	0x00030d40

0800b2b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4a11      	ldr	r2, [pc, #68]	; (800b314 <USB_FlushRxFifo+0x5c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d901      	bls.n	800b2d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e018      	b.n	800b308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	daf2      	bge.n	800b2c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2210      	movs	r2, #16
 800b2e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4a08      	ldr	r2, [pc, #32]	; (800b314 <USB_FlushRxFifo+0x5c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d901      	bls.n	800b2fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e006      	b.n	800b308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0310 	and.w	r3, r3, #16
 800b302:	2b10      	cmp	r3, #16
 800b304:	d0f0      	beq.n	800b2e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	00030d40 	.word	0x00030d40

0800b318 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b338:	4313      	orrs	r3, r2
 800b33a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b364:	f023 0303 	bic.w	r3, r3, #3
 800b368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b378:	f043 0302 	orr.w	r3, r3, #2
 800b37c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	f003 0301 	and.w	r3, r3, #1
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4a13      	ldr	r2, [pc, #76]	; (800b40c <USB_CoreReset+0x64>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d901      	bls.n	800b3c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e01b      	b.n	800b3fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	daf2      	bge.n	800b3b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f043 0201 	orr.w	r2, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4a09      	ldr	r2, [pc, #36]	; (800b40c <USB_CoreReset+0x64>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d901      	bls.n	800b3f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e006      	b.n	800b3fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d0f0      	beq.n	800b3de <USB_CoreReset+0x36>

  return HAL_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	00030d40 	.word	0x00030d40

0800b410 <__libc_init_array>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	4d0d      	ldr	r5, [pc, #52]	; (800b448 <__libc_init_array+0x38>)
 800b414:	4c0d      	ldr	r4, [pc, #52]	; (800b44c <__libc_init_array+0x3c>)
 800b416:	1b64      	subs	r4, r4, r5
 800b418:	10a4      	asrs	r4, r4, #2
 800b41a:	2600      	movs	r6, #0
 800b41c:	42a6      	cmp	r6, r4
 800b41e:	d109      	bne.n	800b434 <__libc_init_array+0x24>
 800b420:	4d0b      	ldr	r5, [pc, #44]	; (800b450 <__libc_init_array+0x40>)
 800b422:	4c0c      	ldr	r4, [pc, #48]	; (800b454 <__libc_init_array+0x44>)
 800b424:	f000 f848 	bl	800b4b8 <_init>
 800b428:	1b64      	subs	r4, r4, r5
 800b42a:	10a4      	asrs	r4, r4, #2
 800b42c:	2600      	movs	r6, #0
 800b42e:	42a6      	cmp	r6, r4
 800b430:	d105      	bne.n	800b43e <__libc_init_array+0x2e>
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	f855 3b04 	ldr.w	r3, [r5], #4
 800b438:	4798      	blx	r3
 800b43a:	3601      	adds	r6, #1
 800b43c:	e7ee      	b.n	800b41c <__libc_init_array+0xc>
 800b43e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b442:	4798      	blx	r3
 800b444:	3601      	adds	r6, #1
 800b446:	e7f2      	b.n	800b42e <__libc_init_array+0x1e>
 800b448:	0800b624 	.word	0x0800b624
 800b44c:	0800b624 	.word	0x0800b624
 800b450:	0800b624 	.word	0x0800b624
 800b454:	0800b628 	.word	0x0800b628

0800b458 <memcpy>:
 800b458:	440a      	add	r2, r1
 800b45a:	4291      	cmp	r1, r2
 800b45c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b460:	d100      	bne.n	800b464 <memcpy+0xc>
 800b462:	4770      	bx	lr
 800b464:	b510      	push	{r4, lr}
 800b466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b46a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b46e:	4291      	cmp	r1, r2
 800b470:	d1f9      	bne.n	800b466 <memcpy+0xe>
 800b472:	bd10      	pop	{r4, pc}

0800b474 <memmove>:
 800b474:	4288      	cmp	r0, r1
 800b476:	b510      	push	{r4, lr}
 800b478:	eb01 0402 	add.w	r4, r1, r2
 800b47c:	d902      	bls.n	800b484 <memmove+0x10>
 800b47e:	4284      	cmp	r4, r0
 800b480:	4623      	mov	r3, r4
 800b482:	d807      	bhi.n	800b494 <memmove+0x20>
 800b484:	1e43      	subs	r3, r0, #1
 800b486:	42a1      	cmp	r1, r4
 800b488:	d008      	beq.n	800b49c <memmove+0x28>
 800b48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b492:	e7f8      	b.n	800b486 <memmove+0x12>
 800b494:	4402      	add	r2, r0
 800b496:	4601      	mov	r1, r0
 800b498:	428a      	cmp	r2, r1
 800b49a:	d100      	bne.n	800b49e <memmove+0x2a>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4a6:	e7f7      	b.n	800b498 <memmove+0x24>

0800b4a8 <memset>:
 800b4a8:	4402      	add	r2, r0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d100      	bne.n	800b4b2 <memset+0xa>
 800b4b0:	4770      	bx	lr
 800b4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4b6:	e7f9      	b.n	800b4ac <memset+0x4>

0800b4b8 <_init>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	bf00      	nop
 800b4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4be:	bc08      	pop	{r3}
 800b4c0:	469e      	mov	lr, r3
 800b4c2:	4770      	bx	lr

0800b4c4 <_fini>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	bf00      	nop
 800b4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ca:	bc08      	pop	{r3}
 800b4cc:	469e      	mov	lr, r3
 800b4ce:	4770      	bx	lr
